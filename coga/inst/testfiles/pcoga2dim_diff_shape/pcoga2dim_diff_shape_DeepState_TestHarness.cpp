// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pcoga2dim_diff_shape_DeepState_TestHarness_generation.cpp and pcoga2dim_diff_shape_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double pcoga2dim_diff_shape(double x, double shape1, double shape2, double rate1, double rate2);

TEST(coga_deepstate_test,pcoga2dim_diff_shape_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x(1);
  x[0]  = RcppDeepState_double();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/coga/inst/testfiles/pcoga2dim_diff_shape/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector shape1(1);
  shape1[0]  = RcppDeepState_double();
  qs::c_qsave(shape1,"/home/akhila/fuzzer_packages/fuzzedpackages/coga/inst/testfiles/pcoga2dim_diff_shape/inputs/shape1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "shape1 values: "<< shape1 << std::endl;
  NumericVector shape2(1);
  shape2[0]  = RcppDeepState_double();
  qs::c_qsave(shape2,"/home/akhila/fuzzer_packages/fuzzedpackages/coga/inst/testfiles/pcoga2dim_diff_shape/inputs/shape2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "shape2 values: "<< shape2 << std::endl;
  NumericVector rate1(1);
  rate1[0]  = RcppDeepState_double();
  qs::c_qsave(rate1,"/home/akhila/fuzzer_packages/fuzzedpackages/coga/inst/testfiles/pcoga2dim_diff_shape/inputs/rate1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rate1 values: "<< rate1 << std::endl;
  NumericVector rate2(1);
  rate2[0]  = RcppDeepState_double();
  qs::c_qsave(rate2,"/home/akhila/fuzzer_packages/fuzzedpackages/coga/inst/testfiles/pcoga2dim_diff_shape/inputs/rate2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rate2 values: "<< rate2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pcoga2dim_diff_shape(x[0],shape1[0],shape2[0],rate1[0],rate2[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
