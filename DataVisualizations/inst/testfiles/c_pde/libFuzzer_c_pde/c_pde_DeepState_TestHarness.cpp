// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// c_pde_DeepState_TestHarness_generation.cpp and c_pde_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector c_pde(NumericVector kernels, int nKernels, double paretoRadius, NumericVector DataPlus);

TEST(DataVisualizations_deepstate_test,c_pde_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector kernels  = RcppDeepState_NumericVector();
  std::string kernels_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DataVisualizations/inst/testfiles/c_pde/libFuzzer_c_pde/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kernels.qs";
  qs::c_qsave(kernels,kernels_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kernels values: "<< kernels << std::endl;
  IntegerVector nKernels(1);
  nKernels[0]  = RcppDeepState_int();
  std::string nKernels_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DataVisualizations/inst/testfiles/c_pde/libFuzzer_c_pde/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nKernels.qs";
  qs::c_qsave(nKernels,nKernels_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nKernels values: "<< nKernels << std::endl;
  NumericVector paretoRadius(1);
  paretoRadius[0]  = RcppDeepState_double();
  std::string paretoRadius_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DataVisualizations/inst/testfiles/c_pde/libFuzzer_c_pde/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_paretoRadius.qs";
  qs::c_qsave(paretoRadius,paretoRadius_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "paretoRadius values: "<< paretoRadius << std::endl;
  NumericVector DataPlus  = RcppDeepState_NumericVector();
  std::string DataPlus_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DataVisualizations/inst/testfiles/c_pde/libFuzzer_c_pde/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DataPlus.qs";
  qs::c_qsave(DataPlus,DataPlus_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DataPlus values: "<< DataPlus << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    c_pde(kernels,nKernels[0],paretoRadius[0],DataPlus);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
