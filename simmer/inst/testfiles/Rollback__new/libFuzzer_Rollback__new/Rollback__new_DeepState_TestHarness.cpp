// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// Rollback__new_DeepState_TestHarness_generation.cpp and Rollback__new_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

SEXP Rollback__new(int amount, int times);

TEST(simmer_deepstate_test,Rollback__new_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector amount(1);
  amount[0]  = RcppDeepState_int();
  std::string amount_t = "/home/akhila/fuzzer_packages/fuzzedpackages/simmer/inst/testfiles/Rollback__new/libFuzzer_Rollback__new/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_amount.qs";
  qs::c_qsave(amount,amount_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "amount values: "<< amount << std::endl;
  IntegerVector times(1);
  times[0]  = RcppDeepState_int();
  std::string times_t = "/home/akhila/fuzzer_packages/fuzzedpackages/simmer/inst/testfiles/Rollback__new/libFuzzer_Rollback__new/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_times.qs";
  qs::c_qsave(times,times_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "times values: "<< times << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    Rollback__new(amount[0],times[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
