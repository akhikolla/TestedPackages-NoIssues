// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rDistanceToroidCsingle_DeepState_TestHarness_generation.cpp and rDistanceToroidCsingle_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix rDistanceToroidCsingle(NumericVector AllDataBotsPosX, NumericVector AllDataBotsPosY, NumericMatrix AllallowedDBPosR0, double Lines, double Columns, NumericVector Nullpunkt);

TEST(DatabionicSwarm_deepstate_test,rDistanceToroidCsingle_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector AllDataBotsPosX  = RcppDeepState_NumericVector();
  std::string AllDataBotsPosX_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/rDistanceToroidCsingle/libFuzzer_rDistanceToroidCsingle/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_AllDataBotsPosX.qs";
  qs::c_qsave(AllDataBotsPosX,AllDataBotsPosX_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AllDataBotsPosX values: "<< AllDataBotsPosX << std::endl;
  NumericVector AllDataBotsPosY  = RcppDeepState_NumericVector();
  std::string AllDataBotsPosY_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/rDistanceToroidCsingle/libFuzzer_rDistanceToroidCsingle/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_AllDataBotsPosY.qs";
  qs::c_qsave(AllDataBotsPosY,AllDataBotsPosY_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AllDataBotsPosY values: "<< AllDataBotsPosY << std::endl;
  NumericMatrix AllallowedDBPosR0  = RcppDeepState_NumericMatrix();
  std::string AllallowedDBPosR0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/rDistanceToroidCsingle/libFuzzer_rDistanceToroidCsingle/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_AllallowedDBPosR0.qs";
  qs::c_qsave(AllallowedDBPosR0,AllallowedDBPosR0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AllallowedDBPosR0 values: "<< AllallowedDBPosR0 << std::endl;
  NumericVector Lines(1);
  Lines[0]  = RcppDeepState_double();
  std::string Lines_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/rDistanceToroidCsingle/libFuzzer_rDistanceToroidCsingle/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Lines.qs";
  qs::c_qsave(Lines,Lines_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lines values: "<< Lines << std::endl;
  NumericVector Columns(1);
  Columns[0]  = RcppDeepState_double();
  std::string Columns_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/rDistanceToroidCsingle/libFuzzer_rDistanceToroidCsingle/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Columns.qs";
  qs::c_qsave(Columns,Columns_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Columns values: "<< Columns << std::endl;
  NumericVector Nullpunkt  = RcppDeepState_NumericVector();
  std::string Nullpunkt_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/rDistanceToroidCsingle/libFuzzer_rDistanceToroidCsingle/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Nullpunkt.qs";
  qs::c_qsave(Nullpunkt,Nullpunkt_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Nullpunkt values: "<< Nullpunkt << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rDistanceToroidCsingle(AllDataBotsPosX,AllDataBotsPosY,AllallowedDBPosR0,Lines[0],Columns[0],Nullpunkt);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
