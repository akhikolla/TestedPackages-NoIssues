// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// findPossiblePositionsCsingle_DeepState_TestHarness_generation.cpp and findPossiblePositionsCsingle_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

ComplexVector findPossiblePositionsCsingle(NumericMatrix RadiusPositionsschablone, double jumplength, double alpha, double Lines);

TEST(DatabionicSwarm_deepstate_test,findPossiblePositionsCsingle_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix RadiusPositionsschablone  = RcppDeepState_NumericMatrix();
  std::string RadiusPositionsschablone_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/findPossiblePositionsCsingle/AFL_findPossiblePositionsCsingle/afl_inputs/" + std::to_string(t) + "_RadiusPositionsschablone.qs";
  qs::c_qsave(RadiusPositionsschablone,RadiusPositionsschablone_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "RadiusPositionsschablone values: "<< RadiusPositionsschablone << std::endl;
  NumericVector jumplength(1);
  jumplength[0]  = RcppDeepState_double();
  std::string jumplength_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/findPossiblePositionsCsingle/AFL_findPossiblePositionsCsingle/afl_inputs/" + std::to_string(t) + "_jumplength.qs";
  qs::c_qsave(jumplength,jumplength_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "jumplength values: "<< jumplength << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/findPossiblePositionsCsingle/AFL_findPossiblePositionsCsingle/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector Lines(1);
  Lines[0]  = RcppDeepState_double();
  std::string Lines_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DatabionicSwarm/inst/testfiles/findPossiblePositionsCsingle/AFL_findPossiblePositionsCsingle/afl_inputs/" + std::to_string(t) + "_Lines.qs";
  qs::c_qsave(Lines,Lines_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lines values: "<< Lines << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    findPossiblePositionsCsingle(RadiusPositionsschablone,jumplength[0],alpha[0],Lines[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
