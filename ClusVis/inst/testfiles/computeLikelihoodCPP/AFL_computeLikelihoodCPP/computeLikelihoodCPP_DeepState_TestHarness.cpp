// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// computeLikelihoodCPP_DeepState_TestHarness_generation.cpp and computeLikelihoodCPP_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector computeLikelihoodCPP(NumericVector Rparam, NumericVector Rprop, NumericMatrix Rlogu, NumericMatrix Rtik);

TEST(ClusVis_deepstate_test,computeLikelihoodCPP_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector Rparam  = RcppDeepState_NumericVector();
  std::string Rparam_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClusVis/inst/testfiles/computeLikelihoodCPP/AFL_computeLikelihoodCPP/afl_inputs/" + std::to_string(t) + "_Rparam.qs";
  qs::c_qsave(Rparam,Rparam_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Rparam values: "<< Rparam << std::endl;
  NumericVector Rprop  = RcppDeepState_NumericVector();
  std::string Rprop_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClusVis/inst/testfiles/computeLikelihoodCPP/AFL_computeLikelihoodCPP/afl_inputs/" + std::to_string(t) + "_Rprop.qs";
  qs::c_qsave(Rprop,Rprop_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Rprop values: "<< Rprop << std::endl;
  NumericMatrix Rlogu  = RcppDeepState_NumericMatrix();
  std::string Rlogu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClusVis/inst/testfiles/computeLikelihoodCPP/AFL_computeLikelihoodCPP/afl_inputs/" + std::to_string(t) + "_Rlogu.qs";
  qs::c_qsave(Rlogu,Rlogu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Rlogu values: "<< Rlogu << std::endl;
  NumericMatrix Rtik  = RcppDeepState_NumericMatrix();
  std::string Rtik_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClusVis/inst/testfiles/computeLikelihoodCPP/AFL_computeLikelihoodCPP/afl_inputs/" + std::to_string(t) + "_Rtik.qs";
  qs::c_qsave(Rtik,Rtik_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Rtik values: "<< Rtik << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    computeLikelihoodCPP(Rparam,Rprop,Rlogu,Rtik);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
