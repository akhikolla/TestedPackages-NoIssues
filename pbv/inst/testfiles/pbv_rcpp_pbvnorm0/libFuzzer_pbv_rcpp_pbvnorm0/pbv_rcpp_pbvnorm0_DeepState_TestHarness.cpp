// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pbv_rcpp_pbvnorm0_DeepState_TestHarness_generation.cpp and pbv_rcpp_pbvnorm0_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double pbv_rcpp_pbvnorm0(double h1, double hk, double r);

TEST(pbv_deepstate_test,pbv_rcpp_pbvnorm0_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector h1(1);
  h1[0]  = RcppDeepState_double();
  std::string h1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/pbv/inst/testfiles/pbv_rcpp_pbvnorm0/libFuzzer_pbv_rcpp_pbvnorm0/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_h1.qs";
  qs::c_qsave(h1,h1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h1 values: "<< h1 << std::endl;
  NumericVector hk(1);
  hk[0]  = RcppDeepState_double();
  std::string hk_t = "/home/akhila/fuzzer_packages/fuzzedpackages/pbv/inst/testfiles/pbv_rcpp_pbvnorm0/libFuzzer_pbv_rcpp_pbvnorm0/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_hk.qs";
  qs::c_qsave(hk,hk_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "hk values: "<< hk << std::endl;
  NumericVector r(1);
  r[0]  = RcppDeepState_double();
  std::string r_t = "/home/akhila/fuzzer_packages/fuzzedpackages/pbv/inst/testfiles/pbv_rcpp_pbvnorm0/libFuzzer_pbv_rcpp_pbvnorm0/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_r.qs";
  qs::c_qsave(r,r_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "r values: "<< r << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pbv_rcpp_pbvnorm0(h1[0],hk[0],r[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
