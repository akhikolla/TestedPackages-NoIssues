// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// tau2compute_DeepState_TestHarness_generation.cpp and tau2compute_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector tau2compute(NumericVector tau2, NumericVector temp, const double tau2_shape, const double prior_tau2, const int N);

TEST(CARBayesST_deepstate_test,tau2compute_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector tau2  = RcppDeepState_NumericVector();
  qs::c_qsave(tau2,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/tau2compute/inputs/tau2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau2 values: "<< tau2 << std::endl;
  NumericVector temp  = RcppDeepState_NumericVector();
  qs::c_qsave(temp,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/tau2compute/inputs/temp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "temp values: "<< temp << std::endl;
  NumericVector tau2_shape(1);
  tau2_shape[0]  = RcppDeepState_double();
  qs::c_qsave(tau2_shape,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/tau2compute/inputs/tau2_shape.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau2_shape values: "<< tau2_shape << std::endl;
  NumericVector prior_tau2(1);
  prior_tau2[0]  = RcppDeepState_double();
  qs::c_qsave(prior_tau2,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/tau2compute/inputs/prior_tau2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prior_tau2 values: "<< prior_tau2 << std::endl;
  IntegerVector N(1);
  N[0]  = RcppDeepState_int();
  qs::c_qsave(N,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/tau2compute/inputs/N.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N values: "<< N << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    tau2compute(tau2,temp,tau2_shape[0],prior_tau2[0],N[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
