// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// zipcarupdateMALA_DeepState_TestHarness_generation.cpp and zipcarupdateMALA_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List zipcarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset, NumericMatrix missind);

TEST(CARBayesST_deepstate_test,zipcarupdateMALA_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix Wtriplet  = RcppDeepState_NumericMatrix();
  std::string Wtriplet_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_Wtriplet.qs";
  qs::c_qsave(Wtriplet,Wtriplet_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Wtriplet values: "<< Wtriplet << std::endl;
  NumericMatrix Wbegfin  = RcppDeepState_NumericMatrix();
  std::string Wbegfin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_Wbegfin.qs";
  qs::c_qsave(Wbegfin,Wbegfin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Wbegfin values: "<< Wbegfin << std::endl;
  NumericVector Wtripletsum  = RcppDeepState_NumericVector();
  std::string Wtriplet_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_Wtriplet.qs";
  std::string Wtripletsum_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_Wtripletsum.qs";
  qs::c_qsave(Wtripletsum,Wtripletsum_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Wtripletsum values: "<< Wtripletsum << std::endl;
  IntegerVector nsites(1);
  nsites[0]  = RcppDeepState_int();
  std::string nsites_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_nsites.qs";
  qs::c_qsave(nsites,nsites_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsites values: "<< nsites << std::endl;
  NumericVector phi  = RcppDeepState_NumericVector();
  std::string phi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_phi.qs";
  qs::c_qsave(phi,phi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phi values: "<< phi << std::endl;
  NumericVector tau2(1);
  tau2[0]  = RcppDeepState_double();
  std::string tau2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_tau2.qs";
  qs::c_qsave(tau2,tau2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau2 values: "<< tau2 << std::endl;
  NumericMatrix y  = RcppDeepState_NumericMatrix();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector phi_tune(1);
  phi_tune[0]  = RcppDeepState_double();
  std::string phi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_phi.qs";
  std::string phi_tune_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_phi_tune.qs";
  qs::c_qsave(phi_tune,phi_tune_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phi_tune values: "<< phi_tune << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  std::string rho_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_rho.qs";
  qs::c_qsave(rho,rho_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericMatrix offset  = RcppDeepState_NumericMatrix();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_offset.qs";
  qs::c_qsave(offset,offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  IntegerVector ntime(1);
  ntime[0]  = RcppDeepState_int();
  std::string ntime_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_ntime.qs";
  qs::c_qsave(ntime,ntime_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntime values: "<< ntime << std::endl;
  NumericVector mult_offset  = RcppDeepState_NumericVector();
  std::string mult_offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_mult_offset.qs";
  qs::c_qsave(mult_offset,mult_offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mult_offset values: "<< mult_offset << std::endl;
  NumericMatrix missind  = RcppDeepState_NumericMatrix();
  std::string missind_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/zipcarupdateMALA/AFL_zipcarupdateMALA/afl_inputs/" + std::to_string(t) + "_missind.qs";
  qs::c_qsave(missind,missind_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "missind values: "<< missind << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    zipcarupdateMALA(Wtriplet,Wbegfin,Wtripletsum,nsites[0],phi,tau2[0],y,phi_tune[0],rho[0],offset,ntime[0],mult_offset,missind);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
