// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// SPTICARphiBinomialMALA_DeepState_TestHarness_generation.cpp and SPTICARphiBinomialMALA_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List SPTICARphiBinomialMALA(NumericMatrix W, const int nsites, const int ntimes, NumericVector phi, NumericVector nneighbours, double tau, const NumericVector y, double alpha, NumericVector XB, const double phiVarb_tune, NumericVector trials);

TEST(CARBayesST_deepstate_test,SPTICARphiBinomialMALA_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix W  = RcppDeepState_NumericMatrix();
  std::string W_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_W.qs";
  qs::c_qsave(W,W_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "W values: "<< W << std::endl;
  IntegerVector nsites(1);
  nsites[0]  = RcppDeepState_int();
  std::string nsites_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nsites.qs";
  qs::c_qsave(nsites,nsites_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsites values: "<< nsites << std::endl;
  IntegerVector ntimes(1);
  ntimes[0]  = RcppDeepState_int();
  std::string ntimes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ntimes.qs";
  qs::c_qsave(ntimes,ntimes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntimes values: "<< ntimes << std::endl;
  NumericVector phi  = RcppDeepState_NumericVector();
  std::string phi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_phi.qs";
  qs::c_qsave(phi,phi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phi values: "<< phi << std::endl;
  NumericVector nneighbours  = RcppDeepState_NumericVector();
  std::string nneighbours_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nneighbours.qs";
  qs::c_qsave(nneighbours,nneighbours_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nneighbours values: "<< nneighbours << std::endl;
  NumericVector tau(1);
  tau[0]  = RcppDeepState_double();
  std::string tau_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tau.qs";
  qs::c_qsave(tau,tau_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau values: "<< tau << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector XB  = RcppDeepState_NumericVector();
  std::string XB_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_XB.qs";
  qs::c_qsave(XB,XB_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "XB values: "<< XB << std::endl;
  NumericVector phiVarb_tune(1);
  phiVarb_tune[0]  = RcppDeepState_double();
  std::string phi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_phi.qs";
  std::string phiVarb_tune_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_phiVarb_tune.qs";
  qs::c_qsave(phiVarb_tune,phiVarb_tune_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phiVarb_tune values: "<< phiVarb_tune << std::endl;
  NumericVector trials  = RcppDeepState_NumericVector();
  std::string trials_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/SPTICARphiBinomialMALA/libFuzzer_SPTICARphiBinomialMALA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_trials.qs";
  qs::c_qsave(trials,trials_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "trials values: "<< trials << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    SPTICARphiBinomialMALA(W,nsites[0],ntimes[0],phi,nneighbours,tau[0],y,alpha[0],XB,phiVarb_tune[0],trials);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
