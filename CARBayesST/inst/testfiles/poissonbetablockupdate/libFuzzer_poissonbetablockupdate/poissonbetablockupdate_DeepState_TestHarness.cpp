// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// poissonbetablockupdate_DeepState_TestHarness_generation.cpp and poissonbetablockupdate_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector poissonbetablockupdate(const int nsites, NumericMatrix beta, NumericMatrix betaprop, NumericMatrix lp_beta, NumericMatrix lp_betaprop, NumericMatrix offset, NumericVector y, NumericVector prior_meanbeta, NumericVector prior_varbeta, const int Nchains, NumericVector temps, const int p);

TEST(CARBayesST_deepstate_test,poissonbetablockupdate_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector nsites(1);
  nsites[0]  = RcppDeepState_int();
  std::string nsites_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nsites.qs";
  qs::c_qsave(nsites,nsites_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsites values: "<< nsites << std::endl;
  NumericMatrix beta  = RcppDeepState_NumericMatrix();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericMatrix betaprop  = RcppDeepState_NumericMatrix();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_beta.qs";
  std::string betaprop_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_betaprop.qs";
  qs::c_qsave(betaprop,betaprop_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "betaprop values: "<< betaprop << std::endl;
  NumericMatrix lp_beta  = RcppDeepState_NumericMatrix();
  std::string lp_beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lp_beta.qs";
  qs::c_qsave(lp_beta,lp_beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lp_beta values: "<< lp_beta << std::endl;
  NumericMatrix lp_betaprop  = RcppDeepState_NumericMatrix();
  std::string lp_beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lp_beta.qs";
  std::string lp_betaprop_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lp_betaprop.qs";
  qs::c_qsave(lp_betaprop,lp_betaprop_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lp_betaprop values: "<< lp_betaprop << std::endl;
  NumericMatrix offset  = RcppDeepState_NumericMatrix();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_offset.qs";
  qs::c_qsave(offset,offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector prior_meanbeta  = RcppDeepState_NumericVector();
  std::string prior_meanbeta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_prior_meanbeta.qs";
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  qs::c_qsave(prior_meanbeta,prior_meanbeta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prior_meanbeta values: "<< prior_meanbeta << std::endl;
  NumericVector prior_varbeta  = RcppDeepState_NumericVector();
  std::string prior_varbeta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_prior_varbeta.qs";
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  qs::c_qsave(prior_varbeta,prior_varbeta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prior_varbeta values: "<< prior_varbeta << std::endl;
  IntegerVector Nchains(1);
  Nchains[0]  = RcppDeepState_int();
  std::string Nchains_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Nchains.qs";
  qs::c_qsave(Nchains,Nchains_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Nchains values: "<< Nchains << std::endl;
  NumericVector temps  = RcppDeepState_NumericVector();
  std::string temps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_temps.qs";
  qs::c_qsave(temps,temps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "temps values: "<< temps << std::endl;
  IntegerVector p(1);
  p[0]  = RcppDeepState_int();
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/libFuzzer_poissonbetablockupdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  qs::c_qsave(p,p_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    poissonbetablockupdate(nsites[0],beta,betaprop,lp_beta,lp_betaprop,offset,y,prior_meanbeta,prior_varbeta,Nchains[0],temps,p[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
