// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// poissonbetablockupdate_DeepState_TestHarness_generation.cpp and poissonbetablockupdate_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector poissonbetablockupdate(const int nsites, NumericMatrix beta, NumericMatrix betaprop, NumericMatrix lp_beta, NumericMatrix lp_betaprop, NumericMatrix offset, NumericVector y, NumericVector prior_meanbeta, NumericVector prior_varbeta, const int Nchains, NumericVector temps, const int p);

TEST(CARBayesST_deepstate_test,poissonbetablockupdate_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector nsites(1);
  nsites[0]  = RcppDeepState_int();
  qs::c_qsave(nsites,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/nsites.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsites values: "<< nsites << std::endl;
  NumericMatrix beta  = RcppDeepState_NumericMatrix();
  qs::c_qsave(beta,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericMatrix betaprop  = RcppDeepState_NumericMatrix();
  qs::c_qsave(betaprop,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/betaprop.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "betaprop values: "<< betaprop << std::endl;
  NumericMatrix lp_beta  = RcppDeepState_NumericMatrix();
  qs::c_qsave(lp_beta,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/lp_beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lp_beta values: "<< lp_beta << std::endl;
  NumericMatrix lp_betaprop  = RcppDeepState_NumericMatrix();
  qs::c_qsave(lp_betaprop,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/lp_betaprop.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lp_betaprop values: "<< lp_betaprop << std::endl;
  NumericMatrix offset  = RcppDeepState_NumericMatrix();
  qs::c_qsave(offset,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/offset.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  qs::c_qsave(y,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector prior_meanbeta  = RcppDeepState_NumericVector();
  qs::c_qsave(prior_meanbeta,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/prior_meanbeta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prior_meanbeta values: "<< prior_meanbeta << std::endl;
  NumericVector prior_varbeta  = RcppDeepState_NumericVector();
  qs::c_qsave(prior_varbeta,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/prior_varbeta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prior_varbeta values: "<< prior_varbeta << std::endl;
  IntegerVector Nchains(1);
  Nchains[0]  = RcppDeepState_int();
  qs::c_qsave(Nchains,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/Nchains.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Nchains values: "<< Nchains << std::endl;
  NumericVector temps  = RcppDeepState_NumericVector();
  qs::c_qsave(temps,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/temps.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "temps values: "<< temps << std::endl;
  IntegerVector p(1);
  p[0]  = RcppDeepState_int();
  qs::c_qsave(p,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonbetablockupdate/inputs/p.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    poissonbetablockupdate(nsites[0],beta,betaprop,lp_beta,lp_betaprop,offset,y,prior_meanbeta,prior_varbeta,Nchains[0],temps,p[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
