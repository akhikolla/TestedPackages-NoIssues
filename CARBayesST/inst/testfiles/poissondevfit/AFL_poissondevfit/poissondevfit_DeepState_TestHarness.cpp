// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// poissondevfit_DeepState_TestHarness_generation.cpp and poissondevfit_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List poissondevfit(NumericVector y, NumericMatrix fitted, const int nsites, const int Nchains);

TEST(CARBayesST_deepstate_test,poissondevfit_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissondevfit/AFL_poissondevfit/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericMatrix fitted  = RcppDeepState_NumericMatrix();
  std::string fitted_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissondevfit/AFL_poissondevfit/afl_inputs/" + std::to_string(t) + "_fitted.qs";
  qs::c_qsave(fitted,fitted_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fitted values: "<< fitted << std::endl;
  IntegerVector nsites(1);
  nsites[0]  = RcppDeepState_int();
  std::string nsites_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissondevfit/AFL_poissondevfit/afl_inputs/" + std::to_string(t) + "_nsites.qs";
  qs::c_qsave(nsites,nsites_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsites values: "<< nsites << std::endl;
  IntegerVector Nchains(1);
  Nchains[0]  = RcppDeepState_int();
  std::string Nchains_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissondevfit/AFL_poissondevfit/afl_inputs/" + std::to_string(t) + "_Nchains.qs";
  qs::c_qsave(Nchains,Nchains_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Nchains values: "<< Nchains << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    poissondevfit(y,fitted,nsites[0],Nchains[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
