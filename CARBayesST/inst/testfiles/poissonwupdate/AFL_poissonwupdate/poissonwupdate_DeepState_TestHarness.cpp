// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// poissonwupdate_DeepState_TestHarness_generation.cpp and poissonwupdate_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List poissonwupdate(const int nsites, const int ntimes, NumericMatrix w, NumericMatrix offset, NumericMatrix offset_proposal, NumericMatrix w_proposal, NumericMatrix y, NumericMatrix lambda, const int Nchains, NumericVector temps, NumericVector begin, NumericVector regbegin, const int Ntrends);

TEST(CARBayesST_deepstate_test,poissonwupdate_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector nsites(1);
  nsites[0]  = RcppDeepState_int();
  std::string nsites_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_nsites.qs";
  qs::c_qsave(nsites,nsites_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsites values: "<< nsites << std::endl;
  IntegerVector ntimes(1);
  ntimes[0]  = RcppDeepState_int();
  std::string ntimes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_ntimes.qs";
  qs::c_qsave(ntimes,ntimes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntimes values: "<< ntimes << std::endl;
  NumericMatrix w  = RcppDeepState_NumericMatrix();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_w.qs";
  qs::c_qsave(w,w_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  NumericMatrix offset  = RcppDeepState_NumericMatrix();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_offset.qs";
  qs::c_qsave(offset,offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  NumericMatrix offset_proposal  = RcppDeepState_NumericMatrix();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_offset.qs";
  std::string offset_proposal_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_offset_proposal.qs";
  qs::c_qsave(offset_proposal,offset_proposal_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset_proposal values: "<< offset_proposal << std::endl;
  NumericMatrix w_proposal  = RcppDeepState_NumericMatrix();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_w.qs";
  std::string w_proposal_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_w_proposal.qs";
  qs::c_qsave(w_proposal,w_proposal_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w_proposal values: "<< w_proposal << std::endl;
  NumericMatrix y  = RcppDeepState_NumericMatrix();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericMatrix lambda  = RcppDeepState_NumericMatrix();
  std::string lambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_lambda.qs";
  qs::c_qsave(lambda,lambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  IntegerVector Nchains(1);
  Nchains[0]  = RcppDeepState_int();
  std::string Nchains_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_Nchains.qs";
  qs::c_qsave(Nchains,Nchains_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Nchains values: "<< Nchains << std::endl;
  NumericVector temps  = RcppDeepState_NumericVector();
  std::string temps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_temps.qs";
  qs::c_qsave(temps,temps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "temps values: "<< temps << std::endl;
  NumericVector begin  = RcppDeepState_NumericVector();
  std::string begin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_begin.qs";
  qs::c_qsave(begin,begin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "begin values: "<< begin << std::endl;
  NumericVector regbegin  = RcppDeepState_NumericVector();
  std::string regbegin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_regbegin.qs";
  qs::c_qsave(regbegin,regbegin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "regbegin values: "<< regbegin << std::endl;
  IntegerVector Ntrends(1);
  Ntrends[0]  = RcppDeepState_int();
  std::string Ntrends_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/poissonwupdate/AFL_poissonwupdate/afl_inputs/" + std::to_string(t) + "_Ntrends.qs";
  qs::c_qsave(Ntrends,Ntrends_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ntrends values: "<< Ntrends << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    poissonwupdate(nsites[0],ntimes[0],w,offset,offset_proposal,w_proposal,y,lambda,Nchains[0],temps,begin,regbegin,Ntrends[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
