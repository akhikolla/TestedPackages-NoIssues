// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// qformSPACETIME_DeepState_TestHarness_generation.cpp and qformSPACETIME_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double qformSPACETIME(NumericMatrix Qtrip, NumericVector phi, const int ntime, const int nsite);

TEST(CARBayesST_deepstate_test,qformSPACETIME_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix Qtrip  = RcppDeepState_NumericMatrix();
  std::string Qtrip_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/qformSPACETIME/libFuzzer_qformSPACETIME/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Qtrip.qs";
  qs::c_qsave(Qtrip,Qtrip_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Qtrip values: "<< Qtrip << std::endl;
  NumericVector phi  = RcppDeepState_NumericVector();
  std::string phi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/qformSPACETIME/libFuzzer_qformSPACETIME/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_phi.qs";
  qs::c_qsave(phi,phi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phi values: "<< phi << std::endl;
  IntegerVector ntime(1);
  ntime[0]  = RcppDeepState_int();
  std::string ntime_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/qformSPACETIME/libFuzzer_qformSPACETIME/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ntime.qs";
  qs::c_qsave(ntime,ntime_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntime values: "<< ntime << std::endl;
  IntegerVector nsite(1);
  nsite[0]  = RcppDeepState_int();
  std::string nsite_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/qformSPACETIME/libFuzzer_qformSPACETIME/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nsite.qs";
  qs::c_qsave(nsite,nsite_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsite values: "<< nsite << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    qformSPACETIME(Qtrip,phi,ntime[0],nsite[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
