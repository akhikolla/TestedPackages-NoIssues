// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// Zupdatesqbin_DeepState_TestHarness_generation.cpp and Zupdatesqbin_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix Zupdatesqbin(NumericMatrix Z, NumericMatrix Offset, NumericMatrix Y, const double delta, NumericVector lambda, const int nsites, const int ntime, const int G, NumericVector SS, NumericVector prioroffset, const double Gstar, NumericMatrix failures);

TEST(CARBayesST_deepstate_test,Zupdatesqbin_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix Z  = RcppDeepState_NumericMatrix();
  qs::c_qsave(Z,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/Z.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Z values: "<< Z << std::endl;
  NumericMatrix Offset  = RcppDeepState_NumericMatrix();
  qs::c_qsave(Offset,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/Offset.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Offset values: "<< Offset << std::endl;
  NumericMatrix Y  = RcppDeepState_NumericMatrix();
  qs::c_qsave(Y,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/Y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  NumericVector delta(1);
  delta[0]  = RcppDeepState_double();
  qs::c_qsave(delta,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/delta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "delta values: "<< delta << std::endl;
  NumericVector lambda  = RcppDeepState_NumericVector();
  qs::c_qsave(lambda,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/lambda.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  IntegerVector nsites(1);
  nsites[0]  = RcppDeepState_int();
  qs::c_qsave(nsites,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/nsites.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsites values: "<< nsites << std::endl;
  IntegerVector ntime(1);
  ntime[0]  = RcppDeepState_int();
  qs::c_qsave(ntime,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/ntime.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntime values: "<< ntime << std::endl;
  IntegerVector G(1);
  G[0]  = RcppDeepState_int();
  qs::c_qsave(G,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/G.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "G values: "<< G << std::endl;
  NumericVector SS  = RcppDeepState_NumericVector();
  qs::c_qsave(SS,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/SS.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "SS values: "<< SS << std::endl;
  NumericVector prioroffset  = RcppDeepState_NumericVector();
  qs::c_qsave(prioroffset,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/prioroffset.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prioroffset values: "<< prioroffset << std::endl;
  NumericVector Gstar(1);
  Gstar[0]  = RcppDeepState_double();
  qs::c_qsave(Gstar,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/Gstar.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Gstar values: "<< Gstar << std::endl;
  NumericMatrix failures  = RcppDeepState_NumericMatrix();
  qs::c_qsave(failures,"/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/Zupdatesqbin/inputs/failures.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "failures values: "<< failures << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    Zupdatesqbin(Z,Offset,Y,delta[0],lambda,nsites[0],ntime[0],G[0],SS,prioroffset,Gstar[0],failures);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
