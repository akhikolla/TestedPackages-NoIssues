// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// binomialgammaupdate_DeepState_TestHarness_generation.cpp and binomialgammaupdate_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List binomialgammaupdate(const int nsites, NumericVector gamma, NumericVector proposal, NumericMatrix offset, NumericMatrix offset_proposal, NumericVector y, NumericVector failures, double prior_meangamma, double prior_vargamma, const int Nchains, NumericVector temps);

TEST(CARBayesST_deepstate_test,binomialgammaupdate_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector nsites(1);
  nsites[0]  = RcppDeepState_int();
  std::string nsites_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_nsites.qs";
  qs::c_qsave(nsites,nsites_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsites values: "<< nsites << std::endl;
  NumericVector gamma  = RcppDeepState_NumericVector();
  std::string gamma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_gamma.qs";
  qs::c_qsave(gamma,gamma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma values: "<< gamma << std::endl;
  NumericVector proposal  = RcppDeepState_NumericVector();
  std::string proposal_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_proposal.qs";
  qs::c_qsave(proposal,proposal_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "proposal values: "<< proposal << std::endl;
  NumericMatrix offset  = RcppDeepState_NumericMatrix();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_offset.qs";
  qs::c_qsave(offset,offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  NumericMatrix offset_proposal  = RcppDeepState_NumericMatrix();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_offset.qs";
  std::string offset_proposal_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_offset_proposal.qs";
  qs::c_qsave(offset_proposal,offset_proposal_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset_proposal values: "<< offset_proposal << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector failures  = RcppDeepState_NumericVector();
  std::string failures_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_failures.qs";
  qs::c_qsave(failures,failures_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "failures values: "<< failures << std::endl;
  NumericVector prior_meangamma(1);
  prior_meangamma[0]  = RcppDeepState_double();
  std::string prior_meangamma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_prior_meangamma.qs";
  qs::c_qsave(prior_meangamma,prior_meangamma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prior_meangamma values: "<< prior_meangamma << std::endl;
  NumericVector prior_vargamma(1);
  prior_vargamma[0]  = RcppDeepState_double();
  std::string prior_vargamma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_prior_vargamma.qs";
  qs::c_qsave(prior_vargamma,prior_vargamma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prior_vargamma values: "<< prior_vargamma << std::endl;
  IntegerVector Nchains(1);
  Nchains[0]  = RcppDeepState_int();
  std::string Nchains_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_Nchains.qs";
  qs::c_qsave(Nchains,Nchains_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Nchains values: "<< Nchains << std::endl;
  NumericVector temps  = RcppDeepState_NumericVector();
  std::string temps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CARBayesST/inst/testfiles/binomialgammaupdate/AFL_binomialgammaupdate/afl_inputs/" + std::to_string(t) + "_temps.qs";
  qs::c_qsave(temps,temps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "temps values: "<< temps << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    binomialgammaupdate(nsites[0],gamma,proposal,offset,offset_proposal,y,failures,prior_meangamma[0],prior_vargamma[0],Nchains[0],temps);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
