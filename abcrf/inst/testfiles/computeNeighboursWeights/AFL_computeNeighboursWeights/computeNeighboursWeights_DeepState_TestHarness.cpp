// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// computeNeighboursWeights_DeepState_TestHarness_generation.cpp and computeNeighboursWeights_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix computeNeighboursWeights(NumericMatrix predTrainingID, NumericMatrix predTestingID, int ntrain, int ntest, int ntree);

TEST(abcrf_deepstate_test,computeNeighboursWeights_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix predTrainingID  = RcppDeepState_NumericMatrix();
  std::string predTrainingID_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abcrf/inst/testfiles/computeNeighboursWeights/AFL_computeNeighboursWeights/afl_inputs/" + std::to_string(t) + "_predTrainingID.qs";
  qs::c_qsave(predTrainingID,predTrainingID_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "predTrainingID values: "<< predTrainingID << std::endl;
  NumericMatrix predTestingID  = RcppDeepState_NumericMatrix();
  std::string predTestingID_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abcrf/inst/testfiles/computeNeighboursWeights/AFL_computeNeighboursWeights/afl_inputs/" + std::to_string(t) + "_predTestingID.qs";
  qs::c_qsave(predTestingID,predTestingID_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "predTestingID values: "<< predTestingID << std::endl;
  IntegerVector ntrain(1);
  ntrain[0]  = RcppDeepState_int();
  std::string ntrain_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abcrf/inst/testfiles/computeNeighboursWeights/AFL_computeNeighboursWeights/afl_inputs/" + std::to_string(t) + "_ntrain.qs";
  qs::c_qsave(ntrain,ntrain_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntrain values: "<< ntrain << std::endl;
  IntegerVector ntest(1);
  ntest[0]  = RcppDeepState_int();
  std::string ntest_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abcrf/inst/testfiles/computeNeighboursWeights/AFL_computeNeighboursWeights/afl_inputs/" + std::to_string(t) + "_ntest.qs";
  qs::c_qsave(ntest,ntest_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntest values: "<< ntest << std::endl;
  IntegerVector ntree(1);
  ntree[0]  = RcppDeepState_int();
  std::string ntree_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abcrf/inst/testfiles/computeNeighboursWeights/AFL_computeNeighboursWeights/afl_inputs/" + std::to_string(t) + "_ntree.qs";
  qs::c_qsave(ntree,ntree_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntree values: "<< ntree << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    computeNeighboursWeights(predTrainingID,predTestingID,ntrain[0],ntest[0],ntree[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
