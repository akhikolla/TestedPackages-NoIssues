// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// awlrstat_DeepState_TestHarness_generation.cpp and awlrstat_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector awlrstat(int repnum, int n, NumericMatrix quan1, NumericMatrix quan2, NumericVector sd1, NumericVector sd2);

TEST(YPInterimTesting_deepstate_test,awlrstat_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector repnum(1);
  repnum[0]  = RcppDeepState_int();
  qs::c_qsave(repnum,"/home/akhila/fuzzer_packages/fuzzedpackages/YPInterimTesting/inst/testfiles/awlrstat/inputs/repnum.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "repnum values: "<< repnum << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  qs::c_qsave(n,"/home/akhila/fuzzer_packages/fuzzedpackages/YPInterimTesting/inst/testfiles/awlrstat/inputs/n.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericMatrix quan1  = RcppDeepState_NumericMatrix();
  qs::c_qsave(quan1,"/home/akhila/fuzzer_packages/fuzzedpackages/YPInterimTesting/inst/testfiles/awlrstat/inputs/quan1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "quan1 values: "<< quan1 << std::endl;
  NumericMatrix quan2  = RcppDeepState_NumericMatrix();
  qs::c_qsave(quan2,"/home/akhila/fuzzer_packages/fuzzedpackages/YPInterimTesting/inst/testfiles/awlrstat/inputs/quan2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "quan2 values: "<< quan2 << std::endl;
  NumericVector sd1  = RcppDeepState_NumericVector();
  qs::c_qsave(sd1,"/home/akhila/fuzzer_packages/fuzzedpackages/YPInterimTesting/inst/testfiles/awlrstat/inputs/sd1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sd1 values: "<< sd1 << std::endl;
  NumericVector sd2  = RcppDeepState_NumericVector();
  qs::c_qsave(sd2,"/home/akhila/fuzzer_packages/fuzzedpackages/YPInterimTesting/inst/testfiles/awlrstat/inputs/sd2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sd2 values: "<< sd2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    awlrstat(repnum[0],n[0],quan1,quan2,sd1,sd2);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
