// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// hasOMP
bool hasOMP();
RcppExport SEXP _CautiousLearning_hasOMP() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(hasOMP());
    return rcpp_result_gen;
END_RCPP
}
// setOMPThreads
void setOMPThreads(uint32_t nthreads);
RcppExport SEXP _CautiousLearning_setOMPThreads(SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint32_t >::type nthreads(nthreadsSEXP);
    setOMPThreads(nthreads);
    return R_NilValue;
END_RCPP
}
// setSITMOSeeds
void setSITMOSeeds(double seed);
RcppExport SEXP _CautiousLearning_setSITMOSeeds(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type seed(seedSEXP);
    setSITMOSeeds(seed);
    return R_NilValue;
END_RCPP
}
// mkChart
List mkChart(List chart, int m, double A, double B, double arl0, double Linf, double alpha, double beta, int H, int Ninit, int Nfinal);
RcppExport SEXP _CautiousLearning_mkChart(SEXP chartSEXP, SEXP mSEXP, SEXP ASEXP, SEXP BSEXP, SEXP arl0SEXP, SEXP LinfSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP HSEXP, SEXP NinitSEXP, SEXP NfinalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type chart(chartSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type arl0(arl0SEXP);
    Rcpp::traits::input_parameter< double >::type Linf(LinfSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type Ninit(NinitSEXP);
    Rcpp::traits::input_parameter< int >::type Nfinal(NfinalSEXP);
    rcpp_result_gen = Rcpp::wrap(mkChart(chart, m, A, B, arl0, Linf, alpha, beta, H, Ninit, Nfinal));
    return rcpp_result_gen;
END_RCPP
}
// ruv
NumericMatrix ruv(int n, int m);
RcppExport SEXP _CautiousLearning_ruv(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ruv(n, m));
    return rcpp_result_gen;
END_RCPP
}
// rcrl
IntegerVector rcrl(int n, List chart, double u, double v, int tau, double delta, double omega, int maxrl);
RcppExport SEXP _CautiousLearning_rcrl(SEXP nSEXP, SEXP chartSEXP, SEXP uSEXP, SEXP vSEXP, SEXP tauSEXP, SEXP deltaSEXP, SEXP omegaSEXP, SEXP maxrlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< List >::type chart(chartSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type maxrl(maxrlSEXP);
    rcpp_result_gen = Rcpp::wrap(rcrl(n, chart, u, v, tau, delta, omega, maxrl));
    return rcpp_result_gen;
END_RCPP
}
// applyChart
NumericMatrix applyChart(List chart, NumericVector x, double mu0, double s0);
RcppExport SEXP _CautiousLearning_applyChart(SEXP chartSEXP, SEXP xSEXP, SEXP mu0SEXP, SEXP s0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type chart(chartSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type s0(s0SEXP);
    rcpp_result_gen = Rcpp::wrap(applyChart(chart, x, mu0, s0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CautiousLearning_hasOMP", (DL_FUNC) &_CautiousLearning_hasOMP, 0},
    {"_CautiousLearning_setOMPThreads", (DL_FUNC) &_CautiousLearning_setOMPThreads, 1},
    {"_CautiousLearning_setSITMOSeeds", (DL_FUNC) &_CautiousLearning_setSITMOSeeds, 1},
    {"_CautiousLearning_mkChart", (DL_FUNC) &_CautiousLearning_mkChart, 11},
    {"_CautiousLearning_ruv", (DL_FUNC) &_CautiousLearning_ruv, 2},
    {"_CautiousLearning_rcrl", (DL_FUNC) &_CautiousLearning_rcrl, 8},
    {"_CautiousLearning_applyChart", (DL_FUNC) &_CautiousLearning_applyChart, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CautiousLearning(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
