// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// node_height_cpp_DeepState_TestHarness_generation.cpp and node_height_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector node_height_cpp(IntegerVector edge1, IntegerVector edge2, NumericVector edge_length);

TEST(phangorn_deepstate_test,node_height_cpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector edge1  = RcppDeepState_IntegerVector();
  std::string edge1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/phangorn/inst/testfiles/node_height_cpp/libFuzzer_node_height_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_edge1.qs";
  qs::c_qsave(edge1,edge1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "edge1 values: "<< edge1 << std::endl;
  IntegerVector edge2  = RcppDeepState_IntegerVector();
  std::string edge2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/phangorn/inst/testfiles/node_height_cpp/libFuzzer_node_height_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_edge2.qs";
  qs::c_qsave(edge2,edge2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "edge2 values: "<< edge2 << std::endl;
  NumericVector edge_length  = RcppDeepState_NumericVector();
  std::string edge_length_t = "/home/akhila/fuzzer_packages/fuzzedpackages/phangorn/inst/testfiles/node_height_cpp/libFuzzer_node_height_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_edge_length.qs";
  qs::c_qsave(edge_length,edge_length_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "edge_length values: "<< edge_length << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    node_height_cpp(edge1,edge2,edge_length);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
