// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calculate_posterior_DeepState_TestHarness_generation.cpp and calculate_posterior_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List calculate_posterior(NumericVector scores, NumericVector tau, NumericVector qp, double mu, double sd);

TEST(dscore_deepstate_test,calculate_posterior_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector scores  = RcppDeepState_NumericVector();
  std::string scores_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dscore/inst/testfiles/calculate_posterior/libFuzzer_calculate_posterior/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_scores.qs";
  qs::c_qsave(scores,scores_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "scores values: "<< scores << std::endl;
  NumericVector tau  = RcppDeepState_NumericVector();
  std::string tau_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dscore/inst/testfiles/calculate_posterior/libFuzzer_calculate_posterior/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tau.qs";
  qs::c_qsave(tau,tau_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau values: "<< tau << std::endl;
  NumericVector qp  = RcppDeepState_NumericVector();
  std::string qp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dscore/inst/testfiles/calculate_posterior/libFuzzer_calculate_posterior/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_qp.qs";
  qs::c_qsave(qp,qp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "qp values: "<< qp << std::endl;
  NumericVector mu(1);
  mu[0]  = RcppDeepState_double();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dscore/inst/testfiles/calculate_posterior/libFuzzer_calculate_posterior/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector sd(1);
  sd[0]  = RcppDeepState_double();
  std::string sd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dscore/inst/testfiles/calculate_posterior/libFuzzer_calculate_posterior/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sd.qs";
  qs::c_qsave(sd,sd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sd values: "<< sd << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calculate_posterior(scores,tau,qp,mu[0],sd[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
