// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// posterior_DeepState_TestHarness_generation.cpp and posterior_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector posterior(int score, double tau, NumericVector prior, NumericVector qp);

TEST(dscore_deepstate_test,posterior_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector score(1);
  score[0]  = RcppDeepState_int();
  std::string score_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dscore/inst/testfiles/posterior/libFuzzer_posterior/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_score.qs";
  qs::c_qsave(score,score_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "score values: "<< score << std::endl;
  NumericVector tau(1);
  tau[0]  = RcppDeepState_double();
  std::string tau_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dscore/inst/testfiles/posterior/libFuzzer_posterior/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tau.qs";
  qs::c_qsave(tau,tau_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau values: "<< tau << std::endl;
  NumericVector prior  = RcppDeepState_NumericVector();
  std::string prior_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dscore/inst/testfiles/posterior/libFuzzer_posterior/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_prior.qs";
  qs::c_qsave(prior,prior_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prior values: "<< prior << std::endl;
  NumericVector qp  = RcppDeepState_NumericVector();
  std::string qp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dscore/inst/testfiles/posterior/libFuzzer_posterior/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_qp.qs";
  qs::c_qsave(qp,qp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "qp values: "<< qp << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    posterior(score[0],tau[0],prior,qp);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
