// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dimJump_Rcpp_DeepState_TestHarness_generation.cpp and dimJump_Rcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

bool dimJump_Rcpp(Rcpp::IntegerVector vectDim, int pas, Rcpp::IntegerVector BeginEnd1, Rcpp::IntegerVector BeginEnd2);

TEST(ClustMMDD_deepstate_test,dimJump_Rcpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector vectDim  = RcppDeepState_IntegerVector();
  std::string vectDim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClustMMDD/inst/testfiles/dimJump_Rcpp/AFL_dimJump_Rcpp/afl_inputs/" + std::to_string(t) + "_vectDim.qs";
  qs::c_qsave(vectDim,vectDim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vectDim values: "<< vectDim << std::endl;
  IntegerVector pas(1);
  pas[0]  = RcppDeepState_int();
  std::string pas_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClustMMDD/inst/testfiles/dimJump_Rcpp/AFL_dimJump_Rcpp/afl_inputs/" + std::to_string(t) + "_pas.qs";
  qs::c_qsave(pas,pas_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pas values: "<< pas << std::endl;
  IntegerVector BeginEnd1  = RcppDeepState_IntegerVector();
  std::string BeginEnd1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClustMMDD/inst/testfiles/dimJump_Rcpp/AFL_dimJump_Rcpp/afl_inputs/" + std::to_string(t) + "_BeginEnd1.qs";
  qs::c_qsave(BeginEnd1,BeginEnd1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "BeginEnd1 values: "<< BeginEnd1 << std::endl;
  IntegerVector BeginEnd2  = RcppDeepState_IntegerVector();
  std::string BeginEnd2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClustMMDD/inst/testfiles/dimJump_Rcpp/AFL_dimJump_Rcpp/afl_inputs/" + std::to_string(t) + "_BeginEnd2.qs";
  qs::c_qsave(BeginEnd2,BeginEnd2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "BeginEnd2 values: "<< BeginEnd2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dimJump_Rcpp(vectDim,pas[0],BeginEnd1,BeginEnd2);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
