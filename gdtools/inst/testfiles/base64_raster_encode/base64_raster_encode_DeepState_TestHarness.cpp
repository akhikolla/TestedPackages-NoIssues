// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// base64_raster_encode_DeepState_TestHarness_generation.cpp and base64_raster_encode_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

std::string base64_raster_encode(CharacterVector raster_, int w, int h, double width, double height, int interpolate);

TEST(gdtools_deepstate_test,base64_raster_encode_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  CharacterVector raster_  = RcppDeepState_CharacterVector();
  qs::c_qsave(raster_,"/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/inputs/raster_.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "raster_ values: "<< raster_ << std::endl;
  IntegerVector w(1);
  w[0]  = RcppDeepState_int();
  qs::c_qsave(w,"/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/inputs/w.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  IntegerVector h(1);
  h[0]  = RcppDeepState_int();
  qs::c_qsave(h,"/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/inputs/h.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h values: "<< h << std::endl;
  NumericVector width(1);
  width[0]  = RcppDeepState_double();
  qs::c_qsave(width,"/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/inputs/width.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "width values: "<< width << std::endl;
  NumericVector height(1);
  height[0]  = RcppDeepState_double();
  qs::c_qsave(height,"/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/inputs/height.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "height values: "<< height << std::endl;
  IntegerVector interpolate(1);
  interpolate[0]  = RcppDeepState_int();
  qs::c_qsave(interpolate,"/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/inputs/interpolate.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "interpolate values: "<< interpolate << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    base64_raster_encode(raster_,w[0],h[0],width[0],height[0],interpolate[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
