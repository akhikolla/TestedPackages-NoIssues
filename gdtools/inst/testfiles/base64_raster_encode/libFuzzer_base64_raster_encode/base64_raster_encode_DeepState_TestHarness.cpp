// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// base64_raster_encode_DeepState_TestHarness_generation.cpp and base64_raster_encode_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

std::string base64_raster_encode(CharacterVector raster_, int w, int h, double width, double height, int interpolate);

TEST(gdtools_deepstate_test,base64_raster_encode_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  CharacterVector raster_  = RcppDeepState_CharacterVector();
  std::string raster__t = "/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/libFuzzer_base64_raster_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_raster_.qs";
  qs::c_qsave(raster_,raster__t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "raster_ values: "<< raster_ << std::endl;
  IntegerVector w(1);
  w[0]  = RcppDeepState_int();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/libFuzzer_base64_raster_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_w.qs";
  qs::c_qsave(w,w_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  IntegerVector h(1);
  h[0]  = RcppDeepState_int();
  std::string h_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/libFuzzer_base64_raster_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_h.qs";
  qs::c_qsave(h,h_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h values: "<< h << std::endl;
  NumericVector width(1);
  width[0]  = RcppDeepState_double();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/libFuzzer_base64_raster_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_w.qs";
  std::string width_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/libFuzzer_base64_raster_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_width.qs";
  qs::c_qsave(width,width_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "width values: "<< width << std::endl;
  NumericVector height(1);
  height[0]  = RcppDeepState_double();
  std::string h_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/libFuzzer_base64_raster_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_h.qs";
  std::string height_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/libFuzzer_base64_raster_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_height.qs";
  qs::c_qsave(height,height_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "height values: "<< height << std::endl;
  IntegerVector interpolate(1);
  interpolate[0]  = RcppDeepState_int();
  std::string interpolate_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gdtools/inst/testfiles/base64_raster_encode/libFuzzer_base64_raster_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_interpolate.qs";
  qs::c_qsave(interpolate,interpolate_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "interpolate values: "<< interpolate << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    base64_raster_encode(raster_,w[0],h[0],width[0],height[0],interpolate[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
