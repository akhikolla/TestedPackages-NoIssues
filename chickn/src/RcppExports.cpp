// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// W1_cl_centr
NumericVector W1_cl_centr(Environment X_cumsum, const IntegerVector& rowInd, const IntegerVector& colInd, NumericVector C_cumsum);
RcppExport SEXP _chickn_W1_cl_centr(SEXP X_cumsumSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP C_cumsumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type X_cumsum(X_cumsumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type C_cumsum(C_cumsumSEXP);
    rcpp_result_gen = Rcpp::wrap(W1_cl_centr(X_cumsum, rowInd, colInd, C_cumsum));
    return rcpp_result_gen;
END_RCPP
}
// IntraDist
double IntraDist(Environment X_cumsum, const IntegerVector& rowInd, const IntegerVector& colInd, NumericVector C_cumsum);
RcppExport SEXP _chickn_IntraDist(SEXP X_cumsumSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP C_cumsumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type X_cumsum(X_cumsumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type C_cumsum(C_cumsumSEXP);
    rcpp_result_gen = Rcpp::wrap(IntraDist(X_cumsum, rowInd, colInd, C_cumsum));
    return rcpp_result_gen;
END_RCPP
}
// cumsum_sug
NumericVector cumsum_sug(NumericVector x);
RcppExport SEXP _chickn_cumsum_sug(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum_sug(x));
    return rcpp_result_gen;
END_RCPP
}
// cumsum_Mat
NumericMatrix cumsum_Mat(NumericMatrix C);
RcppExport SEXP _chickn_cumsum_Mat(SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum_Mat(C));
    return rcpp_result_gen;
END_RCPP
}
// InterDist
NumericMatrix InterDist(NumericMatrix C_cumsum);
RcppExport SEXP _chickn_InterDist(SEXP C_cumsumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type C_cumsum(C_cumsumSEXP);
    rcpp_result_gen = Rcpp::wrap(InterDist(C_cumsum));
    return rcpp_result_gen;
END_RCPP
}
// W1_centr_centr
void W1_centr_centr(NumericMatrix C_cumsum, Environment Dist);
RcppExport SEXP _chickn_W1_centr_centr(SEXP C_cumsumSEXP, SEXP DistSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type C_cumsum(C_cumsumSEXP);
    Rcpp::traits::input_parameter< Environment >::type Dist(DistSEXP);
    W1_centr_centr(C_cumsum, Dist);
    return R_NilValue;
END_RCPP
}
// W1_cl_centr_BIG
NumericVector W1_cl_centr_BIG(Environment X_cumsum, const IntegerVector& rowInd, const IntegerVector& colInd, Environment C_cumsum, size_t nbr_cluster);
RcppExport SEXP _chickn_W1_cl_centr_BIG(SEXP X_cumsumSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP C_cumsumSEXP, SEXP nbr_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type X_cumsum(X_cumsumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< Environment >::type C_cumsum(C_cumsumSEXP);
    Rcpp::traits::input_parameter< size_t >::type nbr_cluster(nbr_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(W1_cl_centr_BIG(X_cumsum, rowInd, colInd, C_cumsum, nbr_cluster));
    return rcpp_result_gen;
END_RCPP
}
// W1_centr_centr_BIG
void W1_centr_centr_BIG(Environment C_cumsum, Environment Dist);
RcppExport SEXP _chickn_W1_centr_centr_BIG(SEXP C_cumsumSEXP, SEXP DistSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type C_cumsum(C_cumsumSEXP);
    Rcpp::traits::input_parameter< Environment >::type Dist(DistSEXP);
    W1_centr_centr_BIG(C_cumsum, Dist);
    return R_NilValue;
END_RCPP
}
// DBindex
List DBindex(Environment X_cumsum, const IntegerVector& rowInd, List Clusters, NumericMatrix C, const IntegerVector& cluster_size, Environment DistInter);
RcppExport SEXP _chickn_DBindex(SEXP X_cumsumSEXP, SEXP rowIndSEXP, SEXP ClustersSEXP, SEXP CSEXP, SEXP cluster_sizeSEXP, SEXP DistInterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type X_cumsum(X_cumsumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< List >::type Clusters(ClustersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C(CSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cluster_size(cluster_sizeSEXP);
    Rcpp::traits::input_parameter< Environment >::type DistInter(DistInterSEXP);
    rcpp_result_gen = Rcpp::wrap(DBindex(X_cumsum, rowInd, Clusters, C, cluster_size, DistInter));
    return rcpp_result_gen;
END_RCPP
}
// DBindex_BIG
void DBindex_BIG(Environment X_cumsum, const IntegerVector& rowInd, List Clusters, Environment C, Environment C_cumsum, const IntegerVector& cluster_size, Environment DistInter, Environment R);
RcppExport SEXP _chickn_DBindex_BIG(SEXP X_cumsumSEXP, SEXP rowIndSEXP, SEXP ClustersSEXP, SEXP CSEXP, SEXP C_cumsumSEXP, SEXP cluster_sizeSEXP, SEXP DistInterSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type X_cumsum(X_cumsumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< List >::type Clusters(ClustersSEXP);
    Rcpp::traits::input_parameter< Environment >::type C(CSEXP);
    Rcpp::traits::input_parameter< Environment >::type C_cumsum(C_cumsumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cluster_size(cluster_sizeSEXP);
    Rcpp::traits::input_parameter< Environment >::type DistInter(DistInterSEXP);
    Rcpp::traits::input_parameter< Environment >::type R(RSEXP);
    DBindex_BIG(X_cumsum, rowInd, Clusters, C, C_cumsum, cluster_size, DistInter, R);
    return R_NilValue;
END_RCPP
}
// G_fun_cpp
arma::rowvec G_fun_cpp(arma::vec x, arma::vec y, arma::mat W);
RcppExport SEXP _chickn_G_fun_cpp(SEXP xSEXP, SEXP ySEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(G_fun_cpp(x, y, W));
    return rcpp_result_gen;
END_RCPP
}
// ObjFun_OMP_cpp
double ObjFun_OMP_cpp(arma::vec c, arma::mat W, arma::vec residue);
RcppExport SEXP _chickn_ObjFun_OMP_cpp(SEXP cSEXP, SEXP WSEXP, SEXP residueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type residue(residueSEXP);
    rcpp_result_gen = Rcpp::wrap(ObjFun_OMP_cpp(c, W, residue));
    return rcpp_result_gen;
END_RCPP
}
// Gradient_OMP_cpp
arma::rowvec Gradient_OMP_cpp(arma::vec c, arma::mat W, arma::vec residue);
RcppExport SEXP _chickn_Gradient_OMP_cpp(SEXP cSEXP, SEXP WSEXP, SEXP residueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type residue(residueSEXP);
    rcpp_result_gen = Rcpp::wrap(Gradient_OMP_cpp(c, W, residue));
    return rcpp_result_gen;
END_RCPP
}
// Gradient_cpp
List Gradient_cpp(arma::rowvec x, arma::vec SK, arma::mat W, int K);
RcppExport SEXP _chickn_Gradient_cpp(SEXP xSEXP, SEXP SKSEXP, SEXP WSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SK(SKSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Gradient_cpp(x, SK, W, K));
    return rcpp_result_gen;
END_RCPP
}
// RandIndex
List RandIndex(NumericMatrix Data);
RcppExport SEXP _chickn_RandIndex(SEXP DataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Data(DataSEXP);
    rcpp_result_gen = Rcpp::wrap(RandIndex(Data));
    return rcpp_result_gen;
END_RCPP
}
// gamma_estimation
double gamma_estimation(Environment X, int size, const char* kernel_type);
RcppExport SEXP _chickn_gamma_estimation(SEXP XSEXP, SEXP sizeSEXP, SEXP kernel_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const char* >::type kernel_type(kernel_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_estimation(X, size, kernel_type));
    return rcpp_result_gen;
END_RCPP
}
// cumsum_parallel
void cumsum_parallel(Environment X, Environment A_cumsum);
RcppExport SEXP _chickn_cumsum_parallel(SEXP XSEXP, SEXP A_cumsumSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type X(XSEXP);
    Rcpp::traits::input_parameter< Environment >::type A_cumsum(A_cumsumSEXP);
    cumsum_parallel(X, A_cumsum);
    return R_NilValue;
END_RCPP
}
// W1_parallel
void W1_parallel(Environment X, Environment C, IntegerVector set_c);
RcppExport SEXP _chickn_W1_parallel(SEXP XSEXP, SEXP CSEXP, SEXP set_cSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type X(XSEXP);
    Rcpp::traits::input_parameter< Environment >::type C(CSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type set_c(set_cSEXP);
    W1_parallel(X, C, set_c);
    return R_NilValue;
END_RCPP
}
// E_parallel
void E_parallel(Environment X, Environment C, IntegerVector set_c);
RcppExport SEXP _chickn_E_parallel(SEXP XSEXP, SEXP CSEXP, SEXP set_cSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type X(XSEXP);
    Rcpp::traits::input_parameter< Environment >::type C(CSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type set_c(set_cSEXP);
    E_parallel(X, C, set_c);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_chickn_W1_cl_centr", (DL_FUNC) &_chickn_W1_cl_centr, 4},
    {"_chickn_IntraDist", (DL_FUNC) &_chickn_IntraDist, 4},
    {"_chickn_cumsum_sug", (DL_FUNC) &_chickn_cumsum_sug, 1},
    {"_chickn_cumsum_Mat", (DL_FUNC) &_chickn_cumsum_Mat, 1},
    {"_chickn_InterDist", (DL_FUNC) &_chickn_InterDist, 1},
    {"_chickn_W1_centr_centr", (DL_FUNC) &_chickn_W1_centr_centr, 2},
    {"_chickn_W1_cl_centr_BIG", (DL_FUNC) &_chickn_W1_cl_centr_BIG, 5},
    {"_chickn_W1_centr_centr_BIG", (DL_FUNC) &_chickn_W1_centr_centr_BIG, 2},
    {"_chickn_DBindex", (DL_FUNC) &_chickn_DBindex, 6},
    {"_chickn_DBindex_BIG", (DL_FUNC) &_chickn_DBindex_BIG, 8},
    {"_chickn_G_fun_cpp", (DL_FUNC) &_chickn_G_fun_cpp, 3},
    {"_chickn_ObjFun_OMP_cpp", (DL_FUNC) &_chickn_ObjFun_OMP_cpp, 3},
    {"_chickn_Gradient_OMP_cpp", (DL_FUNC) &_chickn_Gradient_OMP_cpp, 3},
    {"_chickn_Gradient_cpp", (DL_FUNC) &_chickn_Gradient_cpp, 4},
    {"_chickn_RandIndex", (DL_FUNC) &_chickn_RandIndex, 1},
    {"_chickn_gamma_estimation", (DL_FUNC) &_chickn_gamma_estimation, 3},
    {"_chickn_cumsum_parallel", (DL_FUNC) &_chickn_cumsum_parallel, 2},
    {"_chickn_W1_parallel", (DL_FUNC) &_chickn_W1_parallel, 3},
    {"_chickn_E_parallel", (DL_FUNC) &_chickn_E_parallel, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_chickn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
