// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cpp_pmultinorm_DeepState_TestHarness_generation.cpp and cpp_pmultinorm_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double cpp_pmultinorm(int r, NumericVector lower, NumericVector upper, NumericVector information, double theta);

TEST(gscounts_deepstate_test,cpp_pmultinorm_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector r(1);
  r[0]  = RcppDeepState_int();
  std::string r_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gscounts/inst/testfiles/cpp_pmultinorm/libFuzzer_cpp_pmultinorm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_r.qs";
  qs::c_qsave(r,r_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "r values: "<< r << std::endl;
  NumericVector lower  = RcppDeepState_NumericVector();
  std::string lower_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gscounts/inst/testfiles/cpp_pmultinorm/libFuzzer_cpp_pmultinorm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lower.qs";
  qs::c_qsave(lower,lower_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lower values: "<< lower << std::endl;
  NumericVector upper  = RcppDeepState_NumericVector();
  std::string upper_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gscounts/inst/testfiles/cpp_pmultinorm/libFuzzer_cpp_pmultinorm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_upper.qs";
  qs::c_qsave(upper,upper_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "upper values: "<< upper << std::endl;
  NumericVector information  = RcppDeepState_NumericVector();
  std::string information_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gscounts/inst/testfiles/cpp_pmultinorm/libFuzzer_cpp_pmultinorm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_information.qs";
  qs::c_qsave(information,information_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "information values: "<< information << std::endl;
  NumericVector theta(1);
  theta[0]  = RcppDeepState_double();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/gscounts/inst/testfiles/cpp_pmultinorm/libFuzzer_cpp_pmultinorm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cpp_pmultinorm(r[0],lower,upper,information,theta[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
