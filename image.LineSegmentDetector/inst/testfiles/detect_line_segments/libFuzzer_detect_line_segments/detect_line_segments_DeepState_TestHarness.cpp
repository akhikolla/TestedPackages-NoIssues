// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// detect_line_segments_DeepState_TestHarness_generation.cpp and detect_line_segments_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List detect_line_segments(NumericVector image, int X, int Y, double scale, double sigma_scale, double quant, double ang_th, double log_eps, double density_th, int n_bins, int need_to_union, double union_ang_th, int union_use_NFA, double union_log_eps, double length_threshold, double dist_threshold);

TEST(image.LineSegmentDetector_deepstate_test,detect_line_segments_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector image  = RcppDeepState_NumericVector();
  std::string image_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_image.qs";
  qs::c_qsave(image,image_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "image values: "<< image << std::endl;
  IntegerVector X(1);
  X[0]  = RcppDeepState_int();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  IntegerVector Y(1);
  Y[0]  = RcppDeepState_int();
  std::string Y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Y.qs";
  qs::c_qsave(Y,Y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  NumericVector scale(1);
  scale[0]  = RcppDeepState_double();
  std::string scale_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_scale.qs";
  qs::c_qsave(scale,scale_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "scale values: "<< scale << std::endl;
  NumericVector sigma_scale(1);
  sigma_scale[0]  = RcppDeepState_double();
  std::string sigma_scale_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sigma_scale.qs";
  qs::c_qsave(sigma_scale,sigma_scale_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma_scale values: "<< sigma_scale << std::endl;
  NumericVector quant(1);
  quant[0]  = RcppDeepState_double();
  std::string quant_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_quant.qs";
  qs::c_qsave(quant,quant_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "quant values: "<< quant << std::endl;
  NumericVector ang_th(1);
  ang_th[0]  = RcppDeepState_double();
  std::string ang_th_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ang_th.qs";
  qs::c_qsave(ang_th,ang_th_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ang_th values: "<< ang_th << std::endl;
  NumericVector log_eps(1);
  log_eps[0]  = RcppDeepState_double();
  std::string log_eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_log_eps.qs";
  qs::c_qsave(log_eps,log_eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "log_eps values: "<< log_eps << std::endl;
  NumericVector density_th(1);
  density_th[0]  = RcppDeepState_double();
  std::string density_th_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_density_th.qs";
  qs::c_qsave(density_th,density_th_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "density_th values: "<< density_th << std::endl;
  IntegerVector n_bins(1);
  n_bins[0]  = RcppDeepState_int();
  std::string n_bins_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n_bins.qs";
  qs::c_qsave(n_bins,n_bins_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n_bins values: "<< n_bins << std::endl;
  IntegerVector need_to_union(1);
  need_to_union[0]  = RcppDeepState_int();
  std::string need_to_union_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_need_to_union.qs";
  qs::c_qsave(need_to_union,need_to_union_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "need_to_union values: "<< need_to_union << std::endl;
  NumericVector union_ang_th(1);
  union_ang_th[0]  = RcppDeepState_double();
  std::string union_ang_th_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_union_ang_th.qs";
  qs::c_qsave(union_ang_th,union_ang_th_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "union_ang_th values: "<< union_ang_th << std::endl;
  IntegerVector union_use_NFA(1);
  union_use_NFA[0]  = RcppDeepState_int();
  std::string union_use_NFA_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_union_use_NFA.qs";
  qs::c_qsave(union_use_NFA,union_use_NFA_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "union_use_NFA values: "<< union_use_NFA << std::endl;
  NumericVector union_log_eps(1);
  union_log_eps[0]  = RcppDeepState_double();
  std::string union_log_eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_union_log_eps.qs";
  qs::c_qsave(union_log_eps,union_log_eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "union_log_eps values: "<< union_log_eps << std::endl;
  NumericVector length_threshold(1);
  length_threshold[0]  = RcppDeepState_double();
  std::string length_threshold_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_length_threshold.qs";
  qs::c_qsave(length_threshold,length_threshold_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "length_threshold values: "<< length_threshold << std::endl;
  NumericVector dist_threshold(1);
  dist_threshold[0]  = RcppDeepState_double();
  std::string dist_threshold_t = "/home/akhila/fuzzer_packages/fuzzedpackages/image.LineSegmentDetector/inst/testfiles/detect_line_segments/libFuzzer_detect_line_segments/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dist_threshold.qs";
  qs::c_qsave(dist_threshold,dist_threshold_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dist_threshold values: "<< dist_threshold << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    detect_line_segments(image,X[0],Y[0],scale[0],sigma_scale[0],quant[0],ang_th[0],log_eps[0],density_th[0],n_bins[0],need_to_union[0],union_ang_th[0],union_use_NFA[0],union_log_eps[0],length_threshold[0],dist_threshold[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
