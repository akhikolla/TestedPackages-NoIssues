// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// alphpow
arma::mat alphpow(double x, arma::mat mat);
RcppExport SEXP _repolr_alphpow(SEXP xSEXP, SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(alphpow(x, mat));
    return rcpp_result_gen;
END_RCPP
}
// cmat
List cmat(Rcpp::NumericVector ctimes, double alpha, Rcpp::String corrmod, Rcpp::String diffmeth, double h);
RcppExport SEXP _repolr_cmat(SEXP ctimesSEXP, SEXP alphaSEXP, SEXP corrmodSEXP, SEXP diffmethSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ctimes(ctimesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type corrmod(corrmodSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type diffmeth(diffmethSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(cmat(ctimes, alpha, corrmod, diffmeth, h));
    return rcpp_result_gen;
END_RCPP
}
// hgmat
Rcpp::List hgmat(List mod, List smat, List cmat, Rcpp::List X, Rcpp::String modtype, Rcpp::String diffmeth);
RcppExport SEXP _repolr_hgmat(SEXP modSEXP, SEXP smatSEXP, SEXP cmatSEXP, SEXP XSEXP, SEXP modtypeSEXP, SEXP diffmethSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< List >::type smat(smatSEXP);
    Rcpp::traits::input_parameter< List >::type cmat(cmatSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type modtype(modtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type diffmeth(diffmethSEXP);
    rcpp_result_gen = Rcpp::wrap(hgmat(mod, smat, cmat, X, modtype, diffmeth));
    return rcpp_result_gen;
END_RCPP
}
// icormat
Rcpp::List icormat(List mod, List smat, List cmat, Rcpp::String modtype);
RcppExport SEXP _repolr_icormat(SEXP modSEXP, SEXP smatSEXP, SEXP cmatSEXP, SEXP modtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< List >::type smat(smatSEXP);
    Rcpp::traits::input_parameter< List >::type cmat(cmatSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type modtype(modtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(icormat(mod, smat, cmat, modtype));
    return rcpp_result_gen;
END_RCPP
}
// ordgee
Rcpp::List ordgee(Rcpp::List mod, Rcpp::List icormat, Rcpp::List X, Rcpp::String modtype, Rcpp::NumericVector ctimes, unsigned int categories, unsigned int omaxit, double otol);
RcppExport SEXP _repolr_ordgee(SEXP modSEXP, SEXP icormatSEXP, SEXP XSEXP, SEXP modtypeSEXP, SEXP ctimesSEXP, SEXP categoriesSEXP, SEXP omaxitSEXP, SEXP otolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type icormat(icormatSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type modtype(modtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ctimes(ctimesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type categories(categoriesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type omaxit(omaxitSEXP);
    Rcpp::traits::input_parameter< double >::type otol(otolSEXP);
    rcpp_result_gen = Rcpp::wrap(ordgee(mod, icormat, X, modtype, ctimes, categories, omaxit, otol));
    return rcpp_result_gen;
END_RCPP
}
// potest
Rcpp::List potest(Rcpp::List mod, Rcpp::List hgmat, Rcpp::List X, unsigned int categories, Rcpp::NumericVector ctimes);
RcppExport SEXP _repolr_potest(SEXP modSEXP, SEXP hgmatSEXP, SEXP XSEXP, SEXP categoriesSEXP, SEXP ctimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hgmat(hgmatSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X(XSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type categories(categoriesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ctimes(ctimesSEXP);
    rcpp_result_gen = Rcpp::wrap(potest(mod, hgmat, X, categories, ctimes));
    return rcpp_result_gen;
END_RCPP
}
// smat
List smat(Rcpp::NumericVector coeff);
RcppExport SEXP _repolr_smat(SEXP coeffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type coeff(coeffSEXP);
    rcpp_result_gen = Rcpp::wrap(smat(coeff));
    return rcpp_result_gen;
END_RCPP
}
// upalpha
Rcpp::List upalpha(Rcpp::List hgmat, double alpha, Rcpp::String diffmeth, double h);
RcppExport SEXP _repolr_upalpha(SEXP hgmatSEXP, SEXP alphaSEXP, SEXP diffmethSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type hgmat(hgmatSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type diffmeth(diffmethSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(upalpha(hgmat, alpha, diffmeth, h));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_repolr_alphpow", (DL_FUNC) &_repolr_alphpow, 2},
    {"_repolr_cmat", (DL_FUNC) &_repolr_cmat, 5},
    {"_repolr_hgmat", (DL_FUNC) &_repolr_hgmat, 6},
    {"_repolr_icormat", (DL_FUNC) &_repolr_icormat, 4},
    {"_repolr_ordgee", (DL_FUNC) &_repolr_ordgee, 8},
    {"_repolr_potest", (DL_FUNC) &_repolr_potest, 5},
    {"_repolr_smat", (DL_FUNC) &_repolr_smat, 1},
    {"_repolr_upalpha", (DL_FUNC) &_repolr_upalpha, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_repolr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
