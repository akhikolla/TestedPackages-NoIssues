// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rootChoose_DeepState_TestHarness_generation.cpp and rootChoose_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double rootChoose(int n, int k, double root);

TEST(cstab_deepstate_test,rootChoose_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cstab/inst/testfiles/rootChoose/libFuzzer_rootChoose/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  IntegerVector k(1);
  k[0]  = RcppDeepState_int();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cstab/inst/testfiles/rootChoose/libFuzzer_rootChoose/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  NumericVector root(1);
  root[0]  = RcppDeepState_double();
  std::string root_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cstab/inst/testfiles/rootChoose/libFuzzer_rootChoose/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_root.qs";
  qs::c_qsave(root,root_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "root values: "<< root << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rootChoose(n[0],k[0],root[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
