// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// qbeta4_DeepState_TestHarness_generation.cpp and qbeta4_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector qbeta4(NumericVector p, double min, double max, double shape1, double shape2);

TEST(teachingApps_deepstate_test,qbeta4_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector p  = RcppDeepState_NumericVector();
  qs::c_qsave(p,"/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/qbeta4/inputs/p.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  NumericVector min(1);
  min[0]  = RcppDeepState_double();
  qs::c_qsave(min,"/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/qbeta4/inputs/min.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min values: "<< min << std::endl;
  NumericVector max(1);
  max[0]  = RcppDeepState_double();
  qs::c_qsave(max,"/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/qbeta4/inputs/max.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max values: "<< max << std::endl;
  NumericVector shape1(1);
  shape1[0]  = RcppDeepState_double();
  qs::c_qsave(shape1,"/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/qbeta4/inputs/shape1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "shape1 values: "<< shape1 << std::endl;
  NumericVector shape2(1);
  shape2[0]  = RcppDeepState_double();
  qs::c_qsave(shape2,"/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/qbeta4/inputs/shape2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "shape2 values: "<< shape2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    qbeta4(p,min[0],max[0],shape1[0],shape2[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
