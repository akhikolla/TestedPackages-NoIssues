// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// likely2_DeepState_TestHarness_generation.cpp and likely2_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

LogicalVector likely2(NumericVector times, NumericVector cens, NumericVector params, const double maxll);

TEST(teachingApps_deepstate_test,likely2_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector times  = RcppDeepState_NumericVector();
  std::string times_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/likely2/libFuzzer_likely2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_times.qs";
  qs::c_qsave(times,times_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "times values: "<< times << std::endl;
  NumericVector cens  = RcppDeepState_NumericVector();
  std::string cens_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/likely2/libFuzzer_likely2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_cens.qs";
  qs::c_qsave(cens,cens_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cens values: "<< cens << std::endl;
  NumericVector params  = RcppDeepState_NumericVector();
  std::string params_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/likely2/libFuzzer_likely2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_params.qs";
  qs::c_qsave(params,params_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "params values: "<< params << std::endl;
  NumericVector maxll(1);
  maxll[0]  = RcppDeepState_double();
  std::string maxll_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/likely2/libFuzzer_likely2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxll.qs";
  qs::c_qsave(maxll,maxll_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxll values: "<< maxll << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    likely2(times,cens,params,maxll[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
