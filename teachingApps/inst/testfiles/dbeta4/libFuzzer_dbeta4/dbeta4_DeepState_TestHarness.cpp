// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dbeta4_DeepState_TestHarness_generation.cpp and dbeta4_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector dbeta4(NumericVector x, double min, double max, double shape1, double shape2, double gap);

TEST(teachingApps_deepstate_test,dbeta4_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/dbeta4/libFuzzer_dbeta4/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector min(1);
  min[0]  = RcppDeepState_double();
  std::string min_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/dbeta4/libFuzzer_dbeta4/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_min.qs";
  qs::c_qsave(min,min_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min values: "<< min << std::endl;
  NumericVector max(1);
  max[0]  = RcppDeepState_double();
  std::string max_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/dbeta4/libFuzzer_dbeta4/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_max.qs";
  qs::c_qsave(max,max_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max values: "<< max << std::endl;
  NumericVector shape1(1);
  shape1[0]  = RcppDeepState_double();
  std::string shape1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/dbeta4/libFuzzer_dbeta4/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_shape1.qs";
  qs::c_qsave(shape1,shape1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "shape1 values: "<< shape1 << std::endl;
  NumericVector shape2(1);
  shape2[0]  = RcppDeepState_double();
  std::string shape2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/dbeta4/libFuzzer_dbeta4/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_shape2.qs";
  qs::c_qsave(shape2,shape2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "shape2 values: "<< shape2 << std::endl;
  NumericVector gap(1);
  gap[0]  = RcppDeepState_double();
  std::string gap_t = "/home/akhila/fuzzer_packages/fuzzedpackages/teachingApps/inst/testfiles/dbeta4/libFuzzer_dbeta4/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_gap.qs";
  qs::c_qsave(gap,gap_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gap values: "<< gap << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dbeta4(x,min[0],max[0],shape1[0],shape2[0],gap[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
