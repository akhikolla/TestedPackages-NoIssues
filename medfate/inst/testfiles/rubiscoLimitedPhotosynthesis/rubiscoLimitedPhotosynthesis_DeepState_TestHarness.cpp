// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rubiscoLimitedPhotosynthesis_DeepState_TestHarness_generation.cpp and rubiscoLimitedPhotosynthesis_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double rubiscoLimitedPhotosynthesis(double Ci, double GT, double Km, double Vmax);

TEST(medfate_deepstate_test,rubiscoLimitedPhotosynthesis_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector Ci(1);
  Ci[0]  = RcppDeepState_double();
  qs::c_qsave(Ci,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/rubiscoLimitedPhotosynthesis/inputs/Ci.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ci values: "<< Ci << std::endl;
  NumericVector GT(1);
  GT[0]  = RcppDeepState_double();
  qs::c_qsave(GT,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/rubiscoLimitedPhotosynthesis/inputs/GT.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "GT values: "<< GT << std::endl;
  NumericVector Km(1);
  Km[0]  = RcppDeepState_double();
  qs::c_qsave(Km,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/rubiscoLimitedPhotosynthesis/inputs/Km.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Km values: "<< Km << std::endl;
  NumericVector Vmax(1);
  Vmax[0]  = RcppDeepState_double();
  qs::c_qsave(Vmax,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/rubiscoLimitedPhotosynthesis/inputs/Vmax.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Vmax values: "<< Vmax << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rubiscoLimitedPhotosynthesis(Ci[0],GT[0],Km[0],Vmax[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
