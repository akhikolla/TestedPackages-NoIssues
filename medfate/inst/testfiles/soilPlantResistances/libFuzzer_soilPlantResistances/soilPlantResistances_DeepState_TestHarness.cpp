// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// soilPlantResistances_DeepState_TestHarness_generation.cpp and soilPlantResistances_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector soilPlantResistances(NumericVector psiSoil, NumericVector psiRhizo, NumericVector psiStem, NumericVector PLCstem, double psiLeaf, NumericVector krhizomax, NumericVector n, NumericVector alpha, NumericVector krootmax, double rootc, double rootd, double kstemmax, double stemc, double stemd, double kleafmax, double leafc, double leafd);

TEST(medfate_deepstate_test,soilPlantResistances_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector psiSoil  = RcppDeepState_NumericVector();
  std::string psiSoil_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiSoil.qs";
  qs::c_qsave(psiSoil,psiSoil_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiSoil values: "<< psiSoil << std::endl;
  NumericVector psiRhizo  = RcppDeepState_NumericVector();
  std::string psiRhizo_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiRhizo.qs";
  qs::c_qsave(psiRhizo,psiRhizo_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiRhizo values: "<< psiRhizo << std::endl;
  NumericVector psiStem  = RcppDeepState_NumericVector();
  std::string psiStem_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiStem.qs";
  qs::c_qsave(psiStem,psiStem_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiStem values: "<< psiStem << std::endl;
  NumericVector PLCstem  = RcppDeepState_NumericVector();
  std::string PLCstem_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_PLCstem.qs";
  qs::c_qsave(PLCstem,PLCstem_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PLCstem values: "<< PLCstem << std::endl;
  NumericVector psiLeaf(1);
  psiLeaf[0]  = RcppDeepState_double();
  std::string psiLeaf_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiLeaf.qs";
  qs::c_qsave(psiLeaf,psiLeaf_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiLeaf values: "<< psiLeaf << std::endl;
  NumericVector krhizomax  = RcppDeepState_NumericVector();
  std::string krhizomax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_krhizomax.qs";
  qs::c_qsave(krhizomax,krhizomax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "krhizomax values: "<< krhizomax << std::endl;
  NumericVector n  = RcppDeepState_NumericVector();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector alpha  = RcppDeepState_NumericVector();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector krootmax  = RcppDeepState_NumericVector();
  std::string krootmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_krootmax.qs";
  qs::c_qsave(krootmax,krootmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "krootmax values: "<< krootmax << std::endl;
  NumericVector rootc(1);
  rootc[0]  = RcppDeepState_double();
  std::string rootc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rootc.qs";
  qs::c_qsave(rootc,rootc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rootc values: "<< rootc << std::endl;
  NumericVector rootd(1);
  rootd[0]  = RcppDeepState_double();
  std::string rootd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rootd.qs";
  qs::c_qsave(rootd,rootd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rootd values: "<< rootd << std::endl;
  NumericVector kstemmax(1);
  kstemmax[0]  = RcppDeepState_double();
  std::string kstemmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kstemmax.qs";
  qs::c_qsave(kstemmax,kstemmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kstemmax values: "<< kstemmax << std::endl;
  NumericVector stemc(1);
  stemc[0]  = RcppDeepState_double();
  std::string stemc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_stemc.qs";
  qs::c_qsave(stemc,stemc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemc values: "<< stemc << std::endl;
  NumericVector stemd(1);
  stemd[0]  = RcppDeepState_double();
  std::string stemd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_stemd.qs";
  qs::c_qsave(stemd,stemd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemd values: "<< stemd << std::endl;
  NumericVector kleafmax(1);
  kleafmax[0]  = RcppDeepState_double();
  std::string kleafmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kleafmax.qs";
  qs::c_qsave(kleafmax,kleafmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kleafmax values: "<< kleafmax << std::endl;
  NumericVector leafc(1);
  leafc[0]  = RcppDeepState_double();
  std::string leafc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_leafc.qs";
  qs::c_qsave(leafc,leafc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "leafc values: "<< leafc << std::endl;
  NumericVector leafd(1);
  leafd[0]  = RcppDeepState_double();
  std::string leafd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilPlantResistances/libFuzzer_soilPlantResistances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_leafd.qs";
  qs::c_qsave(leafd,leafd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "leafd values: "<< leafd << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    soilPlantResistances(psiSoil,psiRhizo,psiStem,PLCstem,psiLeaf[0],krhizomax,n,alpha,krootmax,rootc[0],rootd[0],kstemmax[0],stemc[0],stemd[0],kleafmax[0],leafc[0],leafd[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
