// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// supplyFunctionFineRootLeaf_DeepState_TestHarness_generation.cpp and supplyFunctionFineRootLeaf_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List supplyFunctionFineRootLeaf(double psiFineRoot, double krootmax, double rootc, double rootd, double kstemmax, double stemc, double stemd, double kleafmax, double leafc, double leafd, double PLCstem, double minFlow, int maxNsteps, double ETol, double pCrit);

TEST(medfate_deepstate_test,supplyFunctionFineRootLeaf_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector psiFineRoot(1);
  psiFineRoot[0]  = RcppDeepState_double();
  qs::c_qsave(psiFineRoot,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/psiFineRoot.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiFineRoot values: "<< psiFineRoot << std::endl;
  NumericVector krootmax(1);
  krootmax[0]  = RcppDeepState_double();
  qs::c_qsave(krootmax,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/krootmax.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "krootmax values: "<< krootmax << std::endl;
  NumericVector rootc(1);
  rootc[0]  = RcppDeepState_double();
  qs::c_qsave(rootc,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/rootc.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rootc values: "<< rootc << std::endl;
  NumericVector rootd(1);
  rootd[0]  = RcppDeepState_double();
  qs::c_qsave(rootd,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/rootd.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rootd values: "<< rootd << std::endl;
  NumericVector kstemmax(1);
  kstemmax[0]  = RcppDeepState_double();
  qs::c_qsave(kstemmax,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/kstemmax.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kstemmax values: "<< kstemmax << std::endl;
  NumericVector stemc(1);
  stemc[0]  = RcppDeepState_double();
  qs::c_qsave(stemc,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/stemc.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemc values: "<< stemc << std::endl;
  NumericVector stemd(1);
  stemd[0]  = RcppDeepState_double();
  qs::c_qsave(stemd,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/stemd.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemd values: "<< stemd << std::endl;
  NumericVector kleafmax(1);
  kleafmax[0]  = RcppDeepState_double();
  qs::c_qsave(kleafmax,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/kleafmax.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kleafmax values: "<< kleafmax << std::endl;
  NumericVector leafc(1);
  leafc[0]  = RcppDeepState_double();
  qs::c_qsave(leafc,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/leafc.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "leafc values: "<< leafc << std::endl;
  NumericVector leafd(1);
  leafd[0]  = RcppDeepState_double();
  qs::c_qsave(leafd,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/leafd.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "leafd values: "<< leafd << std::endl;
  NumericVector PLCstem(1);
  PLCstem[0]  = RcppDeepState_double();
  qs::c_qsave(PLCstem,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/PLCstem.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PLCstem values: "<< PLCstem << std::endl;
  NumericVector minFlow(1);
  minFlow[0]  = RcppDeepState_double();
  qs::c_qsave(minFlow,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/minFlow.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minFlow values: "<< minFlow << std::endl;
  IntegerVector maxNsteps(1);
  maxNsteps[0]  = RcppDeepState_int();
  qs::c_qsave(maxNsteps,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/maxNsteps.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxNsteps values: "<< maxNsteps << std::endl;
  NumericVector ETol(1);
  ETol[0]  = RcppDeepState_double();
  qs::c_qsave(ETol,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/ETol.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ETol values: "<< ETol << std::endl;
  NumericVector pCrit(1);
  pCrit[0]  = RcppDeepState_double();
  qs::c_qsave(pCrit,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionFineRootLeaf/inputs/pCrit.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pCrit values: "<< pCrit << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    supplyFunctionFineRootLeaf(psiFineRoot[0],krootmax[0],rootc[0],rootd[0],kstemmax[0],stemc[0],stemd[0],kleafmax[0],leafc[0],leafd[0],PLCstem[0],minFlow[0],maxNsteps[0],ETol[0],pCrit[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
