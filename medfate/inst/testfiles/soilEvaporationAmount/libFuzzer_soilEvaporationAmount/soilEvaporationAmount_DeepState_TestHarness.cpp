// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// soilEvaporationAmount_DeepState_TestHarness_generation.cpp and soilEvaporationAmount_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double soilEvaporationAmount(double DEF, double PETs, double Gsoil);

TEST(medfate_deepstate_test,soilEvaporationAmount_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector DEF(1);
  DEF[0]  = RcppDeepState_double();
  std::string DEF_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilEvaporationAmount/libFuzzer_soilEvaporationAmount/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DEF.qs";
  qs::c_qsave(DEF,DEF_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DEF values: "<< DEF << std::endl;
  NumericVector PETs(1);
  PETs[0]  = RcppDeepState_double();
  std::string PETs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilEvaporationAmount/libFuzzer_soilEvaporationAmount/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_PETs.qs";
  qs::c_qsave(PETs,PETs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PETs values: "<< PETs << std::endl;
  NumericVector Gsoil(1);
  Gsoil[0]  = RcppDeepState_double();
  std::string Gsoil_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/soilEvaporationAmount/libFuzzer_soilEvaporationAmount/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Gsoil.qs";
  qs::c_qsave(Gsoil,Gsoil_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Gsoil values: "<< Gsoil << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    soilEvaporationAmount(DEF[0],PETs[0],Gsoil[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
