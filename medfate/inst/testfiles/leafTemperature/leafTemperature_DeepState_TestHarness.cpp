// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// leafTemperature_DeepState_TestHarness_generation.cpp and leafTemperature_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double leafTemperature(double absRad, double airTemperature, double u, double E, double leafWidth);

TEST(medfate_deepstate_test,leafTemperature_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector absRad(1);
  absRad[0]  = RcppDeepState_double();
  qs::c_qsave(absRad,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/leafTemperature/inputs/absRad.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "absRad values: "<< absRad << std::endl;
  NumericVector airTemperature(1);
  airTemperature[0]  = RcppDeepState_double();
  qs::c_qsave(airTemperature,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/leafTemperature/inputs/airTemperature.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "airTemperature values: "<< airTemperature << std::endl;
  NumericVector u(1);
  u[0]  = RcppDeepState_double();
  qs::c_qsave(u,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/leafTemperature/inputs/u.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "u values: "<< u << std::endl;
  NumericVector E(1);
  E[0]  = RcppDeepState_double();
  qs::c_qsave(E,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/leafTemperature/inputs/E.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "E values: "<< E << std::endl;
  NumericVector leafWidth(1);
  leafWidth[0]  = RcppDeepState_double();
  qs::c_qsave(leafWidth,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/leafTemperature/inputs/leafWidth.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "leafWidth values: "<< leafWidth << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    leafTemperature(absRad[0],airTemperature[0],u[0],E[0],leafWidth[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
