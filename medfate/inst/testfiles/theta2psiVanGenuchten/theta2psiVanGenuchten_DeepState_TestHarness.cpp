// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// theta2psiVanGenuchten_DeepState_TestHarness_generation.cpp and theta2psiVanGenuchten_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double theta2psiVanGenuchten(double n, double alpha, double theta_res, double theta_sat, double theta);

TEST(medfate_deepstate_test,theta2psiVanGenuchten_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector n(1);
  n[0]  = RcppDeepState_double();
  qs::c_qsave(n,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/theta2psiVanGenuchten/inputs/n.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  qs::c_qsave(alpha,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/theta2psiVanGenuchten/inputs/alpha.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector theta_res(1);
  theta_res[0]  = RcppDeepState_double();
  qs::c_qsave(theta_res,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/theta2psiVanGenuchten/inputs/theta_res.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta_res values: "<< theta_res << std::endl;
  NumericVector theta_sat(1);
  theta_sat[0]  = RcppDeepState_double();
  qs::c_qsave(theta_sat,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/theta2psiVanGenuchten/inputs/theta_sat.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta_sat values: "<< theta_sat << std::endl;
  NumericVector theta(1);
  theta[0]  = RcppDeepState_double();
  qs::c_qsave(theta,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/theta2psiVanGenuchten/inputs/theta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    theta2psiVanGenuchten(n[0],alpha[0],theta_res[0],theta_sat[0],theta[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
