// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cohortSunlitShadeAbsorbedRadiation_DeepState_TestHarness_generation.cpp and cohortSunlitShadeAbsorbedRadiation_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List cohortSunlitShadeAbsorbedRadiation(double Ib0, double Id0, NumericVector Ibf, NumericVector Idf, double beta, NumericMatrix LAIme, NumericMatrix LAImd, NumericVector kb, NumericVector kd, NumericVector alpha, NumericVector gamma);

TEST(medfate_deepstate_test,cohortSunlitShadeAbsorbedRadiation_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector Ib0(1);
  Ib0[0]  = RcppDeepState_double();
  std::string Ib0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Ib0.qs";
  qs::c_qsave(Ib0,Ib0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ib0 values: "<< Ib0 << std::endl;
  NumericVector Id0(1);
  Id0[0]  = RcppDeepState_double();
  std::string Id0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Id0.qs";
  qs::c_qsave(Id0,Id0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Id0 values: "<< Id0 << std::endl;
  NumericVector Ibf  = RcppDeepState_NumericVector();
  std::string Ibf_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Ibf.qs";
  qs::c_qsave(Ibf,Ibf_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ibf values: "<< Ibf << std::endl;
  NumericVector Idf  = RcppDeepState_NumericVector();
  std::string Idf_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Idf.qs";
  qs::c_qsave(Idf,Idf_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Idf values: "<< Idf << std::endl;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_double();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericMatrix LAIme  = RcppDeepState_NumericMatrix();
  std::string LAIme_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_LAIme.qs";
  qs::c_qsave(LAIme,LAIme_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LAIme values: "<< LAIme << std::endl;
  NumericMatrix LAImd  = RcppDeepState_NumericMatrix();
  std::string LAImd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_LAImd.qs";
  qs::c_qsave(LAImd,LAImd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LAImd values: "<< LAImd << std::endl;
  NumericVector kb  = RcppDeepState_NumericVector();
  std::string kb_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kb.qs";
  qs::c_qsave(kb,kb_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kb values: "<< kb << std::endl;
  NumericVector kd  = RcppDeepState_NumericVector();
  std::string kd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kd.qs";
  qs::c_qsave(kd,kd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kd values: "<< kd << std::endl;
  NumericVector alpha  = RcppDeepState_NumericVector();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector gamma  = RcppDeepState_NumericVector();
  std::string gamma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/cohortSunlitShadeAbsorbedRadiation/libFuzzer_cohortSunlitShadeAbsorbedRadiation/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_gamma.qs";
  qs::c_qsave(gamma,gamma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma values: "<< gamma << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cohortSunlitShadeAbsorbedRadiation(Ib0[0],Id0[0],Ibf,Idf,beta[0],LAIme,LAImd,kb,kd,alpha,gamma);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
