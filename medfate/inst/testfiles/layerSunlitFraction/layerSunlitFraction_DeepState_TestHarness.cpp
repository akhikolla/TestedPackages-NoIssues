// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// layerSunlitFraction_DeepState_TestHarness_generation.cpp and layerSunlitFraction_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector layerSunlitFraction(NumericMatrix LAIme, NumericMatrix LAImd, NumericVector kb);

TEST(medfate_deepstate_test,layerSunlitFraction_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix LAIme  = RcppDeepState_NumericMatrix();
  qs::c_qsave(LAIme,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerSunlitFraction/inputs/LAIme.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LAIme values: "<< LAIme << std::endl;
  NumericMatrix LAImd  = RcppDeepState_NumericMatrix();
  qs::c_qsave(LAImd,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerSunlitFraction/inputs/LAImd.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LAImd values: "<< LAImd << std::endl;
  NumericVector kb  = RcppDeepState_NumericVector();
  qs::c_qsave(kb,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerSunlitFraction/inputs/kb.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kb values: "<< kb << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    layerSunlitFraction(LAIme,LAImd,kb);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
