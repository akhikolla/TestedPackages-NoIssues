// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// tissueRelativeWaterContent_DeepState_TestHarness_generation.cpp and tissueRelativeWaterContent_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double tissueRelativeWaterContent(double psiSym, double pi0, double epsilon, double psiApo, double c, double d, double af, double femb);

TEST(medfate_deepstate_test,tissueRelativeWaterContent_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector psiSym(1);
  psiSym[0]  = RcppDeepState_double();
  std::string psiSym_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/tissueRelativeWaterContent/libFuzzer_tissueRelativeWaterContent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiSym.qs";
  qs::c_qsave(psiSym,psiSym_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiSym values: "<< psiSym << std::endl;
  NumericVector pi0(1);
  pi0[0]  = RcppDeepState_double();
  std::string pi0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/tissueRelativeWaterContent/libFuzzer_tissueRelativeWaterContent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_pi0.qs";
  qs::c_qsave(pi0,pi0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pi0 values: "<< pi0 << std::endl;
  NumericVector epsilon(1);
  epsilon[0]  = RcppDeepState_double();
  std::string epsilon_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/tissueRelativeWaterContent/libFuzzer_tissueRelativeWaterContent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_epsilon.qs";
  qs::c_qsave(epsilon,epsilon_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "epsilon values: "<< epsilon << std::endl;
  NumericVector psiApo(1);
  psiApo[0]  = RcppDeepState_double();
  std::string psiApo_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/tissueRelativeWaterContent/libFuzzer_tissueRelativeWaterContent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiApo.qs";
  qs::c_qsave(psiApo,psiApo_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiApo values: "<< psiApo << std::endl;
  NumericVector c(1);
  c[0]  = RcppDeepState_double();
  std::string c_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/tissueRelativeWaterContent/libFuzzer_tissueRelativeWaterContent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_c.qs";
  qs::c_qsave(c,c_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "c values: "<< c << std::endl;
  NumericVector d(1);
  d[0]  = RcppDeepState_double();
  std::string d_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/tissueRelativeWaterContent/libFuzzer_tissueRelativeWaterContent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_d.qs";
  qs::c_qsave(d,d_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d values: "<< d << std::endl;
  NumericVector af(1);
  af[0]  = RcppDeepState_double();
  std::string af_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/tissueRelativeWaterContent/libFuzzer_tissueRelativeWaterContent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_af.qs";
  qs::c_qsave(af,af_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "af values: "<< af << std::endl;
  NumericVector femb(1);
  femb[0]  = RcppDeepState_double();
  std::string femb_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/tissueRelativeWaterContent/libFuzzer_tissueRelativeWaterContent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_femb.qs";
  qs::c_qsave(femb,femb_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "femb values: "<< femb << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    tissueRelativeWaterContent(psiSym[0],pi0[0],epsilon[0],psiApo[0],c[0],d[0],af[0],femb[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
