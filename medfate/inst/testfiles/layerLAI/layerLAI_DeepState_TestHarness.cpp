// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// layerLAI_DeepState_TestHarness_generation.cpp and layerLAI_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double layerLAI(double minHeight, double maxHeight, NumericVector cohortLAI, NumericVector H, NumericVector CR);

TEST(medfate_deepstate_test,layerLAI_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector minHeight(1);
  minHeight[0]  = RcppDeepState_double();
  qs::c_qsave(minHeight,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/inputs/minHeight.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minHeight values: "<< minHeight << std::endl;
  NumericVector maxHeight(1);
  maxHeight[0]  = RcppDeepState_double();
  qs::c_qsave(maxHeight,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/inputs/maxHeight.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxHeight values: "<< maxHeight << std::endl;
  NumericVector cohortLAI  = RcppDeepState_NumericVector();
  qs::c_qsave(cohortLAI,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/inputs/cohortLAI.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cohortLAI values: "<< cohortLAI << std::endl;
  NumericVector H  = RcppDeepState_NumericVector();
  qs::c_qsave(H,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/inputs/H.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "H values: "<< H << std::endl;
  NumericVector CR  = RcppDeepState_NumericVector();
  qs::c_qsave(CR,"/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/inputs/CR.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "CR values: "<< CR << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    layerLAI(minHeight[0],maxHeight[0],cohortLAI,H,CR);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
