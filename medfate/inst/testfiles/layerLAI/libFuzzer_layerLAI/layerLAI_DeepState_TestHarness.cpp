// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// layerLAI_DeepState_TestHarness_generation.cpp and layerLAI_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double layerLAI(double minHeight, double maxHeight, NumericVector cohortLAI, NumericVector H, NumericVector CR);

TEST(medfate_deepstate_test,layerLAI_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector minHeight(1);
  minHeight[0]  = RcppDeepState_double();
  std::string minHeight_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/libFuzzer_layerLAI/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_minHeight.qs";
  qs::c_qsave(minHeight,minHeight_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minHeight values: "<< minHeight << std::endl;
  NumericVector maxHeight(1);
  maxHeight[0]  = RcppDeepState_double();
  std::string maxHeight_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/libFuzzer_layerLAI/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxHeight.qs";
  qs::c_qsave(maxHeight,maxHeight_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxHeight values: "<< maxHeight << std::endl;
  NumericVector cohortLAI  = RcppDeepState_NumericVector();
  std::string cohortLAI_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/libFuzzer_layerLAI/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_cohortLAI.qs";
  qs::c_qsave(cohortLAI,cohortLAI_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cohortLAI values: "<< cohortLAI << std::endl;
  NumericVector H  = RcppDeepState_NumericVector();
  std::string H_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/libFuzzer_layerLAI/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_H.qs";
  qs::c_qsave(H,H_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "H values: "<< H << std::endl;
  NumericVector CR  = RcppDeepState_NumericVector();
  std::string CR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/layerLAI/libFuzzer_layerLAI/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_CR.qs";
  qs::c_qsave(CR,CR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "CR values: "<< CR << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    layerLAI(minHeight[0],maxHeight[0],cohortLAI,H,CR);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
