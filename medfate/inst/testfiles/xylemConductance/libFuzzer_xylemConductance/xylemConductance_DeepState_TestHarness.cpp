// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// xylemConductance_DeepState_TestHarness_generation.cpp and xylemConductance_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double xylemConductance(double psi, double kxylemmax, double c, double d);

TEST(medfate_deepstate_test,xylemConductance_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector psi(1);
  psi[0]  = RcppDeepState_double();
  std::string psi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/xylemConductance/libFuzzer_xylemConductance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psi.qs";
  qs::c_qsave(psi,psi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psi values: "<< psi << std::endl;
  NumericVector kxylemmax(1);
  kxylemmax[0]  = RcppDeepState_double();
  std::string kxylemmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/xylemConductance/libFuzzer_xylemConductance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kxylemmax.qs";
  qs::c_qsave(kxylemmax,kxylemmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kxylemmax values: "<< kxylemmax << std::endl;
  NumericVector c(1);
  c[0]  = RcppDeepState_double();
  std::string c_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/xylemConductance/libFuzzer_xylemConductance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_c.qs";
  qs::c_qsave(c,c_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "c values: "<< c << std::endl;
  NumericVector d(1);
  d[0]  = RcppDeepState_double();
  std::string d_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/xylemConductance/libFuzzer_xylemConductance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_d.qs";
  qs::c_qsave(d,d_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d values: "<< d << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    xylemConductance(psi[0],kxylemmax[0],c[0],d[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
