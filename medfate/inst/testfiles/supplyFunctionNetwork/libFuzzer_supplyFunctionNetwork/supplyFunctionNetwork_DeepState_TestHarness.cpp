// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// supplyFunctionNetwork_DeepState_TestHarness_generation.cpp and supplyFunctionNetwork_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List supplyFunctionNetwork(NumericVector psiSoil, NumericVector krhizomax, NumericVector nsoil, NumericVector alphasoil, NumericVector krootmax, double rootc, double rootd, double kstemmax, double stemc, double stemd, double kleafmax, double leafc, double leafd, NumericVector PLCstem, double minFlow, int maxNsteps, int ntrial, double psiTol, double ETol, double pCrit);

TEST(medfate_deepstate_test,supplyFunctionNetwork_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector psiSoil  = RcppDeepState_NumericVector();
  std::string psiSoil_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiSoil.qs";
  qs::c_qsave(psiSoil,psiSoil_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiSoil values: "<< psiSoil << std::endl;
  NumericVector krhizomax  = RcppDeepState_NumericVector();
  std::string krhizomax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_krhizomax.qs";
  qs::c_qsave(krhizomax,krhizomax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "krhizomax values: "<< krhizomax << std::endl;
  NumericVector nsoil  = RcppDeepState_NumericVector();
  std::string nsoil_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nsoil.qs";
  qs::c_qsave(nsoil,nsoil_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsoil values: "<< nsoil << std::endl;
  NumericVector alphasoil  = RcppDeepState_NumericVector();
  std::string alphasoil_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alphasoil.qs";
  qs::c_qsave(alphasoil,alphasoil_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alphasoil values: "<< alphasoil << std::endl;
  NumericVector krootmax  = RcppDeepState_NumericVector();
  std::string krootmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_krootmax.qs";
  qs::c_qsave(krootmax,krootmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "krootmax values: "<< krootmax << std::endl;
  NumericVector rootc(1);
  rootc[0]  = RcppDeepState_double();
  std::string rootc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rootc.qs";
  qs::c_qsave(rootc,rootc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rootc values: "<< rootc << std::endl;
  NumericVector rootd(1);
  rootd[0]  = RcppDeepState_double();
  std::string rootd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rootd.qs";
  qs::c_qsave(rootd,rootd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rootd values: "<< rootd << std::endl;
  NumericVector kstemmax(1);
  kstemmax[0]  = RcppDeepState_double();
  std::string kstemmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kstemmax.qs";
  qs::c_qsave(kstemmax,kstemmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kstemmax values: "<< kstemmax << std::endl;
  NumericVector stemc(1);
  stemc[0]  = RcppDeepState_double();
  std::string stemc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_stemc.qs";
  qs::c_qsave(stemc,stemc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemc values: "<< stemc << std::endl;
  NumericVector stemd(1);
  stemd[0]  = RcppDeepState_double();
  std::string stemd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_stemd.qs";
  qs::c_qsave(stemd,stemd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemd values: "<< stemd << std::endl;
  NumericVector kleafmax(1);
  kleafmax[0]  = RcppDeepState_double();
  std::string kleafmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kleafmax.qs";
  qs::c_qsave(kleafmax,kleafmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kleafmax values: "<< kleafmax << std::endl;
  NumericVector leafc(1);
  leafc[0]  = RcppDeepState_double();
  std::string leafc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_leafc.qs";
  qs::c_qsave(leafc,leafc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "leafc values: "<< leafc << std::endl;
  NumericVector leafd(1);
  leafd[0]  = RcppDeepState_double();
  std::string leafd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_leafd.qs";
  qs::c_qsave(leafd,leafd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "leafd values: "<< leafd << std::endl;
  NumericVector PLCstem  = RcppDeepState_NumericVector();
  std::string PLCstem_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_PLCstem.qs";
  qs::c_qsave(PLCstem,PLCstem_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PLCstem values: "<< PLCstem << std::endl;
  NumericVector minFlow(1);
  minFlow[0]  = RcppDeepState_double();
  std::string minFlow_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_minFlow.qs";
  qs::c_qsave(minFlow,minFlow_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minFlow values: "<< minFlow << std::endl;
  IntegerVector maxNsteps(1);
  maxNsteps[0]  = RcppDeepState_int();
  std::string maxNsteps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxNsteps.qs";
  qs::c_qsave(maxNsteps,maxNsteps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxNsteps values: "<< maxNsteps << std::endl;
  IntegerVector ntrial(1);
  ntrial[0]  = RcppDeepState_int();
  std::string ntrial_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ntrial.qs";
  qs::c_qsave(ntrial,ntrial_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntrial values: "<< ntrial << std::endl;
  NumericVector psiTol(1);
  psiTol[0]  = RcppDeepState_double();
  std::string psiTol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiTol.qs";
  qs::c_qsave(psiTol,psiTol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiTol values: "<< psiTol << std::endl;
  NumericVector ETol(1);
  ETol[0]  = RcppDeepState_double();
  std::string ETol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ETol.qs";
  qs::c_qsave(ETol,ETol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ETol values: "<< ETol << std::endl;
  NumericVector pCrit(1);
  pCrit[0]  = RcppDeepState_double();
  std::string pCrit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionNetwork/libFuzzer_supplyFunctionNetwork/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_pCrit.qs";
  qs::c_qsave(pCrit,pCrit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pCrit values: "<< pCrit << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    supplyFunctionNetwork(psiSoil,krhizomax,nsoil,alphasoil,krootmax,rootc[0],rootd[0],kstemmax[0],stemc[0],stemd[0],kleafmax[0],leafc[0],leafd[0],PLCstem,minFlow[0],maxNsteps[0],ntrial[0],psiTol[0],ETol[0],pCrit[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
