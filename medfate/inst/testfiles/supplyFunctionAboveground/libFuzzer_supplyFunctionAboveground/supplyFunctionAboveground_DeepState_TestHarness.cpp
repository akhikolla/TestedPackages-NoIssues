// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// supplyFunctionAboveground_DeepState_TestHarness_generation.cpp and supplyFunctionAboveground_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List supplyFunctionAboveground(NumericVector Erootcrown, NumericVector psiRootCrown, double kstemmax, double stemc, double stemd, double kleafmax, double leafc, double leafd, NumericVector PLCstem);

TEST(medfate_deepstate_test,supplyFunctionAboveground_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector Erootcrown  = RcppDeepState_NumericVector();
  std::string Erootcrown_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionAboveground/libFuzzer_supplyFunctionAboveground/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Erootcrown.qs";
  qs::c_qsave(Erootcrown,Erootcrown_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Erootcrown values: "<< Erootcrown << std::endl;
  NumericVector psiRootCrown  = RcppDeepState_NumericVector();
  std::string psiRootCrown_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionAboveground/libFuzzer_supplyFunctionAboveground/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiRootCrown.qs";
  qs::c_qsave(psiRootCrown,psiRootCrown_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiRootCrown values: "<< psiRootCrown << std::endl;
  NumericVector kstemmax(1);
  kstemmax[0]  = RcppDeepState_double();
  std::string kstemmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionAboveground/libFuzzer_supplyFunctionAboveground/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kstemmax.qs";
  qs::c_qsave(kstemmax,kstemmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kstemmax values: "<< kstemmax << std::endl;
  NumericVector stemc(1);
  stemc[0]  = RcppDeepState_double();
  std::string stemc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionAboveground/libFuzzer_supplyFunctionAboveground/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_stemc.qs";
  qs::c_qsave(stemc,stemc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemc values: "<< stemc << std::endl;
  NumericVector stemd(1);
  stemd[0]  = RcppDeepState_double();
  std::string stemd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionAboveground/libFuzzer_supplyFunctionAboveground/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_stemd.qs";
  qs::c_qsave(stemd,stemd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemd values: "<< stemd << std::endl;
  NumericVector kleafmax(1);
  kleafmax[0]  = RcppDeepState_double();
  std::string kleafmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionAboveground/libFuzzer_supplyFunctionAboveground/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kleafmax.qs";
  qs::c_qsave(kleafmax,kleafmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kleafmax values: "<< kleafmax << std::endl;
  NumericVector leafc(1);
  leafc[0]  = RcppDeepState_double();
  std::string leafc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionAboveground/libFuzzer_supplyFunctionAboveground/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_leafc.qs";
  qs::c_qsave(leafc,leafc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "leafc values: "<< leafc << std::endl;
  NumericVector leafd(1);
  leafd[0]  = RcppDeepState_double();
  std::string leafd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionAboveground/libFuzzer_supplyFunctionAboveground/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_leafd.qs";
  qs::c_qsave(leafd,leafd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "leafd values: "<< leafd << std::endl;
  NumericVector PLCstem  = RcppDeepState_NumericVector();
  std::string PLCstem_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionAboveground/libFuzzer_supplyFunctionAboveground/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_PLCstem.qs";
  qs::c_qsave(PLCstem,PLCstem_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PLCstem values: "<< PLCstem << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    supplyFunctionAboveground(Erootcrown,psiRootCrown,kstemmax[0],stemc[0],stemd[0],kleafmax[0],leafc[0],leafd[0],PLCstem);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
