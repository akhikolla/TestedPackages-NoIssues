// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// snowMelt_DeepState_TestHarness_generation.cpp and snowMelt_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double snowMelt(double tday, double rad, double LgroundSWR, double elevation);

TEST(medfate_deepstate_test,snowMelt_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector tday(1);
  tday[0]  = RcppDeepState_double();
  std::string tday_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/snowMelt/libFuzzer_snowMelt/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tday.qs";
  qs::c_qsave(tday,tday_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tday values: "<< tday << std::endl;
  NumericVector rad(1);
  rad[0]  = RcppDeepState_double();
  std::string rad_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/snowMelt/libFuzzer_snowMelt/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rad.qs";
  qs::c_qsave(rad,rad_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rad values: "<< rad << std::endl;
  NumericVector LgroundSWR(1);
  LgroundSWR[0]  = RcppDeepState_double();
  std::string LgroundSWR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/snowMelt/libFuzzer_snowMelt/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_LgroundSWR.qs";
  qs::c_qsave(LgroundSWR,LgroundSWR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LgroundSWR values: "<< LgroundSWR << std::endl;
  NumericVector elevation(1);
  elevation[0]  = RcppDeepState_double();
  std::string elevation_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/snowMelt/libFuzzer_snowMelt/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_elevation.qs";
  qs::c_qsave(elevation,elevation_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "elevation values: "<< elevation << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    snowMelt(tday[0],rad[0],LgroundSWR[0],elevation[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
