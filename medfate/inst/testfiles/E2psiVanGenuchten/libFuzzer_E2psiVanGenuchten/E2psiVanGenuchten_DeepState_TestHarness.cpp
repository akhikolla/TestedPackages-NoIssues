// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// E2psiVanGenuchten_DeepState_TestHarness_generation.cpp and E2psiVanGenuchten_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double E2psiVanGenuchten(double E, double psiSoil, double krhizomax, double n, double alpha, double psiStep, double psiMax);

TEST(medfate_deepstate_test,E2psiVanGenuchten_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector E(1);
  E[0]  = RcppDeepState_double();
  std::string E_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/E2psiVanGenuchten/libFuzzer_E2psiVanGenuchten/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_E.qs";
  qs::c_qsave(E,E_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "E values: "<< E << std::endl;
  NumericVector psiSoil(1);
  psiSoil[0]  = RcppDeepState_double();
  std::string psiSoil_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/E2psiVanGenuchten/libFuzzer_E2psiVanGenuchten/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiSoil.qs";
  qs::c_qsave(psiSoil,psiSoil_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiSoil values: "<< psiSoil << std::endl;
  NumericVector krhizomax(1);
  krhizomax[0]  = RcppDeepState_double();
  std::string krhizomax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/E2psiVanGenuchten/libFuzzer_E2psiVanGenuchten/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_krhizomax.qs";
  qs::c_qsave(krhizomax,krhizomax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "krhizomax values: "<< krhizomax << std::endl;
  NumericVector n(1);
  n[0]  = RcppDeepState_double();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/E2psiVanGenuchten/libFuzzer_E2psiVanGenuchten/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/E2psiVanGenuchten/libFuzzer_E2psiVanGenuchten/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector psiStep(1);
  psiStep[0]  = RcppDeepState_double();
  std::string psiStep_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/E2psiVanGenuchten/libFuzzer_E2psiVanGenuchten/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiStep.qs";
  qs::c_qsave(psiStep,psiStep_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiStep values: "<< psiStep << std::endl;
  NumericVector psiMax(1);
  psiMax[0]  = RcppDeepState_double();
  std::string psiMax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/E2psiVanGenuchten/libFuzzer_E2psiVanGenuchten/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiMax.qs";
  qs::c_qsave(psiMax,psiMax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiMax values: "<< psiMax << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    E2psiVanGenuchten(E[0],psiSoil[0],krhizomax[0],n[0],alpha[0],psiStep[0],psiMax[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
