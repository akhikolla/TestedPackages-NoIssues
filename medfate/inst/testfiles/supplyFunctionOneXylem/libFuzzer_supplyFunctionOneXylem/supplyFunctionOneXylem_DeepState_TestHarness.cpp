// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// supplyFunctionOneXylem_DeepState_TestHarness_generation.cpp and supplyFunctionOneXylem_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List supplyFunctionOneXylem(NumericVector psiSoil, NumericVector v, double kstemmax, double stemc, double stemd, double psiCav, int maxNsteps, double dE);

TEST(medfate_deepstate_test,supplyFunctionOneXylem_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector psiSoil  = RcppDeepState_NumericVector();
  std::string psiSoil_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionOneXylem/libFuzzer_supplyFunctionOneXylem/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiSoil.qs";
  qs::c_qsave(psiSoil,psiSoil_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiSoil values: "<< psiSoil << std::endl;
  NumericVector v  = RcppDeepState_NumericVector();
  std::string v_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionOneXylem/libFuzzer_supplyFunctionOneXylem/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_v.qs";
  qs::c_qsave(v,v_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "v values: "<< v << std::endl;
  NumericVector kstemmax(1);
  kstemmax[0]  = RcppDeepState_double();
  std::string kstemmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionOneXylem/libFuzzer_supplyFunctionOneXylem/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kstemmax.qs";
  qs::c_qsave(kstemmax,kstemmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kstemmax values: "<< kstemmax << std::endl;
  NumericVector stemc(1);
  stemc[0]  = RcppDeepState_double();
  std::string stemc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionOneXylem/libFuzzer_supplyFunctionOneXylem/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_stemc.qs";
  qs::c_qsave(stemc,stemc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemc values: "<< stemc << std::endl;
  NumericVector stemd(1);
  stemd[0]  = RcppDeepState_double();
  std::string stemd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionOneXylem/libFuzzer_supplyFunctionOneXylem/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_stemd.qs";
  qs::c_qsave(stemd,stemd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stemd values: "<< stemd << std::endl;
  NumericVector psiCav(1);
  psiCav[0]  = RcppDeepState_double();
  std::string psiCav_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionOneXylem/libFuzzer_supplyFunctionOneXylem/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psiCav.qs";
  qs::c_qsave(psiCav,psiCav_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psiCav values: "<< psiCav << std::endl;
  IntegerVector maxNsteps(1);
  maxNsteps[0]  = RcppDeepState_int();
  std::string maxNsteps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionOneXylem/libFuzzer_supplyFunctionOneXylem/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxNsteps.qs";
  qs::c_qsave(maxNsteps,maxNsteps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxNsteps values: "<< maxNsteps << std::endl;
  NumericVector dE(1);
  dE[0]  = RcppDeepState_double();
  std::string dE_t = "/home/akhila/fuzzer_packages/fuzzedpackages/medfate/inst/testfiles/supplyFunctionOneXylem/libFuzzer_supplyFunctionOneXylem/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dE.qs";
  qs::c_qsave(dE,dE_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dE values: "<< dE << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    supplyFunctionOneXylem(psiSoil,v,kstemmax[0],stemc[0],stemd[0],psiCav[0],maxNsteps[0],dE[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
