// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// NBA_par_DeepState_TestHarness_generation.cpp and NBA_par_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector NBA_par(Rcpp::IntegerVector dep, Rcpp::IntegerVector arr, Rcpp::IntegerVector gfrom, Rcpp::IntegerVector gto, Rcpp::NumericVector gw, int NbNodes, Rcpp::NumericVector lat, Rcpp::NumericVector lon, double k);

TEST(cppRouting_deepstate_test,NBA_par_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector dep  = RcppDeepState_IntegerVector();
  std::string dep_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cppRouting/inst/testfiles/NBA_par/AFL_NBA_par/afl_inputs/" + std::to_string(t) + "_dep.qs";
  qs::c_qsave(dep,dep_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dep values: "<< dep << std::endl;
  IntegerVector arr  = RcppDeepState_IntegerVector();
  std::string arr_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cppRouting/inst/testfiles/NBA_par/AFL_NBA_par/afl_inputs/" + std::to_string(t) + "_arr.qs";
  qs::c_qsave(arr,arr_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "arr values: "<< arr << std::endl;
  IntegerVector gfrom  = RcppDeepState_IntegerVector();
  std::string gfrom_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cppRouting/inst/testfiles/NBA_par/AFL_NBA_par/afl_inputs/" + std::to_string(t) + "_gfrom.qs";
  qs::c_qsave(gfrom,gfrom_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gfrom values: "<< gfrom << std::endl;
  IntegerVector gto  = RcppDeepState_IntegerVector();
  std::string gto_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cppRouting/inst/testfiles/NBA_par/AFL_NBA_par/afl_inputs/" + std::to_string(t) + "_gto.qs";
  qs::c_qsave(gto,gto_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gto values: "<< gto << std::endl;
  NumericVector gw  = RcppDeepState_NumericVector();
  std::string gw_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cppRouting/inst/testfiles/NBA_par/AFL_NBA_par/afl_inputs/" + std::to_string(t) + "_gw.qs";
  qs::c_qsave(gw,gw_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gw values: "<< gw << std::endl;
  IntegerVector NbNodes(1);
  NbNodes[0]  = RcppDeepState_int();
  std::string NbNodes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cppRouting/inst/testfiles/NBA_par/AFL_NBA_par/afl_inputs/" + std::to_string(t) + "_NbNodes.qs";
  qs::c_qsave(NbNodes,NbNodes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NbNodes values: "<< NbNodes << std::endl;
  NumericVector lat  = RcppDeepState_NumericVector();
  std::string lat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cppRouting/inst/testfiles/NBA_par/AFL_NBA_par/afl_inputs/" + std::to_string(t) + "_lat.qs";
  qs::c_qsave(lat,lat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lat values: "<< lat << std::endl;
  NumericVector lon  = RcppDeepState_NumericVector();
  std::string lon_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cppRouting/inst/testfiles/NBA_par/AFL_NBA_par/afl_inputs/" + std::to_string(t) + "_lon.qs";
  qs::c_qsave(lon,lon_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lon values: "<< lon << std::endl;
  NumericVector k(1);
  k[0]  = RcppDeepState_double();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cppRouting/inst/testfiles/NBA_par/AFL_NBA_par/afl_inputs/" + std::to_string(t) + "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    NBA_par(dep,arr,gfrom,gto,gw,NbNodes[0],lat,lon,k[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
