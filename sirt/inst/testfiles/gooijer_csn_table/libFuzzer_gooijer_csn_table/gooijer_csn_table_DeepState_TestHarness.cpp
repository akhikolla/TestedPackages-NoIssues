// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// gooijer_csn_table_DeepState_TestHarness_generation.cpp and gooijer_csn_table_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List gooijer_csn_table(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_perm, int RR, int NS, int progress, Rcpp::NumericVector progress_vec, Rcpp::NumericMatrix score_index);

TEST(sirt_deepstate_test,gooijer_csn_table_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix dat  = RcppDeepState_NumericMatrix();
  std::string dat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/gooijer_csn_table/libFuzzer_gooijer_csn_table/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dat.qs";
  qs::c_qsave(dat,dat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dat values: "<< dat << std::endl;
  NumericMatrix dat_perm  = RcppDeepState_NumericMatrix();
  std::string dat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/gooijer_csn_table/libFuzzer_gooijer_csn_table/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dat.qs";
  std::string dat_perm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/gooijer_csn_table/libFuzzer_gooijer_csn_table/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dat_perm.qs";
  qs::c_qsave(dat_perm,dat_perm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dat_perm values: "<< dat_perm << std::endl;
  IntegerVector RR(1);
  RR[0]  = RcppDeepState_int();
  std::string RR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/gooijer_csn_table/libFuzzer_gooijer_csn_table/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_RR.qs";
  qs::c_qsave(RR,RR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "RR values: "<< RR << std::endl;
  IntegerVector NS(1);
  NS[0]  = RcppDeepState_int();
  std::string NS_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/gooijer_csn_table/libFuzzer_gooijer_csn_table/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_NS.qs";
  qs::c_qsave(NS,NS_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NS values: "<< NS << std::endl;
  IntegerVector progress(1);
  progress[0]  = RcppDeepState_int();
  std::string progress_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/gooijer_csn_table/libFuzzer_gooijer_csn_table/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_progress.qs";
  qs::c_qsave(progress,progress_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "progress values: "<< progress << std::endl;
  NumericVector progress_vec  = RcppDeepState_NumericVector();
  std::string progress_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/gooijer_csn_table/libFuzzer_gooijer_csn_table/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_progress.qs";
  std::string progress_vec_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/gooijer_csn_table/libFuzzer_gooijer_csn_table/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_progress_vec.qs";
  qs::c_qsave(progress_vec,progress_vec_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "progress_vec values: "<< progress_vec << std::endl;
  NumericMatrix score_index  = RcppDeepState_NumericMatrix();
  std::string score_index_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/gooijer_csn_table/libFuzzer_gooijer_csn_table/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_score_index.qs";
  qs::c_qsave(score_index,score_index_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "score_index values: "<< score_index << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    gooijer_csn_table(dat,dat_perm,RR[0],NS[0],progress[0],progress_vec,score_index);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
