// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// RM_CALCPOST_DeepState_TestHarness_generation.cpp and RM_CALCPOST_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List RM_CALCPOST(Rcpp::NumericMatrix DAT2, Rcpp::NumericMatrix DAT2RESP, Rcpp::NumericMatrix PROBS, Rcpp::NumericVector KK);

TEST(sirt_deepstate_test,RM_CALCPOST_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix DAT2  = RcppDeepState_NumericMatrix();
  std::string DAT2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/RM_CALCPOST/AFL_RM_CALCPOST/afl_inputs/" + std::to_string(t) + "_DAT2.qs";
  qs::c_qsave(DAT2,DAT2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DAT2 values: "<< DAT2 << std::endl;
  NumericMatrix DAT2RESP  = RcppDeepState_NumericMatrix();
  std::string DAT2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/RM_CALCPOST/AFL_RM_CALCPOST/afl_inputs/" + std::to_string(t) + "_DAT2.qs";
  std::string DAT2RESP_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/RM_CALCPOST/AFL_RM_CALCPOST/afl_inputs/" + std::to_string(t) + "_DAT2RESP.qs";
  qs::c_qsave(DAT2RESP,DAT2RESP_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DAT2RESP values: "<< DAT2RESP << std::endl;
  NumericMatrix PROBS  = RcppDeepState_NumericMatrix();
  std::string PROBS_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/RM_CALCPOST/AFL_RM_CALCPOST/afl_inputs/" + std::to_string(t) + "_PROBS.qs";
  qs::c_qsave(PROBS,PROBS_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PROBS values: "<< PROBS << std::endl;
  NumericVector KK  = RcppDeepState_NumericVector();
  std::string KK_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/RM_CALCPOST/AFL_RM_CALCPOST/afl_inputs/" + std::to_string(t) + "_KK.qs";
  qs::c_qsave(KK,KK_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "KK values: "<< KK << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    RM_CALCPOST(DAT2,DAT2RESP,PROBS,KK);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
