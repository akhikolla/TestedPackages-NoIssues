// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// MML2_CALCPOST_V3_DeepState_TestHarness_generation.cpp and MML2_CALCPOST_V3_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List MML2_CALCPOST_V3(Rcpp::NumericMatrix DAT2, Rcpp::NumericMatrix DAT2RESP, Rcpp::NumericMatrix PROBS);

TEST(sirt_deepstate_test,MML2_CALCPOST_V3_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix DAT2  = RcppDeepState_NumericMatrix();
  std::string DAT2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/MML2_CALCPOST_V3/libFuzzer_MML2_CALCPOST_V3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DAT2.qs";
  qs::c_qsave(DAT2,DAT2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DAT2 values: "<< DAT2 << std::endl;
  NumericMatrix DAT2RESP  = RcppDeepState_NumericMatrix();
  std::string DAT2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/MML2_CALCPOST_V3/libFuzzer_MML2_CALCPOST_V3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DAT2.qs";
  std::string DAT2RESP_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/MML2_CALCPOST_V3/libFuzzer_MML2_CALCPOST_V3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DAT2RESP.qs";
  qs::c_qsave(DAT2RESP,DAT2RESP_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DAT2RESP values: "<< DAT2RESP << std::endl;
  NumericMatrix PROBS  = RcppDeepState_NumericMatrix();
  std::string PROBS_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/MML2_CALCPOST_V3/libFuzzer_MML2_CALCPOST_V3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_PROBS.qs";
  qs::c_qsave(PROBS,PROBS_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PROBS values: "<< PROBS << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    MML2_CALCPOST_V3(DAT2,DAT2RESP,PROBS);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
