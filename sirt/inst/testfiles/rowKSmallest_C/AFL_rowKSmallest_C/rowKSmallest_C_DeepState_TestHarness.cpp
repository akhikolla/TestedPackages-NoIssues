// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rowKSmallest_C_DeepState_TestHarness_generation.cpp and rowKSmallest_C_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List rowKSmallest_C(Rcpp::NumericMatrix MATR, Rcpp::IntegerVector KK1, Rcpp::NumericMatrix INDEXMATR, Rcpp::NumericMatrix RNMATR);

TEST(sirt_deepstate_test,rowKSmallest_C_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix MATR  = RcppDeepState_NumericMatrix();
  std::string MATR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/rowKSmallest_C/AFL_rowKSmallest_C/afl_inputs/" + std::to_string(t) + "_MATR.qs";
  qs::c_qsave(MATR,MATR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "MATR values: "<< MATR << std::endl;
  IntegerVector KK1  = RcppDeepState_IntegerVector();
  std::string KK1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/rowKSmallest_C/AFL_rowKSmallest_C/afl_inputs/" + std::to_string(t) + "_KK1.qs";
  qs::c_qsave(KK1,KK1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "KK1 values: "<< KK1 << std::endl;
  NumericMatrix INDEXMATR  = RcppDeepState_NumericMatrix();
  std::string INDEXMATR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/rowKSmallest_C/AFL_rowKSmallest_C/afl_inputs/" + std::to_string(t) + "_INDEXMATR.qs";
  qs::c_qsave(INDEXMATR,INDEXMATR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "INDEXMATR values: "<< INDEXMATR << std::endl;
  NumericMatrix RNMATR  = RcppDeepState_NumericMatrix();
  std::string RNMATR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/rowKSmallest_C/AFL_rowKSmallest_C/afl_inputs/" + std::to_string(t) + "_RNMATR.qs";
  qs::c_qsave(RNMATR,RNMATR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "RNMATR values: "<< RNMATR << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rowKSmallest_C(MATR,KK1,INDEXMATR,RNMATR);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
