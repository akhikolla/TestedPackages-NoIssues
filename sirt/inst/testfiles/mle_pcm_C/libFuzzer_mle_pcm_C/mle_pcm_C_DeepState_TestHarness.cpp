// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// mle_pcm_C_DeepState_TestHarness_generation.cpp and mle_pcm_C_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List mle_pcm_C(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_resp, Rcpp::NumericMatrix b, Rcpp::NumericVector a, Rcpp::NumericVector maxK, Rcpp::NumericVector theta0, double conv, int maxiter);

TEST(sirt_deepstate_test,mle_pcm_C_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix dat  = RcppDeepState_NumericMatrix();
  std::string dat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/mle_pcm_C/libFuzzer_mle_pcm_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dat.qs";
  qs::c_qsave(dat,dat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dat values: "<< dat << std::endl;
  NumericMatrix dat_resp  = RcppDeepState_NumericMatrix();
  std::string dat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/mle_pcm_C/libFuzzer_mle_pcm_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dat.qs";
  std::string dat_resp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/mle_pcm_C/libFuzzer_mle_pcm_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dat_resp.qs";
  qs::c_qsave(dat_resp,dat_resp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dat_resp values: "<< dat_resp << std::endl;
  NumericMatrix b  = RcppDeepState_NumericMatrix();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/mle_pcm_C/libFuzzer_mle_pcm_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_b.qs";
  qs::c_qsave(b,b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericVector a  = RcppDeepState_NumericVector();
  std::string a_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/mle_pcm_C/libFuzzer_mle_pcm_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_a.qs";
  qs::c_qsave(a,a_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a values: "<< a << std::endl;
  NumericVector maxK  = RcppDeepState_NumericVector();
  std::string maxK_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/mle_pcm_C/libFuzzer_mle_pcm_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxK.qs";
  qs::c_qsave(maxK,maxK_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxK values: "<< maxK << std::endl;
  NumericVector theta0  = RcppDeepState_NumericVector();
  std::string theta0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/mle_pcm_C/libFuzzer_mle_pcm_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theta0.qs";
  qs::c_qsave(theta0,theta0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta0 values: "<< theta0 << std::endl;
  NumericVector conv(1);
  conv[0]  = RcppDeepState_double();
  std::string conv_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/mle_pcm_C/libFuzzer_mle_pcm_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_conv.qs";
  qs::c_qsave(conv,conv_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "conv values: "<< conv << std::endl;
  IntegerVector maxiter(1);
  maxiter[0]  = RcppDeepState_int();
  std::string maxiter_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sirt/inst/testfiles/mle_pcm_C/libFuzzer_mle_pcm_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxiter.qs";
  qs::c_qsave(maxiter,maxiter_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxiter values: "<< maxiter << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    mle_pcm_C(dat,dat_resp,b,a,maxK,theta0,conv[0],maxiter[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
