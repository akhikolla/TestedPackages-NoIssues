// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// zerossC
String zerossC(String x);
RcppExport SEXP _VeryLargeIntegers_zerossC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(zerossC(x));
    return rcpp_result_gen;
END_RCPP
}
// zerosvC
IntegerVector zerosvC(IntegerVector x);
RcppExport SEXP _VeryLargeIntegers_zerosvC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(zerosvC(x));
    return rcpp_result_gen;
END_RCPP
}
// repC
IntegerVector repC(int x, int n);
RcppExport SEXP _VeryLargeIntegers_repC(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(repC(x, n));
    return rcpp_result_gen;
END_RCPP
}
// replaceC
String replaceC(std::string& s, const std::string& from, const std::string& to);
RcppExport SEXP _VeryLargeIntegers_replaceC(SEXP sSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(replaceC(s, from, to));
    return rcpp_result_gen;
END_RCPP
}
// maxC
int maxC(IntegerVector x);
RcppExport SEXP _VeryLargeIntegers_maxC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(maxC(x));
    return rcpp_result_gen;
END_RCPP
}
// appendC
IntegerVector appendC(IntegerVector a, IntegerVector b);
RcppExport SEXP _VeryLargeIntegers_appendC(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(appendC(a, b));
    return rcpp_result_gen;
END_RCPP
}
// selC
IntegerVector selC(IntegerVector a, int n, int m);
RcppExport SEXP _VeryLargeIntegers_selC(SEXP aSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(selC(a, n, m));
    return rcpp_result_gen;
END_RCPP
}
// addzerosC
String addzerosC(String x, int size);
RcppExport SEXP _VeryLargeIntegers_addzerosC(SEXP xSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(addzerosC(x, size));
    return rcpp_result_gen;
END_RCPP
}
// collapseC
String collapseC(IntegerVector x);
RcppExport SEXP _VeryLargeIntegers_collapseC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(collapseC(x));
    return rcpp_result_gen;
END_RCPP
}
// addrzerosC
String addrzerosC(String x, int n);
RcppExport SEXP _VeryLargeIntegers_addrzerosC(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(addrzerosC(x, n));
    return rcpp_result_gen;
END_RCPP
}
// equalC
List equalC(IntegerVector x, IntegerVector y);
RcppExport SEXP _VeryLargeIntegers_equalC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(equalC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fkzerosC
List fkzerosC(List x, int k);
RcppExport SEXP _VeryLargeIntegers_fkzerosC(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(fkzerosC(x, k));
    return rcpp_result_gen;
END_RCPP
}
// splitC
IntegerVector splitC(String x, int n);
RcppExport SEXP _VeryLargeIntegers_splitC(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(splitC(x, n));
    return rcpp_result_gen;
END_RCPP
}
// vliC
List vliC(String x);
RcppExport SEXP _VeryLargeIntegers_vliC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vliC(x));
    return rcpp_result_gen;
END_RCPP
}
// vlivC
List vlivC(int sign, IntegerVector x);
RcppExport SEXP _VeryLargeIntegers_vlivC(SEXP signSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sign(signSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vlivC(sign, x));
    return rcpp_result_gen;
END_RCPP
}
// printvliC
String printvliC(List x);
RcppExport SEXP _VeryLargeIntegers_printvliC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(printvliC(x));
    return rcpp_result_gen;
END_RCPP
}
// sumC
List sumC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_sumC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(sumC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// subC
List subC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_subC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(subC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// compareC
int compareC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_compareC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(compareC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// gtC
bool gtC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_gtC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(gtC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ltC
bool ltC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_ltC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ltC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// geqC
bool geqC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_geqC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(geqC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// leqC
bool leqC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_leqC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(leqC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// eqC
bool eqC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_eqC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(eqC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// neqC
bool neqC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_neqC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(neqC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mulbaseC
List mulbaseC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_mulbaseC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mulbaseC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mulC
List mulC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_mulC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mulC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// karC
List karC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_karC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(karC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// divp2C
IntegerVector divp2C(IntegerVector x, int k);
RcppExport SEXP _VeryLargeIntegers_divp2C(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(divp2C(x, k));
    return rcpp_result_gen;
END_RCPP
}
// divbaseC
List divbaseC(List x, List y);
RcppExport SEXP _VeryLargeIntegers_divbaseC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(divbaseC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// expC
List expC(List x, List n);
RcppExport SEXP _VeryLargeIntegers_expC(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(expC(x, n));
    return rcpp_result_gen;
END_RCPP
}
// rootC
List rootC(List x);
RcppExport SEXP _VeryLargeIntegers_rootC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rootC(x));
    return rcpp_result_gen;
END_RCPP
}
// rootkC
List rootkC(List x, List k);
RcppExport SEXP _VeryLargeIntegers_rootkC(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rootkC(x, k));
    return rcpp_result_gen;
END_RCPP
}
// onebitsC
int onebitsC(List x);
RcppExport SEXP _VeryLargeIntegers_onebitsC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(onebitsC(x));
    return rcpp_result_gen;
END_RCPP
}
// factbaseC
List factbaseC(List x);
RcppExport SEXP _VeryLargeIntegers_factbaseC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(factbaseC(x));
    return rcpp_result_gen;
END_RCPP
}
// randomvliC
List randomvliC(int n);
RcppExport SEXP _VeryLargeIntegers_randomvliC(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(randomvliC(n));
    return rcpp_result_gen;
END_RCPP
}
// negbinC
int negbinC(int r, double p);
RcppExport SEXP _VeryLargeIntegers_negbinC(SEXP rSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(negbinC(r, p));
    return rcpp_result_gen;
END_RCPP
}
// binomC
List binomC(List n, List k);
RcppExport SEXP _VeryLargeIntegers_binomC(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type n(nSEXP);
    Rcpp::traits::input_parameter< List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(binomC(n, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VeryLargeIntegers_zerossC", (DL_FUNC) &_VeryLargeIntegers_zerossC, 1},
    {"_VeryLargeIntegers_zerosvC", (DL_FUNC) &_VeryLargeIntegers_zerosvC, 1},
    {"_VeryLargeIntegers_repC", (DL_FUNC) &_VeryLargeIntegers_repC, 2},
    {"_VeryLargeIntegers_replaceC", (DL_FUNC) &_VeryLargeIntegers_replaceC, 3},
    {"_VeryLargeIntegers_maxC", (DL_FUNC) &_VeryLargeIntegers_maxC, 1},
    {"_VeryLargeIntegers_appendC", (DL_FUNC) &_VeryLargeIntegers_appendC, 2},
    {"_VeryLargeIntegers_selC", (DL_FUNC) &_VeryLargeIntegers_selC, 3},
    {"_VeryLargeIntegers_addzerosC", (DL_FUNC) &_VeryLargeIntegers_addzerosC, 2},
    {"_VeryLargeIntegers_collapseC", (DL_FUNC) &_VeryLargeIntegers_collapseC, 1},
    {"_VeryLargeIntegers_addrzerosC", (DL_FUNC) &_VeryLargeIntegers_addrzerosC, 2},
    {"_VeryLargeIntegers_equalC", (DL_FUNC) &_VeryLargeIntegers_equalC, 2},
    {"_VeryLargeIntegers_fkzerosC", (DL_FUNC) &_VeryLargeIntegers_fkzerosC, 2},
    {"_VeryLargeIntegers_splitC", (DL_FUNC) &_VeryLargeIntegers_splitC, 2},
    {"_VeryLargeIntegers_vliC", (DL_FUNC) &_VeryLargeIntegers_vliC, 1},
    {"_VeryLargeIntegers_vlivC", (DL_FUNC) &_VeryLargeIntegers_vlivC, 2},
    {"_VeryLargeIntegers_printvliC", (DL_FUNC) &_VeryLargeIntegers_printvliC, 1},
    {"_VeryLargeIntegers_sumC", (DL_FUNC) &_VeryLargeIntegers_sumC, 2},
    {"_VeryLargeIntegers_subC", (DL_FUNC) &_VeryLargeIntegers_subC, 2},
    {"_VeryLargeIntegers_compareC", (DL_FUNC) &_VeryLargeIntegers_compareC, 2},
    {"_VeryLargeIntegers_gtC", (DL_FUNC) &_VeryLargeIntegers_gtC, 2},
    {"_VeryLargeIntegers_ltC", (DL_FUNC) &_VeryLargeIntegers_ltC, 2},
    {"_VeryLargeIntegers_geqC", (DL_FUNC) &_VeryLargeIntegers_geqC, 2},
    {"_VeryLargeIntegers_leqC", (DL_FUNC) &_VeryLargeIntegers_leqC, 2},
    {"_VeryLargeIntegers_eqC", (DL_FUNC) &_VeryLargeIntegers_eqC, 2},
    {"_VeryLargeIntegers_neqC", (DL_FUNC) &_VeryLargeIntegers_neqC, 2},
    {"_VeryLargeIntegers_mulbaseC", (DL_FUNC) &_VeryLargeIntegers_mulbaseC, 2},
    {"_VeryLargeIntegers_mulC", (DL_FUNC) &_VeryLargeIntegers_mulC, 2},
    {"_VeryLargeIntegers_karC", (DL_FUNC) &_VeryLargeIntegers_karC, 2},
    {"_VeryLargeIntegers_divp2C", (DL_FUNC) &_VeryLargeIntegers_divp2C, 2},
    {"_VeryLargeIntegers_divbaseC", (DL_FUNC) &_VeryLargeIntegers_divbaseC, 2},
    {"_VeryLargeIntegers_expC", (DL_FUNC) &_VeryLargeIntegers_expC, 2},
    {"_VeryLargeIntegers_rootC", (DL_FUNC) &_VeryLargeIntegers_rootC, 1},
    {"_VeryLargeIntegers_rootkC", (DL_FUNC) &_VeryLargeIntegers_rootkC, 2},
    {"_VeryLargeIntegers_onebitsC", (DL_FUNC) &_VeryLargeIntegers_onebitsC, 1},
    {"_VeryLargeIntegers_factbaseC", (DL_FUNC) &_VeryLargeIntegers_factbaseC, 1},
    {"_VeryLargeIntegers_randomvliC", (DL_FUNC) &_VeryLargeIntegers_randomvliC, 1},
    {"_VeryLargeIntegers_negbinC", (DL_FUNC) &_VeryLargeIntegers_negbinC, 2},
    {"_VeryLargeIntegers_binomC", (DL_FUNC) &_VeryLargeIntegers_binomC, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_VeryLargeIntegers(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
