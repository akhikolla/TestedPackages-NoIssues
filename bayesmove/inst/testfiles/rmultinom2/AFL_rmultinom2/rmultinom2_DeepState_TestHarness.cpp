// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rmultinom2_DeepState_TestHarness_generation.cpp and rmultinom2_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerVector rmultinom2(NumericVector prob, int n, NumericVector randu, int nmaxclust);

TEST(bayesmove_deepstate_test,rmultinom2_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector prob  = RcppDeepState_NumericVector();
  std::string prob_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bayesmove/inst/testfiles/rmultinom2/AFL_rmultinom2/afl_inputs/" + std::to_string(t) + "_prob.qs";
  qs::c_qsave(prob,prob_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prob values: "<< prob << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bayesmove/inst/testfiles/rmultinom2/AFL_rmultinom2/afl_inputs/" + std::to_string(t) + "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector randu  = RcppDeepState_NumericVector();
  std::string randu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bayesmove/inst/testfiles/rmultinom2/AFL_rmultinom2/afl_inputs/" + std::to_string(t) + "_randu.qs";
  qs::c_qsave(randu,randu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "randu values: "<< randu << std::endl;
  IntegerVector nmaxclust(1);
  nmaxclust[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bayesmove/inst/testfiles/rmultinom2/AFL_rmultinom2/afl_inputs/" + std::to_string(t) + "_n.qs";
  std::string nmaxclust_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bayesmove/inst/testfiles/rmultinom2/AFL_rmultinom2/afl_inputs/" + std::to_string(t) + "_nmaxclust.qs";
  qs::c_qsave(nmaxclust,nmaxclust_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nmaxclust values: "<< nmaxclust << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rmultinom2(prob,n[0],randu,nmaxclust[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
