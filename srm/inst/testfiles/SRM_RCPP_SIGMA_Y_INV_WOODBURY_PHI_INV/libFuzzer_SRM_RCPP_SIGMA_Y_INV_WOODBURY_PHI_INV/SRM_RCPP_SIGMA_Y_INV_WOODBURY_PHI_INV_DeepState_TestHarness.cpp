// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// SRM_RCPP_SIGMA_Y_INV_WOODBURY_PHI_INV_DeepState_TestHarness_generation.cpp and SRM_RCPP_SIGMA_Y_INV_WOODBURY_PHI_INV_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericMatrix SRM_RCPP_SIGMA_Y_INV_WOODBURY_PHI_INV(Rcpp::NumericMatrix SIGMA_U_INV, int NI);

TEST(srm_deepstate_test,SRM_RCPP_SIGMA_Y_INV_WOODBURY_PHI_INV_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix SIGMA_U_INV  = RcppDeepState_NumericMatrix();
  std::string SIGMA_U_INV_t = "/home/akhila/fuzzer_packages/fuzzedpackages/srm/inst/testfiles/SRM_RCPP_SIGMA_Y_INV_WOODBURY_PHI_INV/libFuzzer_SRM_RCPP_SIGMA_Y_INV_WOODBURY_PHI_INV/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_SIGMA_U_INV.qs";
  qs::c_qsave(SIGMA_U_INV,SIGMA_U_INV_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "SIGMA_U_INV values: "<< SIGMA_U_INV << std::endl;
  IntegerVector NI(1);
  NI[0]  = RcppDeepState_int();
  std::string NI_t = "/home/akhila/fuzzer_packages/fuzzedpackages/srm/inst/testfiles/SRM_RCPP_SIGMA_Y_INV_WOODBURY_PHI_INV/libFuzzer_SRM_RCPP_SIGMA_Y_INV_WOODBURY_PHI_INV/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_NI.qs";
  qs::c_qsave(NI,NI_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NI values: "<< NI << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    SRM_RCPP_SIGMA_Y_INV_WOODBURY_PHI_INV(SIGMA_U_INV,NI[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
