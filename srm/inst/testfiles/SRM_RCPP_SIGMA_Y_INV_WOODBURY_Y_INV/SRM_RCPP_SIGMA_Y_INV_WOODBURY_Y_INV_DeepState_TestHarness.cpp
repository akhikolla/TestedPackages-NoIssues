// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// SRM_RCPP_SIGMA_Y_INV_WOODBURY_Y_INV_DeepState_TestHarness_generation.cpp and SRM_RCPP_SIGMA_Y_INV_WOODBURY_Y_INV_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericMatrix SRM_RCPP_SIGMA_Y_INV_WOODBURY_Y_INV(Rcpp::NumericMatrix ZA, Rcpp::NumericMatrix T_inv, Rcpp::NumericMatrix A_inv);

TEST(srm_deepstate_test,SRM_RCPP_SIGMA_Y_INV_WOODBURY_Y_INV_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix ZA  = RcppDeepState_NumericMatrix();
  qs::c_qsave(ZA,"/home/akhila/fuzzer_packages/fuzzedpackages/srm/inst/testfiles/SRM_RCPP_SIGMA_Y_INV_WOODBURY_Y_INV/inputs/ZA.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ZA values: "<< ZA << std::endl;
  NumericMatrix T_inv  = RcppDeepState_NumericMatrix();
  qs::c_qsave(T_inv,"/home/akhila/fuzzer_packages/fuzzedpackages/srm/inst/testfiles/SRM_RCPP_SIGMA_Y_INV_WOODBURY_Y_INV/inputs/T_inv.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "T_inv values: "<< T_inv << std::endl;
  NumericMatrix A_inv  = RcppDeepState_NumericMatrix();
  qs::c_qsave(A_inv,"/home/akhila/fuzzer_packages/fuzzedpackages/srm/inst/testfiles/SRM_RCPP_SIGMA_Y_INV_WOODBURY_Y_INV/inputs/A_inv.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "A_inv values: "<< A_inv << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    SRM_RCPP_SIGMA_Y_INV_WOODBURY_Y_INV(ZA,T_inv,A_inv);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
