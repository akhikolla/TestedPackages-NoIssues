// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Kmatfunc
arma::mat Kmatfunc(arma::mat Markers);
RcppExport SEXP _GenomicMating_Kmatfunc(SEXP MarkersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Markers(MarkersSEXP);
    rcpp_result_gen = Rcpp::wrap(Kmatfunc(Markers));
    return rcpp_result_gen;
END_RCPP
}
// getstatsM1
arma::vec getstatsM1(arma::mat Markers, arma::mat K, arma::vec markereffects, arma::mat P);
RcppExport SEXP _GenomicMating_getstatsM1(SEXP MarkersSEXP, SEXP KSEXP, SEXP markereffectsSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Markers(MarkersSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type markereffects(markereffectsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(getstatsM1(Markers, K, markereffects, P));
    return rcpp_result_gen;
END_RCPP
}
// getstatsM2
arma::vec getstatsM2(arma::mat Markers, arma::mat K, arma::vec markereffects, arma::mat P, arma::mat markermap, unsigned char type, unsigned int generation);
RcppExport SEXP _GenomicMating_getstatsM2(SEXP MarkersSEXP, SEXP KSEXP, SEXP markereffectsSEXP, SEXP PSEXP, SEXP markermapSEXP, SEXP typeSEXP, SEXP generationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Markers(MarkersSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type markereffects(markereffectsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type markermap(markermapSEXP);
    Rcpp::traits::input_parameter< unsigned char >::type type(typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type generation(generationSEXP);
    rcpp_result_gen = Rcpp::wrap(getstatsM2(Markers, K, markereffects, P, markermap, type, generation));
    return rcpp_result_gen;
END_RCPP
}
// getstatsM3
arma::vec getstatsM3(arma::mat Markers, arma::mat K, arma::vec markereffects, arma::mat P);
RcppExport SEXP _GenomicMating_getstatsM3(SEXP MarkersSEXP, SEXP KSEXP, SEXP markereffectsSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Markers(MarkersSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type markereffects(markereffectsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(getstatsM3(Markers, K, markereffects, P));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GenomicMating_Kmatfunc", (DL_FUNC) &_GenomicMating_Kmatfunc, 1},
    {"_GenomicMating_getstatsM1", (DL_FUNC) &_GenomicMating_getstatsM1, 4},
    {"_GenomicMating_getstatsM2", (DL_FUNC) &_GenomicMating_getstatsM2, 7},
    {"_GenomicMating_getstatsM3", (DL_FUNC) &_GenomicMating_getstatsM3, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_GenomicMating(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
