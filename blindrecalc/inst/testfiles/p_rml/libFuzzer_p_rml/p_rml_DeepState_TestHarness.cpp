// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// p_rml_DeepState_TestHarness_generation.cpp and p_rml_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector p_rml(double p_c, double p_e, double r, double margin);

TEST(blindrecalc_deepstate_test,p_rml_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector p_c(1);
  p_c[0]  = RcppDeepState_double();
  std::string p_c_t = "/home/akhila/fuzzer_packages/fuzzedpackages/blindrecalc/inst/testfiles/p_rml/libFuzzer_p_rml/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p_c.qs";
  qs::c_qsave(p_c,p_c_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p_c values: "<< p_c << std::endl;
  NumericVector p_e(1);
  p_e[0]  = RcppDeepState_double();
  std::string p_e_t = "/home/akhila/fuzzer_packages/fuzzedpackages/blindrecalc/inst/testfiles/p_rml/libFuzzer_p_rml/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p_e.qs";
  qs::c_qsave(p_e,p_e_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p_e values: "<< p_e << std::endl;
  NumericVector r(1);
  r[0]  = RcppDeepState_double();
  std::string r_t = "/home/akhila/fuzzer_packages/fuzzedpackages/blindrecalc/inst/testfiles/p_rml/libFuzzer_p_rml/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_r.qs";
  qs::c_qsave(r,r_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "r values: "<< r << std::endl;
  NumericVector margin(1);
  margin[0]  = RcppDeepState_double();
  std::string margin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/blindrecalc/inst/testfiles/p_rml/libFuzzer_p_rml/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_margin.qs";
  qs::c_qsave(margin,margin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "margin values: "<< margin << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    p_rml(p_c[0],p_e[0],r[0],margin[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
