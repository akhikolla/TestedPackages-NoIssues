// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// test_RRG_sampleExpoExpoLimit_DeepState_TestHarness_generation.cpp and test_RRG_sampleExpoExpoLimit_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double test_RRG_sampleExpoExpoLimit(double lambda, double b, double limit);

TEST(DEploid_deepstate_test,test_RRG_sampleExpoExpoLimit_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  qs::c_qsave(lambda,"/home/akhila/fuzzer_packages/fuzzedpackages/DEploid/inst/testfiles/test_RRG_sampleExpoExpoLimit/inputs/lambda.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector b(1);
  b[0]  = RcppDeepState_double();
  qs::c_qsave(b,"/home/akhila/fuzzer_packages/fuzzedpackages/DEploid/inst/testfiles/test_RRG_sampleExpoExpoLimit/inputs/b.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericVector limit(1);
  limit[0]  = RcppDeepState_double();
  qs::c_qsave(limit,"/home/akhila/fuzzer_packages/fuzzedpackages/DEploid/inst/testfiles/test_RRG_sampleExpoExpoLimit/inputs/limit.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "limit values: "<< limit << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    test_RRG_sampleExpoExpoLimit(lambda[0],b[0],limit[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
