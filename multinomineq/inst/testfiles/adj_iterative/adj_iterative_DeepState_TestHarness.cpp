// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// adj_iterative_DeepState_TestHarness_generation.cpp and adj_iterative_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector adj_iterative(NumericVector par, const double c, const double DIFF_BOUND);

TEST(multinomineq_deepstate_test,adj_iterative_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector par  = RcppDeepState_NumericVector();
  qs::c_qsave(par,"/home/akhila/fuzzer_packages/fuzzedpackages/multinomineq/inst/testfiles/adj_iterative/inputs/par.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "par values: "<< par << std::endl;
  NumericVector c(1);
  c[0]  = RcppDeepState_double();
  qs::c_qsave(c,"/home/akhila/fuzzer_packages/fuzzedpackages/multinomineq/inst/testfiles/adj_iterative/inputs/c.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "c values: "<< c << std::endl;
  NumericVector DIFF_BOUND(1);
  DIFF_BOUND[0]  = RcppDeepState_double();
  qs::c_qsave(DIFF_BOUND,"/home/akhila/fuzzer_packages/fuzzedpackages/multinomineq/inst/testfiles/adj_iterative/inputs/DIFF_BOUND.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DIFF_BOUND values: "<< DIFF_BOUND << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    adj_iterative(par,c[0],DIFF_BOUND[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
