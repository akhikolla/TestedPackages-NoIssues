// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rgamma_trunc_DeepState_TestHarness_generation.cpp and rgamma_trunc_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double rgamma_trunc(const double shape, const double rate, const double min, const double max);

TEST(multinomineq_deepstate_test,rgamma_trunc_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector shape(1);
  shape[0]  = RcppDeepState_double();
  qs::c_qsave(shape,"/home/akhila/fuzzer_packages/fuzzedpackages/multinomineq/inst/testfiles/rgamma_trunc/inputs/shape.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "shape values: "<< shape << std::endl;
  NumericVector rate(1);
  rate[0]  = RcppDeepState_double();
  qs::c_qsave(rate,"/home/akhila/fuzzer_packages/fuzzedpackages/multinomineq/inst/testfiles/rgamma_trunc/inputs/rate.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rate values: "<< rate << std::endl;
  NumericVector min(1);
  min[0]  = RcppDeepState_double();
  qs::c_qsave(min,"/home/akhila/fuzzer_packages/fuzzedpackages/multinomineq/inst/testfiles/rgamma_trunc/inputs/min.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min values: "<< min << std::endl;
  NumericVector max(1);
  max[0]  = RcppDeepState_double();
  qs::c_qsave(max,"/home/akhila/fuzzer_packages/fuzzedpackages/multinomineq/inst/testfiles/rgamma_trunc/inputs/max.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max values: "<< max << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rgamma_trunc(shape[0],rate[0],min[0],max[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
