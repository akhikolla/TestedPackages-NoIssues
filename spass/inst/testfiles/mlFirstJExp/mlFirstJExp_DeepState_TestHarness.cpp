// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// mlFirstJExp_DeepState_TestHarness_generation.cpp and mlFirstJExp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix mlFirstJExp(NumericVector y, double rho, double kf, int tp, int type, int approx);

TEST(spass_deepstate_test,mlFirstJExp_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  qs::c_qsave(y,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstJExp/inputs/y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  qs::c_qsave(rho,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstJExp/inputs/rho.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericVector kf(1);
  kf[0]  = RcppDeepState_double();
  qs::c_qsave(kf,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstJExp/inputs/kf.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kf values: "<< kf << std::endl;
  IntegerVector tp(1);
  tp[0]  = RcppDeepState_int();
  qs::c_qsave(tp,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstJExp/inputs/tp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tp values: "<< tp << std::endl;
  IntegerVector type(1);
  type[0]  = RcppDeepState_int();
  qs::c_qsave(type,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstJExp/inputs/type.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "type values: "<< type << std::endl;
  IntegerVector approx(1);
  approx[0]  = RcppDeepState_int();
  qs::c_qsave(approx,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstJExp/inputs/approx.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "approx values: "<< approx << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    mlFirstJExp(y,rho[0],kf[0],tp[0],type[0],approx[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
