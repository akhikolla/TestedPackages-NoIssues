// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// minFuncMult_DeepState_TestHarness_generation.cpp and minFuncMult_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double minFuncMult(NumericVector x, NumericMatrix daten, NumericVector dataNA, int n);

TEST(spass_deepstate_test,minFuncMult_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFuncMult/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericMatrix daten  = RcppDeepState_NumericMatrix();
  qs::c_qsave(daten,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFuncMult/inputs/daten.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "daten values: "<< daten << std::endl;
  NumericVector dataNA  = RcppDeepState_NumericVector();
  qs::c_qsave(dataNA,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFuncMult/inputs/dataNA.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dataNA values: "<< dataNA << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  qs::c_qsave(n,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFuncMult/inputs/n.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    minFuncMult(x,daten,dataNA,n[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
