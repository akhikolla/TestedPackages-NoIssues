// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// minFunc_DeepState_TestHarness_generation.cpp and minFunc_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double minFunc(NumericVector x, NumericVector daten, int dataNA);

TEST(spass_deepstate_test,minFunc_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFunc/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector daten  = RcppDeepState_NumericVector();
  qs::c_qsave(daten,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFunc/inputs/daten.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "daten values: "<< daten << std::endl;
  IntegerVector dataNA(1);
  dataNA[0]  = RcppDeepState_int();
  qs::c_qsave(dataNA,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFunc/inputs/dataNA.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dataNA values: "<< dataNA << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    minFunc(x,daten,dataNA[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
