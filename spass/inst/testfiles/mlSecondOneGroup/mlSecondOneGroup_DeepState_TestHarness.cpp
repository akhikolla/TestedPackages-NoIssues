// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// mlSecondOneGroup_DeepState_TestHarness_generation.cpp and mlSecondOneGroup_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double mlSecondOneGroup(double rho, NumericVector y, NumericMatrix groupC, int nC, NumericVector tpC, int type);

TEST(spass_deepstate_test,mlSecondOneGroup_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  qs::c_qsave(rho,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlSecondOneGroup/inputs/rho.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  qs::c_qsave(y,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlSecondOneGroup/inputs/y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericMatrix groupC  = RcppDeepState_NumericMatrix();
  qs::c_qsave(groupC,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlSecondOneGroup/inputs/groupC.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "groupC values: "<< groupC << std::endl;
  IntegerVector nC(1);
  nC[0]  = RcppDeepState_int();
  qs::c_qsave(nC,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlSecondOneGroup/inputs/nC.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nC values: "<< nC << std::endl;
  NumericVector tpC  = RcppDeepState_NumericVector();
  qs::c_qsave(tpC,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlSecondOneGroup/inputs/tpC.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tpC values: "<< tpC << std::endl;
  IntegerVector type(1);
  type[0]  = RcppDeepState_int();
  qs::c_qsave(type,"/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlSecondOneGroup/inputs/type.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "type values: "<< type << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    mlSecondOneGroup(rho[0],y,groupC,nC[0],tpC,type[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
