// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// mlFirstBlinded_DeepState_TestHarness_generation.cpp and mlFirstBlinded_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double mlFirstBlinded(NumericVector y, NumericMatrix group, int n, NumericVector tp, int type, double theta, double k);

TEST(spass_deepstate_test,mlFirstBlinded_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstBlinded/AFL_mlFirstBlinded/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericMatrix group  = RcppDeepState_NumericMatrix();
  std::string group_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstBlinded/AFL_mlFirstBlinded/afl_inputs/" + std::to_string(t) + "_group.qs";
  qs::c_qsave(group,group_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "group values: "<< group << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstBlinded/AFL_mlFirstBlinded/afl_inputs/" + std::to_string(t) + "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector tp  = RcppDeepState_NumericVector();
  std::string tp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstBlinded/AFL_mlFirstBlinded/afl_inputs/" + std::to_string(t) + "_tp.qs";
  qs::c_qsave(tp,tp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tp values: "<< tp << std::endl;
  IntegerVector type(1);
  type[0]  = RcppDeepState_int();
  std::string type_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstBlinded/AFL_mlFirstBlinded/afl_inputs/" + std::to_string(t) + "_type.qs";
  qs::c_qsave(type,type_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "type values: "<< type << std::endl;
  NumericVector theta(1);
  theta[0]  = RcppDeepState_double();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstBlinded/AFL_mlFirstBlinded/afl_inputs/" + std::to_string(t) + "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector k(1);
  k[0]  = RcppDeepState_double();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstBlinded/AFL_mlFirstBlinded/afl_inputs/" + std::to_string(t) + "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    mlFirstBlinded(y,group,n[0],tp,type[0],theta[0],k[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
