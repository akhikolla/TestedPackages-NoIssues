// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// mlFirstHObs_DeepState_TestHarness_generation.cpp and mlFirstHObs_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix mlFirstHObs(NumericVector y, NumericMatrix groupE, NumericMatrix groupC, int nE, int nC, NumericVector tpE, NumericVector tpC, int type);

TEST(spass_deepstate_test,mlFirstHObs_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstHObs/AFL_mlFirstHObs/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericMatrix groupE  = RcppDeepState_NumericMatrix();
  std::string groupE_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstHObs/AFL_mlFirstHObs/afl_inputs/" + std::to_string(t) + "_groupE.qs";
  qs::c_qsave(groupE,groupE_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "groupE values: "<< groupE << std::endl;
  NumericMatrix groupC  = RcppDeepState_NumericMatrix();
  std::string groupC_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstHObs/AFL_mlFirstHObs/afl_inputs/" + std::to_string(t) + "_groupC.qs";
  qs::c_qsave(groupC,groupC_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "groupC values: "<< groupC << std::endl;
  IntegerVector nE(1);
  nE[0]  = RcppDeepState_int();
  std::string nE_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstHObs/AFL_mlFirstHObs/afl_inputs/" + std::to_string(t) + "_nE.qs";
  qs::c_qsave(nE,nE_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nE values: "<< nE << std::endl;
  IntegerVector nC(1);
  nC[0]  = RcppDeepState_int();
  std::string nC_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstHObs/AFL_mlFirstHObs/afl_inputs/" + std::to_string(t) + "_nC.qs";
  qs::c_qsave(nC,nC_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nC values: "<< nC << std::endl;
  NumericVector tpE  = RcppDeepState_NumericVector();
  std::string tpE_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstHObs/AFL_mlFirstHObs/afl_inputs/" + std::to_string(t) + "_tpE.qs";
  qs::c_qsave(tpE,tpE_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tpE values: "<< tpE << std::endl;
  NumericVector tpC  = RcppDeepState_NumericVector();
  std::string tpC_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstHObs/AFL_mlFirstHObs/afl_inputs/" + std::to_string(t) + "_tpC.qs";
  qs::c_qsave(tpC,tpC_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tpC values: "<< tpC << std::endl;
  IntegerVector type(1);
  type[0]  = RcppDeepState_int();
  std::string type_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/mlFirstHObs/AFL_mlFirstHObs/afl_inputs/" + std::to_string(t) + "_type.qs";
  qs::c_qsave(type,type_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "type values: "<< type << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    mlFirstHObs(y,groupE,groupC,nE[0],nC[0],tpE,tpC,type[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
