// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// minFuncBlinded_DeepState_TestHarness_generation.cpp and minFuncBlinded_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double minFuncBlinded(NumericVector x, NumericMatrix daten, NumericVector dataNA, NumericVector n, double delta);

TEST(spass_deepstate_test,minFuncBlinded_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFuncBlinded/libFuzzer_minFuncBlinded/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericMatrix daten  = RcppDeepState_NumericMatrix();
  std::string daten_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFuncBlinded/libFuzzer_minFuncBlinded/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_daten.qs";
  qs::c_qsave(daten,daten_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "daten values: "<< daten << std::endl;
  NumericVector dataNA  = RcppDeepState_NumericVector();
  std::string dataNA_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFuncBlinded/libFuzzer_minFuncBlinded/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dataNA.qs";
  qs::c_qsave(dataNA,dataNA_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dataNA values: "<< dataNA << std::endl;
  NumericVector n  = RcppDeepState_NumericVector();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFuncBlinded/libFuzzer_minFuncBlinded/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector delta(1);
  delta[0]  = RcppDeepState_double();
  std::string delta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spass/inst/testfiles/minFuncBlinded/libFuzzer_minFuncBlinded/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_delta.qs";
  qs::c_qsave(delta,delta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "delta values: "<< delta << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    minFuncBlinded(x,daten,dataNA,n,delta[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
