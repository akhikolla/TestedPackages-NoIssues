// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// exp_smooth_pillars__DeepState_TestHarness_generation.cpp and exp_smooth_pillars__DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector exp_smooth_pillars_(NumericVector arr, double tau, int l);

TEST(detrendr_deepstate_test,exp_smooth_pillars__test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector arr  = RcppDeepState_NumericVector();
  qs::c_qsave(arr,"/home/akhila/fuzzer_packages/fuzzedpackages/detrendr/inst/testfiles/exp_smooth_pillars_/inputs/arr.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "arr values: "<< arr << std::endl;
  NumericVector tau(1);
  tau[0]  = RcppDeepState_double();
  qs::c_qsave(tau,"/home/akhila/fuzzer_packages/fuzzedpackages/detrendr/inst/testfiles/exp_smooth_pillars_/inputs/tau.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau values: "<< tau << std::endl;
  IntegerVector l(1);
  l[0]  = RcppDeepState_int();
  qs::c_qsave(l,"/home/akhila/fuzzer_packages/fuzzedpackages/detrendr/inst/testfiles/exp_smooth_pillars_/inputs/l.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "l values: "<< l << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    exp_smooth_pillars_(arr,tau[0],l[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
