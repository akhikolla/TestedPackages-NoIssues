// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// tam_rcpp_irt_likelihood_cfa_DeepState_TestHarness_generation.cpp and tam_rcpp_irt_likelihood_cfa_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List tam_rcpp_irt_likelihood_cfa(Rcpp::NumericMatrix data, Rcpp::NumericVector nu, Rcpp::NumericMatrix psi, Rcpp::NumericMatrix L, Rcpp::NumericMatrix theta);

TEST(TAM_deepstate_test,tam_rcpp_irt_likelihood_cfa_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix data  = RcppDeepState_NumericMatrix();
  qs::c_qsave(data,"/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_irt_likelihood_cfa/inputs/data.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  NumericVector nu  = RcppDeepState_NumericVector();
  qs::c_qsave(nu,"/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_irt_likelihood_cfa/inputs/nu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nu values: "<< nu << std::endl;
  NumericMatrix psi  = RcppDeepState_NumericMatrix();
  qs::c_qsave(psi,"/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_irt_likelihood_cfa/inputs/psi.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psi values: "<< psi << std::endl;
  NumericMatrix L  = RcppDeepState_NumericMatrix();
  qs::c_qsave(L,"/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_irt_likelihood_cfa/inputs/L.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "L values: "<< L << std::endl;
  NumericMatrix theta  = RcppDeepState_NumericMatrix();
  qs::c_qsave(theta,"/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_irt_likelihood_cfa/inputs/theta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    tam_rcpp_irt_likelihood_cfa(data,nu,psi,L,theta);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
