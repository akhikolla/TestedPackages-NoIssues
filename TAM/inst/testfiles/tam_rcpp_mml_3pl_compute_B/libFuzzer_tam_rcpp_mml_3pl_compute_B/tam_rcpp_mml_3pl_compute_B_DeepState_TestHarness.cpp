// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// tam_rcpp_mml_3pl_compute_B_DeepState_TestHarness_generation.cpp and tam_rcpp_mml_3pl_compute_B_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List tam_rcpp_mml_3pl_compute_B(Rcpp::NumericMatrix Edes, Rcpp::NumericVector gammaslope, Rcpp::NumericVector dimE);

TEST(TAM_deepstate_test,tam_rcpp_mml_3pl_compute_B_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix Edes  = RcppDeepState_NumericMatrix();
  std::string Edes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_compute_B/libFuzzer_tam_rcpp_mml_3pl_compute_B/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Edes.qs";
  qs::c_qsave(Edes,Edes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Edes values: "<< Edes << std::endl;
  NumericVector gammaslope  = RcppDeepState_NumericVector();
  std::string gammaslope_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_compute_B/libFuzzer_tam_rcpp_mml_3pl_compute_B/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_gammaslope.qs";
  qs::c_qsave(gammaslope,gammaslope_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gammaslope values: "<< gammaslope << std::endl;
  NumericVector dimE  = RcppDeepState_NumericVector();
  std::string dimE_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_compute_B/libFuzzer_tam_rcpp_mml_3pl_compute_B/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dimE.qs";
  qs::c_qsave(dimE,dimE_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dimE values: "<< dimE << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    tam_rcpp_mml_3pl_compute_B(Edes,gammaslope,dimE);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
