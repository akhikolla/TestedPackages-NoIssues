// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// tam_rcpp_mml_3pl_slca_deriv_DeepState_TestHarness_generation.cpp and tam_rcpp_mml_3pl_slca_deriv_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List tam_rcpp_mml_3pl_slca_deriv(Rcpp::NumericMatrix XdesM, Rcpp::NumericVector dimXdes, Rcpp::NumericVector Xlambda, Rcpp::NumericVector probs, Rcpp::NumericVector nik, Rcpp::NumericVector Nik, Rcpp::NumericVector guess, Rcpp::NumericVector probs0);

TEST(TAM_deepstate_test,tam_rcpp_mml_3pl_slca_deriv_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix XdesM  = RcppDeepState_NumericMatrix();
  std::string XdesM_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_slca_deriv/libFuzzer_tam_rcpp_mml_3pl_slca_deriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_XdesM.qs";
  qs::c_qsave(XdesM,XdesM_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "XdesM values: "<< XdesM << std::endl;
  NumericVector dimXdes  = RcppDeepState_NumericVector();
  std::string dimXdes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_slca_deriv/libFuzzer_tam_rcpp_mml_3pl_slca_deriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dimXdes.qs";
  qs::c_qsave(dimXdes,dimXdes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dimXdes values: "<< dimXdes << std::endl;
  NumericVector Xlambda  = RcppDeepState_NumericVector();
  std::string Xlambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_slca_deriv/libFuzzer_tam_rcpp_mml_3pl_slca_deriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Xlambda.qs";
  qs::c_qsave(Xlambda,Xlambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Xlambda values: "<< Xlambda << std::endl;
  NumericVector probs  = RcppDeepState_NumericVector();
  std::string probs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_slca_deriv/libFuzzer_tam_rcpp_mml_3pl_slca_deriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_probs.qs";
  qs::c_qsave(probs,probs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "probs values: "<< probs << std::endl;
  NumericVector nik  = RcppDeepState_NumericVector();
  std::string nik_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_slca_deriv/libFuzzer_tam_rcpp_mml_3pl_slca_deriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nik.qs";
  qs::c_qsave(nik,nik_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nik values: "<< nik << std::endl;
  NumericVector Nik  = RcppDeepState_NumericVector();
  std::string Nik_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_slca_deriv/libFuzzer_tam_rcpp_mml_3pl_slca_deriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Nik.qs";
  qs::c_qsave(Nik,Nik_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Nik values: "<< Nik << std::endl;
  NumericVector guess  = RcppDeepState_NumericVector();
  std::string guess_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_slca_deriv/libFuzzer_tam_rcpp_mml_3pl_slca_deriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_guess.qs";
  qs::c_qsave(guess,guess_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "guess values: "<< guess << std::endl;
  NumericVector probs0  = RcppDeepState_NumericVector();
  std::string probs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_slca_deriv/libFuzzer_tam_rcpp_mml_3pl_slca_deriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_probs.qs";
  std::string probs0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_mml_3pl_slca_deriv/libFuzzer_tam_rcpp_mml_3pl_slca_deriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_probs0.qs";
  qs::c_qsave(probs0,probs0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "probs0 values: "<< probs0 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    tam_rcpp_mml_3pl_slca_deriv(XdesM,dimXdes,Xlambda,probs,nik,Nik,guess,probs0);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
