// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// tam_rcpp_calc_prob_DeepState_TestHarness_generation.cpp and tam_rcpp_calc_prob_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List tam_rcpp_calc_prob(Rcpp::NumericVector A, Rcpp::IntegerVector dimA, Rcpp::NumericVector xsi, Rcpp::IntegerVector maxcat, Rcpp::NumericMatrix AXsi0, Rcpp::IntegerVector iIndex, Rcpp::NumericMatrix theta, Rcpp::NumericVector B);

TEST(TAM_deepstate_test,tam_rcpp_calc_prob_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector A  = RcppDeepState_NumericVector();
  std::string A_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_calc_prob/libFuzzer_tam_rcpp_calc_prob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_A.qs";
  qs::c_qsave(A,A_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "A values: "<< A << std::endl;
  IntegerVector dimA  = RcppDeepState_IntegerVector();
  std::string dimA_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_calc_prob/libFuzzer_tam_rcpp_calc_prob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dimA.qs";
  qs::c_qsave(dimA,dimA_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dimA values: "<< dimA << std::endl;
  NumericVector xsi  = RcppDeepState_NumericVector();
  std::string xsi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_calc_prob/libFuzzer_tam_rcpp_calc_prob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xsi.qs";
  qs::c_qsave(xsi,xsi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xsi values: "<< xsi << std::endl;
  IntegerVector maxcat  = RcppDeepState_IntegerVector();
  std::string maxcat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_calc_prob/libFuzzer_tam_rcpp_calc_prob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxcat.qs";
  qs::c_qsave(maxcat,maxcat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxcat values: "<< maxcat << std::endl;
  NumericMatrix AXsi0  = RcppDeepState_NumericMatrix();
  std::string A_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_calc_prob/libFuzzer_tam_rcpp_calc_prob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_A.qs";
  std::string AXsi0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_calc_prob/libFuzzer_tam_rcpp_calc_prob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_AXsi0.qs";
  qs::c_qsave(AXsi0,AXsi0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AXsi0 values: "<< AXsi0 << std::endl;
  IntegerVector iIndex  = RcppDeepState_IntegerVector();
  std::string iIndex_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_calc_prob/libFuzzer_tam_rcpp_calc_prob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_iIndex.qs";
  qs::c_qsave(iIndex,iIndex_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "iIndex values: "<< iIndex << std::endl;
  NumericMatrix theta  = RcppDeepState_NumericMatrix();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_calc_prob/libFuzzer_tam_rcpp_calc_prob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector B  = RcppDeepState_NumericVector();
  std::string B_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_calc_prob/libFuzzer_tam_rcpp_calc_prob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_B.qs";
  qs::c_qsave(B,B_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "B values: "<< B << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    tam_rcpp_calc_prob(A,dimA,xsi,maxcat,AXsi0,iIndex,theta,B);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
