// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// tam_rcpp_prior_normal_density_equal_means_DeepState_TestHarness_generation.cpp and tam_rcpp_prior_normal_density_equal_means_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector tam_rcpp_prior_normal_density_equal_means(Rcpp::NumericMatrix theta, Rcpp::NumericMatrix mu, Rcpp::NumericMatrix varInverse, Rcpp::NumericVector COEFF);

TEST(TAM_deepstate_test,tam_rcpp_prior_normal_density_equal_means_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix theta  = RcppDeepState_NumericMatrix();
  qs::c_qsave(theta,"/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_prior_normal_density_equal_means/inputs/theta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericMatrix mu  = RcppDeepState_NumericMatrix();
  qs::c_qsave(mu,"/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_prior_normal_density_equal_means/inputs/mu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericMatrix varInverse  = RcppDeepState_NumericMatrix();
  qs::c_qsave(varInverse,"/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_prior_normal_density_equal_means/inputs/varInverse.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "varInverse values: "<< varInverse << std::endl;
  NumericVector COEFF  = RcppDeepState_NumericVector();
  qs::c_qsave(COEFF,"/home/akhila/fuzzer_packages/fuzzedpackages/TAM/inst/testfiles/tam_rcpp_prior_normal_density_equal_means/inputs/COEFF.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "COEFF values: "<< COEFF << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    tam_rcpp_prior_normal_density_equal_means(theta,mu,varInverse,COEFF);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
