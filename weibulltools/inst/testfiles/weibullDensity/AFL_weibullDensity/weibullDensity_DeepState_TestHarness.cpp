// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// weibullDensity_DeepState_TestHarness_generation.cpp and weibullDensity_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double weibullDensity(double x, double beta, double lambda, double censored);

TEST(weibulltools_deepstate_test,weibullDensity_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x(1);
  x[0]  = RcppDeepState_double();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/weibulltools/inst/testfiles/weibullDensity/AFL_weibullDensity/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_double();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/weibulltools/inst/testfiles/weibullDensity/AFL_weibullDensity/afl_inputs/" + std::to_string(t) + "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  std::string lambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/weibulltools/inst/testfiles/weibullDensity/AFL_weibullDensity/afl_inputs/" + std::to_string(t) + "_lambda.qs";
  qs::c_qsave(lambda,lambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector censored(1);
  censored[0]  = RcppDeepState_double();
  std::string censored_t = "/home/akhila/fuzzer_packages/fuzzedpackages/weibulltools/inst/testfiles/weibullDensity/AFL_weibullDensity/afl_inputs/" + std::to_string(t) + "_censored.qs";
  qs::c_qsave(censored,censored_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "censored values: "<< censored << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    weibullDensity(x[0],beta[0],lambda[0],censored[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
