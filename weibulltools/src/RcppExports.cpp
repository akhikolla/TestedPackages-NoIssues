// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// getLambda
double getLambda(NumericVector& x, NumericVector& weights, NumericVector& status, double beta);
RcppExport SEXP _weibulltools_getLambda(SEXP xSEXP, SEXP weightsSEXP, SEXP statusSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(getLambda(x, weights, status, beta));
    return rcpp_result_gen;
END_RCPP
}
// g
double g(NumericVector& x, NumericVector& weights, NumericVector& status, double beta);
RcppExport SEXP _weibulltools_g(SEXP xSEXP, SEXP weightsSEXP, SEXP statusSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(g(x, weights, status, beta));
    return rcpp_result_gen;
END_RCPP
}
// gDiv
double gDiv(NumericVector& x, NumericVector& weights, double beta);
RcppExport SEXP _weibulltools_gDiv(SEXP xSEXP, SEXP weightsSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(gDiv(x, weights, beta));
    return rcpp_result_gen;
END_RCPP
}
// NewtonRaphson
double NewtonRaphson(NumericVector& x, NumericVector& weights, NumericVector& status);
RcppExport SEXP _weibulltools_NewtonRaphson(SEXP xSEXP, SEXP weightsSEXP, SEXP statusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type status(statusSEXP);
    rcpp_result_gen = Rcpp::wrap(NewtonRaphson(x, weights, status));
    return rcpp_result_gen;
END_RCPP
}
// MStepWeibull
NumericMatrix MStepWeibull(NumericVector& x, NumericMatrix& posterior, NumericVector& status);
RcppExport SEXP _weibulltools_MStepWeibull(SEXP xSEXP, SEXP posteriorSEXP, SEXP statusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type posterior(posteriorSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type status(statusSEXP);
    rcpp_result_gen = Rcpp::wrap(MStepWeibull(x, posterior, status));
    return rcpp_result_gen;
END_RCPP
}
// weibullDensity
double weibullDensity(double x, double beta, double lambda, double censored);
RcppExport SEXP _weibulltools_weibullDensity(SEXP xSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP censoredSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type censored(censoredSEXP);
    rcpp_result_gen = Rcpp::wrap(weibullDensity(x, beta, lambda, censored));
    return rcpp_result_gen;
END_RCPP
}
// LikelihoodWeibull
void LikelihoodWeibull(NumericVector& x, NumericMatrix& parameter, NumericVector& status, NumericVector& prior, NumericMatrix& P, NumericMatrix& logL);
RcppExport SEXP _weibulltools_LikelihoodWeibull(SEXP xSEXP, SEXP parameterSEXP, SEXP statusSEXP, SEXP priorSEXP, SEXP PSEXP, SEXP logLSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type parameter(parameterSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type P(PSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type logL(logLSEXP);
    LikelihoodWeibull(x, parameter, status, prior, P, logL);
    return R_NilValue;
END_RCPP
}
// normalize
void normalize(NumericMatrix& M);
RcppExport SEXP _weibulltools_normalize(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type M(MSEXP);
    normalize(M);
    return R_NilValue;
END_RCPP
}
// mixture_em_cpp
List mixture_em_cpp(NumericVector& x, NumericVector& event, NumericMatrix post, String distribution, int k, String method, int n_iter, double conv_limit);
RcppExport SEXP _weibulltools_mixture_em_cpp(SEXP xSEXP, SEXP eventSEXP, SEXP postSEXP, SEXP distributionSEXP, SEXP kSEXP, SEXP methodSEXP, SEXP n_iterSEXP, SEXP conv_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type event(eventSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< String >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_limit(conv_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(mixture_em_cpp(x, event, post, distribution, k, method, n_iter, conv_limit));
    return rcpp_result_gen;
END_RCPP
}
// calculate_ranks
NumericVector calculate_ranks(NumericVector f, NumericVector n_out, int n);
RcppExport SEXP _weibulltools_calculate_ranks(SEXP fSEXP, SEXP n_outSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_out(n_outSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_ranks(f, n_out, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_weibulltools_getLambda", (DL_FUNC) &_weibulltools_getLambda, 4},
    {"_weibulltools_g", (DL_FUNC) &_weibulltools_g, 4},
    {"_weibulltools_gDiv", (DL_FUNC) &_weibulltools_gDiv, 3},
    {"_weibulltools_NewtonRaphson", (DL_FUNC) &_weibulltools_NewtonRaphson, 3},
    {"_weibulltools_MStepWeibull", (DL_FUNC) &_weibulltools_MStepWeibull, 3},
    {"_weibulltools_weibullDensity", (DL_FUNC) &_weibulltools_weibullDensity, 4},
    {"_weibulltools_LikelihoodWeibull", (DL_FUNC) &_weibulltools_LikelihoodWeibull, 6},
    {"_weibulltools_normalize", (DL_FUNC) &_weibulltools_normalize, 1},
    {"_weibulltools_mixture_em_cpp", (DL_FUNC) &_weibulltools_mixture_em_cpp, 8},
    {"_weibulltools_calculate_ranks", (DL_FUNC) &_weibulltools_calculate_ranks, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_weibulltools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
