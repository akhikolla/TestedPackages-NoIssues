// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// flexdog_obj_DeepState_TestHarness_generation.cpp and flexdog_obj_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double flexdog_obj(NumericVector probk_vec, NumericVector refvec, NumericVector sizevec, int ploidy, double seq, double bias, double od, double mean_bias, double var_bias, double mean_seq, double var_seq, double mean_od, double var_od);

TEST(updog_deepstate_test,flexdog_obj_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector probk_vec  = RcppDeepState_NumericVector();
  qs::c_qsave(probk_vec,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/probk_vec.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "probk_vec values: "<< probk_vec << std::endl;
  NumericVector refvec  = RcppDeepState_NumericVector();
  qs::c_qsave(refvec,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/refvec.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "refvec values: "<< refvec << std::endl;
  NumericVector sizevec  = RcppDeepState_NumericVector();
  qs::c_qsave(sizevec,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/sizevec.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sizevec values: "<< sizevec << std::endl;
  IntegerVector ploidy(1);
  ploidy[0]  = RcppDeepState_int();
  qs::c_qsave(ploidy,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/ploidy.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  NumericVector seq(1);
  seq[0]  = RcppDeepState_double();
  qs::c_qsave(seq,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/seq.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "seq values: "<< seq << std::endl;
  NumericVector bias(1);
  bias[0]  = RcppDeepState_double();
  qs::c_qsave(bias,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/bias.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bias values: "<< bias << std::endl;
  NumericVector od(1);
  od[0]  = RcppDeepState_double();
  qs::c_qsave(od,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/od.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "od values: "<< od << std::endl;
  NumericVector mean_bias(1);
  mean_bias[0]  = RcppDeepState_double();
  qs::c_qsave(mean_bias,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/mean_bias.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mean_bias values: "<< mean_bias << std::endl;
  NumericVector var_bias(1);
  var_bias[0]  = RcppDeepState_double();
  qs::c_qsave(var_bias,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/var_bias.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "var_bias values: "<< var_bias << std::endl;
  NumericVector mean_seq(1);
  mean_seq[0]  = RcppDeepState_double();
  qs::c_qsave(mean_seq,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/mean_seq.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mean_seq values: "<< mean_seq << std::endl;
  NumericVector var_seq(1);
  var_seq[0]  = RcppDeepState_double();
  qs::c_qsave(var_seq,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/var_seq.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "var_seq values: "<< var_seq << std::endl;
  NumericVector mean_od(1);
  mean_od[0]  = RcppDeepState_double();
  qs::c_qsave(mean_od,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/mean_od.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mean_od values: "<< mean_od << std::endl;
  NumericVector var_od(1);
  var_od[0]  = RcppDeepState_double();
  qs::c_qsave(var_od,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/flexdog_obj/inputs/var_od.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "var_od values: "<< var_od << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    flexdog_obj(probk_vec,refvec,sizevec,ploidy[0],seq[0],bias[0],od[0],mean_bias[0],var_bias[0],mean_seq[0],var_seq[0],mean_od[0],var_od[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
