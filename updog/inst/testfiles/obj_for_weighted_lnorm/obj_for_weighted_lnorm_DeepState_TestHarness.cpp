// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// obj_for_weighted_lnorm_DeepState_TestHarness_generation.cpp and obj_for_weighted_lnorm_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double obj_for_weighted_lnorm(NumericVector parvec, int ploidy, NumericVector weight_vec);

TEST(updog_deepstate_test,obj_for_weighted_lnorm_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector parvec  = RcppDeepState_NumericVector();
  qs::c_qsave(parvec,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/obj_for_weighted_lnorm/inputs/parvec.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "parvec values: "<< parvec << std::endl;
  IntegerVector ploidy(1);
  ploidy[0]  = RcppDeepState_int();
  qs::c_qsave(ploidy,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/obj_for_weighted_lnorm/inputs/ploidy.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  NumericVector weight_vec  = RcppDeepState_NumericVector();
  qs::c_qsave(weight_vec,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/obj_for_weighted_lnorm/inputs/weight_vec.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "weight_vec values: "<< weight_vec << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    obj_for_weighted_lnorm(parvec,ploidy[0],weight_vec);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
