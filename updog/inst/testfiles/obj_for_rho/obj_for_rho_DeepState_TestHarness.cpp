// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// obj_for_rho_DeepState_TestHarness_generation.cpp and obj_for_rho_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double obj_for_rho(double rho, NumericVector mu, NumericVector sigma2, NumericVector alpha, NumericMatrix log_bb_dense, int ploidy);

TEST(updog_deepstate_test,obj_for_rho_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  qs::c_qsave(rho,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/obj_for_rho/inputs/rho.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericVector mu  = RcppDeepState_NumericVector();
  qs::c_qsave(mu,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/obj_for_rho/inputs/mu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector sigma2  = RcppDeepState_NumericVector();
  qs::c_qsave(sigma2,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/obj_for_rho/inputs/sigma2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma2 values: "<< sigma2 << std::endl;
  NumericVector alpha  = RcppDeepState_NumericVector();
  qs::c_qsave(alpha,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/obj_for_rho/inputs/alpha.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericMatrix log_bb_dense  = RcppDeepState_NumericMatrix();
  qs::c_qsave(log_bb_dense,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/obj_for_rho/inputs/log_bb_dense.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "log_bb_dense values: "<< log_bb_dense << std::endl;
  IntegerVector ploidy(1);
  ploidy[0]  = RcppDeepState_int();
  qs::c_qsave(ploidy,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/obj_for_rho/inputs/ploidy.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    obj_for_rho(rho[0],mu,sigma2,alpha,log_bb_dense,ploidy[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
