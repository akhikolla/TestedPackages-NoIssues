// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// compute_all_log_bb_DeepState_TestHarness_generation.cpp and compute_all_log_bb_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::Cube<double> compute_all_log_bb(NumericMatrix refmat, NumericMatrix sizemat, int ploidy, NumericVector seq, NumericVector bias, NumericVector od);

TEST(updog_deepstate_test,compute_all_log_bb_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix refmat  = RcppDeepState_NumericMatrix();
  qs::c_qsave(refmat,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_log_bb/inputs/refmat.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "refmat values: "<< refmat << std::endl;
  NumericMatrix sizemat  = RcppDeepState_NumericMatrix();
  qs::c_qsave(sizemat,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_log_bb/inputs/sizemat.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sizemat values: "<< sizemat << std::endl;
  IntegerVector ploidy(1);
  ploidy[0]  = RcppDeepState_int();
  qs::c_qsave(ploidy,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_log_bb/inputs/ploidy.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  NumericVector seq  = RcppDeepState_NumericVector();
  qs::c_qsave(seq,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_log_bb/inputs/seq.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "seq values: "<< seq << std::endl;
  NumericVector bias  = RcppDeepState_NumericVector();
  qs::c_qsave(bias,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_log_bb/inputs/bias.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bias values: "<< bias << std::endl;
  NumericVector od  = RcppDeepState_NumericVector();
  qs::c_qsave(od,"/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_log_bb/inputs/od.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "od values: "<< od << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    compute_all_log_bb(refmat,sizemat,ploidy[0],seq,bias,od);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
