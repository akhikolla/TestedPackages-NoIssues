// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dpen_deps_DeepState_TestHarness_generation.cpp and dpen_deps_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double dpen_deps(double eps, double mu_eps, double sigma2_eps);

TEST(updog_deepstate_test,dpen_deps_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector eps(1);
  eps[0]  = RcppDeepState_double();
  std::string eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/dpen_deps/libFuzzer_dpen_deps/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_eps.qs";
  qs::c_qsave(eps,eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps values: "<< eps << std::endl;
  NumericVector mu_eps(1);
  mu_eps[0]  = RcppDeepState_double();
  std::string mu_eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/dpen_deps/libFuzzer_dpen_deps/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mu_eps.qs";
  qs::c_qsave(mu_eps,mu_eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu_eps values: "<< mu_eps << std::endl;
  NumericVector sigma2_eps(1);
  sigma2_eps[0]  = RcppDeepState_double();
  std::string sigma2_eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/dpen_deps/libFuzzer_dpen_deps/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sigma2_eps.qs";
  qs::c_qsave(sigma2_eps,sigma2_eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma2_eps values: "<< sigma2_eps << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dpen_deps(eps[0],mu_eps[0],sigma2_eps[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
