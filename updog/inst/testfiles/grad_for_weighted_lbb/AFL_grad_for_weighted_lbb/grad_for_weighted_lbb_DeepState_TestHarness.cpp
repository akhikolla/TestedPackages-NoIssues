// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// grad_for_weighted_lbb_DeepState_TestHarness_generation.cpp and grad_for_weighted_lbb_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector grad_for_weighted_lbb(NumericVector parvec, int ploidy, NumericVector weight_vec);

TEST(updog_deepstate_test,grad_for_weighted_lbb_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector parvec  = RcppDeepState_NumericVector();
  std::string parvec_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/grad_for_weighted_lbb/AFL_grad_for_weighted_lbb/afl_inputs/" + std::to_string(t) + "_parvec.qs";
  qs::c_qsave(parvec,parvec_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "parvec values: "<< parvec << std::endl;
  IntegerVector ploidy(1);
  ploidy[0]  = RcppDeepState_int();
  std::string ploidy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/grad_for_weighted_lbb/AFL_grad_for_weighted_lbb/afl_inputs/" + std::to_string(t) + "_ploidy.qs";
  qs::c_qsave(ploidy,ploidy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  NumericVector weight_vec  = RcppDeepState_NumericVector();
  std::string weight_vec_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/grad_for_weighted_lbb/AFL_grad_for_weighted_lbb/afl_inputs/" + std::to_string(t) + "_weight_vec.qs";
  qs::c_qsave(weight_vec,weight_vec_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "weight_vec values: "<< weight_vec << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    grad_for_weighted_lbb(parvec,ploidy[0],weight_vec);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
