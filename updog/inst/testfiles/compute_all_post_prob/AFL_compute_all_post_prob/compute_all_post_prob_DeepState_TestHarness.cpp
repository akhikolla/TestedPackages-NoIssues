// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// compute_all_post_prob_DeepState_TestHarness_generation.cpp and compute_all_post_prob_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::Cube<double> compute_all_post_prob(int ploidy, NumericMatrix mu, NumericMatrix sigma2, NumericVector alpha, NumericVector rho);

TEST(updog_deepstate_test,compute_all_post_prob_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector ploidy(1);
  ploidy[0]  = RcppDeepState_int();
  std::string ploidy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_post_prob/AFL_compute_all_post_prob/afl_inputs/" + std::to_string(t) + "_ploidy.qs";
  qs::c_qsave(ploidy,ploidy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  NumericMatrix mu  = RcppDeepState_NumericMatrix();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_post_prob/AFL_compute_all_post_prob/afl_inputs/" + std::to_string(t) + "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericMatrix sigma2  = RcppDeepState_NumericMatrix();
  std::string sigma2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_post_prob/AFL_compute_all_post_prob/afl_inputs/" + std::to_string(t) + "_sigma2.qs";
  qs::c_qsave(sigma2,sigma2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma2 values: "<< sigma2 << std::endl;
  NumericVector alpha  = RcppDeepState_NumericVector();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_post_prob/AFL_compute_all_post_prob/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector rho  = RcppDeepState_NumericVector();
  std::string rho_t = "/home/akhila/fuzzer_packages/fuzzedpackages/updog/inst/testfiles/compute_all_post_prob/AFL_compute_all_post_prob/afl_inputs/" + std::to_string(t) + "_rho.qs";
  qs::c_qsave(rho,rho_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    compute_all_post_prob(ploidy[0],mu,sigma2,alpha,rho);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
