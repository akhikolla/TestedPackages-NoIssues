// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dpb_dftcf_DeepState_TestHarness_generation.cpp and dpb_dftcf_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector dpb_dftcf(const IntegerVector obs, const NumericVector probs);

TEST(PoissonBinomial_deepstate_test,dpb_dftcf_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector obs  = RcppDeepState_IntegerVector();
  std::string obs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PoissonBinomial/inst/testfiles/dpb_dftcf/AFL_dpb_dftcf/afl_inputs/" + std::to_string(t) + "_obs.qs";
  qs::c_qsave(obs,obs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "obs values: "<< obs << std::endl;
  NumericVector probs  = RcppDeepState_NumericVector();
  std::string probs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PoissonBinomial/inst/testfiles/dpb_dftcf/AFL_dpb_dftcf/afl_inputs/" + std::to_string(t) + "_probs.qs";
  qs::c_qsave(probs,probs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "probs values: "<< probs << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dpb_dftcf(obs,probs);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
