// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// pwm_C
double pwm_C(NumericVector x, int r);
RcppExport SEXP _TLMoments_pwm_C(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(pwm_C(x, r));
    return rcpp_result_gen;
END_RCPP
}
// z_C
double z_C(int r, int k, int s, int t);
RcppExport SEXP _TLMoments_z_C(SEXP rSEXP, SEXP kSEXP, SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(z_C(r, k, s, t));
    return rcpp_result_gen;
END_RCPP
}
// Z_C
NumericMatrix Z_C(int maxr, int s, int t);
RcppExport SEXP _TLMoments_Z_C(SEXP maxrSEXP, SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type maxr(maxrSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_C(maxr, s, t));
    return rcpp_result_gen;
END_RCPP
}
// TLMoment_PWM
double TLMoment_PWM(NumericVector x, int r, int s, int t);
RcppExport SEXP _TLMoments_TLMoment_PWM(SEXP xSEXP, SEXP rSEXP, SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(TLMoment_PWM(x, r, s, t));
    return rcpp_result_gen;
END_RCPP
}
// PWM_to_TLMoments
NumericVector PWM_to_TLMoments(NumericVector pwm, int s, int t);
RcppExport SEXP _TLMoments_PWM_to_TLMoments(SEXP pwmSEXP, SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pwm(pwmSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(PWM_to_TLMoments(pwm, s, t));
    return rcpp_result_gen;
END_RCPP
}
// TLMoment_direct
double TLMoment_direct(NumericVector x, int r, double s, double t);
RcppExport SEXP _TLMoments_TLMoment_direct(SEXP xSEXP, SEXP rSEXP, SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(TLMoment_direct(x, r, s, t));
    return rcpp_result_gen;
END_RCPP
}
// TLMoments_recursive
NumericVector TLMoments_recursive(NumericVector x, int maxr, double s, double t);
RcppExport SEXP _TLMoments_TLMoments_recursive(SEXP xSEXP, SEXP maxrSEXP, SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type maxr(maxrSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(TLMoments_recursive(x, maxr, s, t));
    return rcpp_result_gen;
END_RCPP
}
// TLMoments_recurrence
NumericVector TLMoments_recurrence(NumericVector x, int maxr, double s, double t);
RcppExport SEXP _TLMoments_TLMoments_recurrence(SEXP xSEXP, SEXP maxrSEXP, SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type maxr(maxrSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(TLMoments_recurrence(x, maxr, s, t));
    return rcpp_result_gen;
END_RCPP
}
// pseudo_C
NumericMatrix pseudo_C(NumericVector x, NumericVector k);
RcppExport SEXP _TLMoments_pseudo_C(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudo_C(x, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TLMoments_pwm_C", (DL_FUNC) &_TLMoments_pwm_C, 2},
    {"_TLMoments_z_C", (DL_FUNC) &_TLMoments_z_C, 4},
    {"_TLMoments_Z_C", (DL_FUNC) &_TLMoments_Z_C, 3},
    {"_TLMoments_TLMoment_PWM", (DL_FUNC) &_TLMoments_TLMoment_PWM, 4},
    {"_TLMoments_PWM_to_TLMoments", (DL_FUNC) &_TLMoments_PWM_to_TLMoments, 3},
    {"_TLMoments_TLMoment_direct", (DL_FUNC) &_TLMoments_TLMoment_direct, 4},
    {"_TLMoments_TLMoments_recursive", (DL_FUNC) &_TLMoments_TLMoments_recursive, 4},
    {"_TLMoments_TLMoments_recurrence", (DL_FUNC) &_TLMoments_TLMoments_recurrence, 4},
    {"_TLMoments_pseudo_C", (DL_FUNC) &_TLMoments_pseudo_C, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_TLMoments(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
