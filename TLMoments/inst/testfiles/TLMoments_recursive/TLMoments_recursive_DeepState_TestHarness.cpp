// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// TLMoments_recursive_DeepState_TestHarness_generation.cpp and TLMoments_recursive_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector TLMoments_recursive(NumericVector x, int maxr, double s, double t);

TEST(TLMoments_deepstate_test,TLMoments_recursive_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/TLMoments/inst/testfiles/TLMoments_recursive/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  IntegerVector maxr(1);
  maxr[0]  = RcppDeepState_int();
  qs::c_qsave(maxr,"/home/akhila/fuzzer_packages/fuzzedpackages/TLMoments/inst/testfiles/TLMoments_recursive/inputs/maxr.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxr values: "<< maxr << std::endl;
  NumericVector s(1);
  s[0]  = RcppDeepState_double();
  qs::c_qsave(s,"/home/akhila/fuzzer_packages/fuzzedpackages/TLMoments/inst/testfiles/TLMoments_recursive/inputs/s.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "s values: "<< s << std::endl;
  NumericVector t(1);
  t[0]  = RcppDeepState_double();
  qs::c_qsave(t,"/home/akhila/fuzzer_packages/fuzzedpackages/TLMoments/inst/testfiles/TLMoments_recursive/inputs/t.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    TLMoments_recursive(x,maxr[0],s[0],t[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
