// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// z_C_DeepState_TestHarness_generation.cpp and z_C_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double z_C(int r, int k, int s, int t);

TEST(TLMoments_deepstate_test,z_C_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector r(1);
  r[0]  = RcppDeepState_int();
  std::string r_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TLMoments/inst/testfiles/z_C/libFuzzer_z_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_r.qs";
  qs::c_qsave(r,r_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "r values: "<< r << std::endl;
  IntegerVector k(1);
  k[0]  = RcppDeepState_int();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TLMoments/inst/testfiles/z_C/libFuzzer_z_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  IntegerVector s(1);
  s[0]  = RcppDeepState_int();
  std::string s_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TLMoments/inst/testfiles/z_C/libFuzzer_z_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_s.qs";
  qs::c_qsave(s,s_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "s values: "<< s << std::endl;
  IntegerVector t(1);
  t[0]  = RcppDeepState_int();
  std::string t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/TLMoments/inst/testfiles/z_C/libFuzzer_z_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_t.qs";
  qs::c_qsave(t,t_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    z_C(r[0],k[0],s[0],t[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
