// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// ChangePointAnalyzeNorm_DeepState_TestHarness_generation.cpp and ChangePointAnalyzeNorm_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix ChangePointAnalyzeNorm(NumericVector Data, IntegerVector InputLength, IntegerVector MaxJump, NumericVector Prior);

TEST(StepSignalMargiLike_deepstate_test,ChangePointAnalyzeNorm_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector Data  = RcppDeepState_NumericVector();
  std::string Data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/StepSignalMargiLike/inst/testfiles/ChangePointAnalyzeNorm/AFL_ChangePointAnalyzeNorm/afl_inputs/" + std::to_string(t) + "_Data.qs";
  qs::c_qsave(Data,Data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Data values: "<< Data << std::endl;
  IntegerVector InputLength  = RcppDeepState_IntegerVector();
  std::string InputLength_t = "/home/akhila/fuzzer_packages/fuzzedpackages/StepSignalMargiLike/inst/testfiles/ChangePointAnalyzeNorm/AFL_ChangePointAnalyzeNorm/afl_inputs/" + std::to_string(t) + "_InputLength.qs";
  qs::c_qsave(InputLength,InputLength_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "InputLength values: "<< InputLength << std::endl;
  IntegerVector MaxJump  = RcppDeepState_IntegerVector();
  std::string MaxJump_t = "/home/akhila/fuzzer_packages/fuzzedpackages/StepSignalMargiLike/inst/testfiles/ChangePointAnalyzeNorm/AFL_ChangePointAnalyzeNorm/afl_inputs/" + std::to_string(t) + "_MaxJump.qs";
  qs::c_qsave(MaxJump,MaxJump_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "MaxJump values: "<< MaxJump << std::endl;
  NumericVector Prior  = RcppDeepState_NumericVector();
  std::string Prior_t = "/home/akhila/fuzzer_packages/fuzzedpackages/StepSignalMargiLike/inst/testfiles/ChangePointAnalyzeNorm/AFL_ChangePointAnalyzeNorm/afl_inputs/" + std::to_string(t) + "_Prior.qs";
  qs::c_qsave(Prior,Prior_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Prior values: "<< Prior << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    ChangePointAnalyzeNorm(Data,InputLength,MaxJump,Prior);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
