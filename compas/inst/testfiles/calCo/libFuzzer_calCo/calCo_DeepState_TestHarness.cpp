// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calCo_DeepState_TestHarness_generation.cpp and calCo_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector calCo(NumericMatrix prev_atoms, double length, double bAngle, double tAngle);

TEST(compas_deepstate_test,calCo_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix prev_atoms  = RcppDeepState_NumericMatrix();
  std::string prev_atoms_t = "/home/akhila/fuzzer_packages/fuzzedpackages/compas/inst/testfiles/calCo/libFuzzer_calCo/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_prev_atoms.qs";
  qs::c_qsave(prev_atoms,prev_atoms_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prev_atoms values: "<< prev_atoms << std::endl;
  NumericVector length(1);
  length[0]  = RcppDeepState_double();
  std::string length_t = "/home/akhila/fuzzer_packages/fuzzedpackages/compas/inst/testfiles/calCo/libFuzzer_calCo/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_length.qs";
  qs::c_qsave(length,length_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "length values: "<< length << std::endl;
  NumericVector bAngle(1);
  bAngle[0]  = RcppDeepState_double();
  std::string bAngle_t = "/home/akhila/fuzzer_packages/fuzzedpackages/compas/inst/testfiles/calCo/libFuzzer_calCo/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_bAngle.qs";
  qs::c_qsave(bAngle,bAngle_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bAngle values: "<< bAngle << std::endl;
  NumericVector tAngle(1);
  tAngle[0]  = RcppDeepState_double();
  std::string tAngle_t = "/home/akhila/fuzzer_packages/fuzzedpackages/compas/inst/testfiles/calCo/libFuzzer_calCo/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tAngle.qs";
  qs::c_qsave(tAngle,tAngle_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tAngle values: "<< tAngle << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calCo(prev_atoms,length[0],bAngle[0],tAngle[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
