// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// dfeval
double dfeval(DataFrame chain, NumericVector atypes, NumericMatrix& etable);
RcppExport SEXP _compas_dfeval(SEXP chainSEXP, SEXP atypesSEXP, SEXP etableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atypes(atypesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type etable(etableSEXP);
    rcpp_result_gen = Rcpp::wrap(dfeval(chain, atypes, etable));
    return rcpp_result_gen;
END_RCPP
}
// RMSD
double RMSD(Eigen::MatrixXd x, Eigen::MatrixXd y);
RcppExport SEXP _compas_RMSD(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(RMSD(x, y));
    return rcpp_result_gen;
END_RCPP
}
// LRMSD
List LRMSD(Eigen::MatrixXd xr, Eigen::MatrixXd yr);
RcppExport SEXP _compas_LRMSD(SEXP xrSEXP, SEXP yrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type yr(yrSEXP);
    rcpp_result_gen = Rcpp::wrap(LRMSD(xr, yr));
    return rcpp_result_gen;
END_RCPP
}
// calCo
NumericVector calCo(NumericMatrix prev_atoms, double length, double bAngle, double tAngle);
RcppExport SEXP _compas_calCo(SEXP prev_atomsSEXP, SEXP lengthSEXP, SEXP bAngleSEXP, SEXP tAngleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type prev_atoms(prev_atomsSEXP);
    Rcpp::traits::input_parameter< double >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< double >::type bAngle(bAngleSEXP);
    Rcpp::traits::input_parameter< double >::type tAngle(tAngleSEXP);
    rcpp_result_gen = Rcpp::wrap(calCo(prev_atoms, length, bAngle, tAngle));
    return rcpp_result_gen;
END_RCPP
}
// torsion
double torsion(NumericVector a, NumericVector b, NumericVector c, NumericVector d);
RcppExport SEXP _compas_torsion(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(torsion(a, b, c, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_compas_dfeval", (DL_FUNC) &_compas_dfeval, 3},
    {"_compas_RMSD", (DL_FUNC) &_compas_RMSD, 2},
    {"_compas_LRMSD", (DL_FUNC) &_compas_LRMSD, 2},
    {"_compas_calCo", (DL_FUNC) &_compas_calCo, 4},
    {"_compas_torsion", (DL_FUNC) &_compas_torsion, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_compas(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
