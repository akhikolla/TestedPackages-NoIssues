// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// max_heapify_DeepState_TestHarness_generation.cpp and max_heapify_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix max_heapify(NumericMatrix data, int index, int num_data);

TEST(DCEM_deepstate_test,max_heapify_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix data  = RcppDeepState_NumericMatrix();
  std::string data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DCEM/inst/testfiles/max_heapify/libFuzzer_max_heapify/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_data.qs";
  qs::c_qsave(data,data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  IntegerVector index(1);
  index[0]  = RcppDeepState_int();
  std::string index_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DCEM/inst/testfiles/max_heapify/libFuzzer_max_heapify/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_index.qs";
  qs::c_qsave(index,index_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "index values: "<< index << std::endl;
  IntegerVector num_data(1);
  num_data[0]  = RcppDeepState_int();
  std::string num_data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DCEM/inst/testfiles/max_heapify/libFuzzer_max_heapify/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_num_data.qs";
  qs::c_qsave(num_data,num_data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "num_data values: "<< num_data << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    max_heapify(data,index[0],num_data[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
