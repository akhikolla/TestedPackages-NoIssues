// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// max_n
double max_n(NumericVector x);
RcppExport SEXP _dvmisc_max_n(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(max_n(x));
    return rcpp_result_gen;
END_RCPP
}
// mean_i
double mean_i(IntegerVector x);
RcppExport SEXP _dvmisc_mean_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_i(x));
    return rcpp_result_gen;
END_RCPP
}
// min_n
double min_n(NumericVector x);
RcppExport SEXP _dvmisc_min_n(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(min_n(x));
    return rcpp_result_gen;
END_RCPP
}
// moving_mean_i
NumericVector moving_mean_i(IntegerVector x, double window);
RcppExport SEXP _dvmisc_moving_mean_i(SEXP xSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_mean_i(x, window));
    return rcpp_result_gen;
END_RCPP
}
// moving_mean_i_max
double moving_mean_i_max(IntegerVector x, double window);
RcppExport SEXP _dvmisc_moving_mean_i_max(SEXP xSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_mean_i_max(x, window));
    return rcpp_result_gen;
END_RCPP
}
// moving_mean_n
NumericVector moving_mean_n(NumericVector x, double window);
RcppExport SEXP _dvmisc_moving_mean_n(SEXP xSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_mean_n(x, window));
    return rcpp_result_gen;
END_RCPP
}
// moving_mean_n_max
double moving_mean_n_max(NumericVector x, double window);
RcppExport SEXP _dvmisc_moving_mean_n_max(SEXP xSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_mean_n_max(x, window));
    return rcpp_result_gen;
END_RCPP
}
// sliding_cor_c
NumericVector sliding_cor_c(NumericVector shortvec, NumericVector longvec, double sd_shortvec);
RcppExport SEXP _dvmisc_sliding_cor_c(SEXP shortvecSEXP, SEXP longvecSEXP, SEXP sd_shortvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type shortvec(shortvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type longvec(longvecSEXP);
    Rcpp::traits::input_parameter< double >::type sd_shortvec(sd_shortvecSEXP);
    rcpp_result_gen = Rcpp::wrap(sliding_cor_c(shortvec, longvec, sd_shortvec));
    return rcpp_result_gen;
END_RCPP
}
// sliding_cov_c
NumericVector sliding_cov_c(NumericVector shortvec, NumericVector longvec);
RcppExport SEXP _dvmisc_sliding_cov_c(SEXP shortvecSEXP, SEXP longvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type shortvec(shortvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type longvec(longvecSEXP);
    rcpp_result_gen = Rcpp::wrap(sliding_cov_c(shortvec, longvec));
    return rcpp_result_gen;
END_RCPP
}
// sum_i
int sum_i(IntegerVector x);
RcppExport SEXP _dvmisc_sum_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_i(x));
    return rcpp_result_gen;
END_RCPP
}
// truerange_i
int truerange_i(IntegerVector x);
RcppExport SEXP _dvmisc_truerange_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(truerange_i(x));
    return rcpp_result_gen;
END_RCPP
}
// truerange_n
double truerange_n(NumericVector x);
RcppExport SEXP _dvmisc_truerange_n(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(truerange_n(x));
    return rcpp_result_gen;
END_RCPP
}
// which_max_im
IntegerVector which_max_im(IntegerMatrix x);
RcppExport SEXP _dvmisc_which_max_im(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_max_im(x));
    return rcpp_result_gen;
END_RCPP
}
// which_max_iv
int which_max_iv(IntegerVector x);
RcppExport SEXP _dvmisc_which_max_iv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_max_iv(x));
    return rcpp_result_gen;
END_RCPP
}
// which_max_nm
IntegerVector which_max_nm(NumericMatrix x);
RcppExport SEXP _dvmisc_which_max_nm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_max_nm(x));
    return rcpp_result_gen;
END_RCPP
}
// which_max_nv
int which_max_nv(NumericVector x);
RcppExport SEXP _dvmisc_which_max_nv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_max_nv(x));
    return rcpp_result_gen;
END_RCPP
}
// which_min_im
IntegerVector which_min_im(IntegerMatrix x);
RcppExport SEXP _dvmisc_which_min_im(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_min_im(x));
    return rcpp_result_gen;
END_RCPP
}
// which_min_iv
int which_min_iv(IntegerVector x);
RcppExport SEXP _dvmisc_which_min_iv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_min_iv(x));
    return rcpp_result_gen;
END_RCPP
}
// which_min_nm
IntegerVector which_min_nm(NumericMatrix x);
RcppExport SEXP _dvmisc_which_min_nm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_min_nm(x));
    return rcpp_result_gen;
END_RCPP
}
// which_min_nv
int which_min_nv(NumericVector x);
RcppExport SEXP _dvmisc_which_min_nv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_min_nv(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dvmisc_max_n", (DL_FUNC) &_dvmisc_max_n, 1},
    {"_dvmisc_mean_i", (DL_FUNC) &_dvmisc_mean_i, 1},
    {"_dvmisc_min_n", (DL_FUNC) &_dvmisc_min_n, 1},
    {"_dvmisc_moving_mean_i", (DL_FUNC) &_dvmisc_moving_mean_i, 2},
    {"_dvmisc_moving_mean_i_max", (DL_FUNC) &_dvmisc_moving_mean_i_max, 2},
    {"_dvmisc_moving_mean_n", (DL_FUNC) &_dvmisc_moving_mean_n, 2},
    {"_dvmisc_moving_mean_n_max", (DL_FUNC) &_dvmisc_moving_mean_n_max, 2},
    {"_dvmisc_sliding_cor_c", (DL_FUNC) &_dvmisc_sliding_cor_c, 3},
    {"_dvmisc_sliding_cov_c", (DL_FUNC) &_dvmisc_sliding_cov_c, 2},
    {"_dvmisc_sum_i", (DL_FUNC) &_dvmisc_sum_i, 1},
    {"_dvmisc_truerange_i", (DL_FUNC) &_dvmisc_truerange_i, 1},
    {"_dvmisc_truerange_n", (DL_FUNC) &_dvmisc_truerange_n, 1},
    {"_dvmisc_which_max_im", (DL_FUNC) &_dvmisc_which_max_im, 1},
    {"_dvmisc_which_max_iv", (DL_FUNC) &_dvmisc_which_max_iv, 1},
    {"_dvmisc_which_max_nm", (DL_FUNC) &_dvmisc_which_max_nm, 1},
    {"_dvmisc_which_max_nv", (DL_FUNC) &_dvmisc_which_max_nv, 1},
    {"_dvmisc_which_min_im", (DL_FUNC) &_dvmisc_which_min_im, 1},
    {"_dvmisc_which_min_iv", (DL_FUNC) &_dvmisc_which_min_iv, 1},
    {"_dvmisc_which_min_nm", (DL_FUNC) &_dvmisc_which_min_nm, 1},
    {"_dvmisc_which_min_nv", (DL_FUNC) &_dvmisc_which_min_nv, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_dvmisc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
