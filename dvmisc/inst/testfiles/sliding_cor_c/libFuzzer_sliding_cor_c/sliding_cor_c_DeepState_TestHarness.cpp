// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sliding_cor_c_DeepState_TestHarness_generation.cpp and sliding_cor_c_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector sliding_cor_c(NumericVector shortvec, NumericVector longvec, double sd_shortvec);

TEST(dvmisc_deepstate_test,sliding_cor_c_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector shortvec  = RcppDeepState_NumericVector();
  std::string shortvec_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dvmisc/inst/testfiles/sliding_cor_c/libFuzzer_sliding_cor_c/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_shortvec.qs";
  qs::c_qsave(shortvec,shortvec_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "shortvec values: "<< shortvec << std::endl;
  NumericVector longvec  = RcppDeepState_NumericVector();
  std::string longvec_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dvmisc/inst/testfiles/sliding_cor_c/libFuzzer_sliding_cor_c/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_longvec.qs";
  qs::c_qsave(longvec,longvec_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "longvec values: "<< longvec << std::endl;
  NumericVector sd_shortvec(1);
  sd_shortvec[0]  = RcppDeepState_double();
  std::string sd_shortvec_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dvmisc/inst/testfiles/sliding_cor_c/libFuzzer_sliding_cor_c/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sd_shortvec.qs";
  qs::c_qsave(sd_shortvec,sd_shortvec_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sd_shortvec values: "<< sd_shortvec << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sliding_cor_c(shortvec,longvec,sd_shortvec[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
