// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// markerinsert_DeepState_TestHarness_generation.cpp and markerinsert_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix markerinsert(NumericMatrix mp, NumericMatrix geno, NumericMatrix map, int cl, int gg1, int gg2, int gg0, int flagRIL);

TEST(QTL.gCIMapping_deepstate_test,markerinsert_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix mp  = RcppDeepState_NumericMatrix();
  std::string mp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/QTL.gCIMapping/inst/testfiles/markerinsert/AFL_markerinsert/afl_inputs/" + std::to_string(t) + "_mp.qs";
  qs::c_qsave(mp,mp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mp values: "<< mp << std::endl;
  NumericMatrix geno  = RcppDeepState_NumericMatrix();
  std::string geno_t = "/home/akhila/fuzzer_packages/fuzzedpackages/QTL.gCIMapping/inst/testfiles/markerinsert/AFL_markerinsert/afl_inputs/" + std::to_string(t) + "_geno.qs";
  qs::c_qsave(geno,geno_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "geno values: "<< geno << std::endl;
  NumericMatrix map  = RcppDeepState_NumericMatrix();
  std::string map_t = "/home/akhila/fuzzer_packages/fuzzedpackages/QTL.gCIMapping/inst/testfiles/markerinsert/AFL_markerinsert/afl_inputs/" + std::to_string(t) + "_map.qs";
  qs::c_qsave(map,map_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "map values: "<< map << std::endl;
  IntegerVector cl(1);
  cl[0]  = RcppDeepState_int();
  std::string cl_t = "/home/akhila/fuzzer_packages/fuzzedpackages/QTL.gCIMapping/inst/testfiles/markerinsert/AFL_markerinsert/afl_inputs/" + std::to_string(t) + "_cl.qs";
  qs::c_qsave(cl,cl_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cl values: "<< cl << std::endl;
  IntegerVector gg1(1);
  gg1[0]  = RcppDeepState_int();
  std::string gg1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/QTL.gCIMapping/inst/testfiles/markerinsert/AFL_markerinsert/afl_inputs/" + std::to_string(t) + "_gg1.qs";
  qs::c_qsave(gg1,gg1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gg1 values: "<< gg1 << std::endl;
  IntegerVector gg2(1);
  gg2[0]  = RcppDeepState_int();
  std::string gg2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/QTL.gCIMapping/inst/testfiles/markerinsert/AFL_markerinsert/afl_inputs/" + std::to_string(t) + "_gg2.qs";
  qs::c_qsave(gg2,gg2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gg2 values: "<< gg2 << std::endl;
  IntegerVector gg0(1);
  gg0[0]  = RcppDeepState_int();
  std::string gg0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/QTL.gCIMapping/inst/testfiles/markerinsert/AFL_markerinsert/afl_inputs/" + std::to_string(t) + "_gg0.qs";
  qs::c_qsave(gg0,gg0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gg0 values: "<< gg0 << std::endl;
  IntegerVector flagRIL(1);
  flagRIL[0]  = RcppDeepState_int();
  std::string flagRIL_t = "/home/akhila/fuzzer_packages/fuzzedpackages/QTL.gCIMapping/inst/testfiles/markerinsert/AFL_markerinsert/afl_inputs/" + std::to_string(t) + "_flagRIL.qs";
  qs::c_qsave(flagRIL,flagRIL_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "flagRIL values: "<< flagRIL << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    markerinsert(mp,geno,map,cl[0],gg1[0],gg2[0],gg0[0],flagRIL[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
