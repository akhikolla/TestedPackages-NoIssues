// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pgumbel_ssd_DeepState_TestHarness_generation.cpp and pgumbel_ssd_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double pgumbel_ssd(double q, double location, double scale);

TEST(ssdtools_deepstate_test,pgumbel_ssd_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector q(1);
  q[0]  = RcppDeepState_double();
  std::string q_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ssdtools/inst/testfiles/pgumbel_ssd/libFuzzer_pgumbel_ssd/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_q.qs";
  qs::c_qsave(q,q_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "q values: "<< q << std::endl;
  NumericVector location(1);
  location[0]  = RcppDeepState_double();
  std::string location_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ssdtools/inst/testfiles/pgumbel_ssd/libFuzzer_pgumbel_ssd/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_location.qs";
  qs::c_qsave(location,location_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "location values: "<< location << std::endl;
  NumericVector scale(1);
  scale[0]  = RcppDeepState_double();
  std::string scale_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ssdtools/inst/testfiles/pgumbel_ssd/libFuzzer_pgumbel_ssd/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_scale.qs";
  qs::c_qsave(scale,scale_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "scale values: "<< scale << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pgumbel_ssd(q[0],location[0],scale[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
