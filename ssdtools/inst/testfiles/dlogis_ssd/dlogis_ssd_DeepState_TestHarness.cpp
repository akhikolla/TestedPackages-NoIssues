// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dlogis_ssd_DeepState_TestHarness_generation.cpp and dlogis_ssd_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double dlogis_ssd(double x, double location, double scale);

TEST(ssdtools_deepstate_test,dlogis_ssd_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x(1);
  x[0]  = RcppDeepState_double();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/ssdtools/inst/testfiles/dlogis_ssd/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector location(1);
  location[0]  = RcppDeepState_double();
  qs::c_qsave(location,"/home/akhila/fuzzer_packages/fuzzedpackages/ssdtools/inst/testfiles/dlogis_ssd/inputs/location.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "location values: "<< location << std::endl;
  NumericVector scale(1);
  scale[0]  = RcppDeepState_double();
  qs::c_qsave(scale,"/home/akhila/fuzzer_packages/fuzzedpackages/ssdtools/inst/testfiles/dlogis_ssd/inputs/scale.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "scale values: "<< scale << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dlogis_ssd(x[0],location[0],scale[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
