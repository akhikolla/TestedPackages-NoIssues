# Generated by roxygen2: do not edit by hand

S3method("[",polylist)
S3method(GCD,polylist)
S3method(GCD,polynom)
S3method(LCM,polylist)
S3method(LCM,polynom)
S3method(Math,polylist)
S3method(Math,polynom)
S3method(Ops,polylist)
S3method(Ops,polynom)
S3method(Summary,polylist)
S3method(Summary,polynom)
S3method(as.character,polynom)
S3method(as.function,polylist)
S3method(as.function,polynom)
S3method(c,polylist)
S3method(c,polynom)
S3method(change_origin,default)
S3method(change_origin,polylist)
S3method(change_origin,polynom)
S3method(coef,polylist)
S3method(coef,polynom)
S3method(deriv,polylist)
S3method(deriv,polynom)
S3method(integral,default)
S3method(integral,polylist)
S3method(integral,polynom)
S3method(lines,polylist)
S3method(lines,polynom)
S3method(plot,polylist)
S3method(plot,polynom)
S3method(points,polylist)
S3method(points,polynom)
S3method(predict,polylist)
S3method(predict,polynom)
S3method(print,polylist)
S3method(print,polynom)
S3method(print,summary.polynom)
S3method(rep,polylist)
S3method(rep,polynom)
S3method(solve,polylist)
S3method(solve,polynom)
S3method(summary,polylist)
S3method(summary,polynom)
S3method(unique,polylist)
S3method(zap,default)
S3method(zap,list)
S3method(zap,polylist)
S3method(zap,polynom)
export(ChebyshevT)
export(ChebyshevU)
export(Discrete)
export(GCD)
export(Hermite)
export(Jacobi)
export(LCM)
export(Legendre)
export(as_polylist)
export(as_polynom)
export(change_origin)
export(greatest_common_divisor)
export(integral)
export(is_polylist)
export(is_polynom)
export(lowest_common_multiple)
export(poly_calc)
export(poly_from_roots)
export(poly_from_values)
export(poly_from_zeros)
export(poly_orth)
export(poly_orth_general)
export(polylist)
export(polynom)
export(polynomial)
export(tangent)
export(zap)
importFrom(Rcpp,sourceCpp)
importFrom(grDevices,palette)
importFrom(graphics,frame)
importFrom(graphics,grid)
importFrom(graphics,layout)
importFrom(graphics,legend)
importFrom(graphics,lines)
importFrom(graphics,par)
importFrom(graphics,plot)
importFrom(graphics,points)
importFrom(methods,hasArg)
importFrom(stats,coef)
importFrom(stats,deriv)
importFrom(stats,dnorm)
importFrom(stats,integrate)
importFrom(stats,poly)
importFrom(stats,predict)
importFrom(stats,setNames)
useDynLib(PolynomF, .registration = TRUE)
