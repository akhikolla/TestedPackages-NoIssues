// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RobustCalibration.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// Chol_Eigen
MatrixXd Chol_Eigen(const Eigen::MatrixXd R);
RcppExport SEXP _RobustCalibration_Chol_Eigen(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(Chol_Eigen(R));
    return rcpp_result_gen;
END_RCPP
}
// Mogihammer
Eigen::VectorXd Mogihammer(const MatrixXd obsCoords, const VectorXd m, int simul_type);
RcppExport SEXP _RobustCalibration_Mogihammer(SEXP obsCoordsSEXP, SEXP mSEXP, SEXP simul_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd >::type obsCoords(obsCoordsSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type simul_type(simul_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Mogihammer(obsCoords, m, simul_type));
    return rcpp_result_gen;
END_RCPP
}
// Accept_proposal
bool Accept_proposal(double r);
RcppExport SEXP _RobustCalibration_Accept_proposal(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(Accept_proposal(r));
    return rcpp_result_gen;
END_RCPP
}
// Get_R_z_new
MatrixXd Get_R_z_new(const Eigen::VectorXd beta_delta, const double eta_delta, const double tilde_lambda, const List R0, const String kernel_type, const Eigen::VectorXd alpha, const Eigen::VectorXd inv_output_weights);
RcppExport SEXP _RobustCalibration_Get_R_z_new(SEXP beta_deltaSEXP, SEXP eta_deltaSEXP, SEXP tilde_lambdaSEXP, SEXP R0SEXP, SEXP kernel_typeSEXP, SEXP alphaSEXP, SEXP inv_output_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type beta_delta(beta_deltaSEXP);
    Rcpp::traits::input_parameter< const double >::type eta_delta(eta_deltaSEXP);
    Rcpp::traits::input_parameter< const double >::type tilde_lambda(tilde_lambdaSEXP);
    Rcpp::traits::input_parameter< const List >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type inv_output_weights(inv_output_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_R_z_new(beta_delta, eta_delta, tilde_lambda, R0, kernel_type, alpha, inv_output_weights));
    return rcpp_result_gen;
END_RCPP
}
// Get_R_new
MatrixXd Get_R_new(const Eigen::VectorXd beta_delta, const double eta_delta, const List R0, const String kernel_type, const Eigen::VectorXd alpha, const Eigen::VectorXd inv_output_weights);
RcppExport SEXP _RobustCalibration_Get_R_new(SEXP beta_deltaSEXP, SEXP eta_deltaSEXP, SEXP R0SEXP, SEXP kernel_typeSEXP, SEXP alphaSEXP, SEXP inv_output_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type beta_delta(beta_deltaSEXP);
    Rcpp::traits::input_parameter< const double >::type eta_delta(eta_deltaSEXP);
    Rcpp::traits::input_parameter< const List >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type inv_output_weights(inv_output_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_R_new(beta_delta, eta_delta, R0, kernel_type, alpha, inv_output_weights));
    return rcpp_result_gen;
END_RCPP
}
// Sample_sigma_2_theta_m
Eigen::VectorXd Sample_sigma_2_theta_m(const Eigen::VectorXd param, const Eigen::MatrixXd L_cur, const Eigen::VectorXd output, const int p_theta, const int p_x, Eigen::MatrixXd X, bool have_mean, const VectorXd cm_obs);
RcppExport SEXP _RobustCalibration_Sample_sigma_2_theta_m(SEXP paramSEXP, SEXP L_curSEXP, SEXP outputSEXP, SEXP p_thetaSEXP, SEXP p_xSEXP, SEXP XSEXP, SEXP have_meanSEXP, SEXP cm_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type L_cur(L_curSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const int >::type p_theta(p_thetaSEXP);
    Rcpp::traits::input_parameter< const int >::type p_x(p_xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type have_mean(have_meanSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type cm_obs(cm_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(Sample_sigma_2_theta_m(param, L_cur, output, p_theta, p_x, X, have_mean, cm_obs));
    return rcpp_result_gen;
END_RCPP
}
// Log_marginal_post
double Log_marginal_post(const Eigen::VectorXd param, Eigen::MatrixXd L_cur, const Eigen::VectorXd output, const int p_theta, int p_x, Eigen::MatrixXd X, bool have_mean, const VectorXd CL, const double a, const double b, const VectorXd cm_obs);
RcppExport SEXP _RobustCalibration_Log_marginal_post(SEXP paramSEXP, SEXP L_curSEXP, SEXP outputSEXP, SEXP p_thetaSEXP, SEXP p_xSEXP, SEXP XSEXP, SEXP have_meanSEXP, SEXP CLSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cm_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type L_cur(L_curSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const int >::type p_theta(p_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type p_x(p_xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type have_mean(have_meanSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type CL(CLSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type cm_obs(cm_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(Log_marginal_post(param, L_cur, output, p_theta, p_x, X, have_mean, CL, a, b, cm_obs));
    return rcpp_result_gen;
END_RCPP
}
// Sample_sigma_2_theta_m_no_discrepancy
Eigen::VectorXd Sample_sigma_2_theta_m_no_discrepancy(const Eigen::VectorXd param, const Eigen::VectorXd output, const int p_theta, Eigen::MatrixXd X, bool have_mean, VectorXd inv_output_weights, const VectorXd cm_obs);
RcppExport SEXP _RobustCalibration_Sample_sigma_2_theta_m_no_discrepancy(SEXP paramSEXP, SEXP outputSEXP, SEXP p_thetaSEXP, SEXP XSEXP, SEXP have_meanSEXP, SEXP inv_output_weightsSEXP, SEXP cm_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const int >::type p_theta(p_thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type have_mean(have_meanSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type inv_output_weights(inv_output_weightsSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type cm_obs(cm_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(Sample_sigma_2_theta_m_no_discrepancy(param, output, p_theta, X, have_mean, inv_output_weights, cm_obs));
    return rcpp_result_gen;
END_RCPP
}
// Log_marginal_post_no_discrepancy
double Log_marginal_post_no_discrepancy(const Eigen::VectorXd param, const Eigen::VectorXd output, const int p_theta, Eigen::MatrixXd X, bool have_mean, VectorXd inv_output_weights, const VectorXd cm_obs);
RcppExport SEXP _RobustCalibration_Log_marginal_post_no_discrepancy(SEXP paramSEXP, SEXP outputSEXP, SEXP p_thetaSEXP, SEXP XSEXP, SEXP have_meanSEXP, SEXP inv_output_weightsSEXP, SEXP cm_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const int >::type p_theta(p_thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type have_mean(have_meanSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type inv_output_weights(inv_output_weightsSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type cm_obs(cm_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(Log_marginal_post_no_discrepancy(param, output, p_theta, X, have_mean, inv_output_weights, cm_obs));
    return rcpp_result_gen;
END_RCPP
}
// Update_R_inv_y
MatrixXd Update_R_inv_y(VectorXd R_inv_y, List R0, VectorXd beta_delta, String kernel_type, VectorXd alpha, double tilde_lambda, int num_obs);
RcppExport SEXP _RobustCalibration_Update_R_inv_y(SEXP R_inv_ySEXP, SEXP R0SEXP, SEXP beta_deltaSEXP, SEXP kernel_typeSEXP, SEXP alphaSEXP, SEXP tilde_lambdaSEXP, SEXP num_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type R_inv_y(R_inv_ySEXP);
    Rcpp::traits::input_parameter< List >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< VectorXd >::type beta_delta(beta_deltaSEXP);
    Rcpp::traits::input_parameter< String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tilde_lambda(tilde_lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_obs(num_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_R_inv_y(R_inv_y, R0, beta_delta, kernel_type, alpha, tilde_lambda, num_obs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RobustCalibration_Chol_Eigen", (DL_FUNC) &_RobustCalibration_Chol_Eigen, 1},
    {"_RobustCalibration_Mogihammer", (DL_FUNC) &_RobustCalibration_Mogihammer, 3},
    {"_RobustCalibration_Accept_proposal", (DL_FUNC) &_RobustCalibration_Accept_proposal, 1},
    {"_RobustCalibration_Get_R_z_new", (DL_FUNC) &_RobustCalibration_Get_R_z_new, 7},
    {"_RobustCalibration_Get_R_new", (DL_FUNC) &_RobustCalibration_Get_R_new, 6},
    {"_RobustCalibration_Sample_sigma_2_theta_m", (DL_FUNC) &_RobustCalibration_Sample_sigma_2_theta_m, 8},
    {"_RobustCalibration_Log_marginal_post", (DL_FUNC) &_RobustCalibration_Log_marginal_post, 11},
    {"_RobustCalibration_Sample_sigma_2_theta_m_no_discrepancy", (DL_FUNC) &_RobustCalibration_Sample_sigma_2_theta_m_no_discrepancy, 7},
    {"_RobustCalibration_Log_marginal_post_no_discrepancy", (DL_FUNC) &_RobustCalibration_Log_marginal_post_no_discrepancy, 7},
    {"_RobustCalibration_Update_R_inv_y", (DL_FUNC) &_RobustCalibration_Update_R_inv_y, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_RobustCalibration(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
