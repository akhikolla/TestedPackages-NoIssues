// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// parallelCountNbdm_DeepState_TestHarness_generation.cpp and parallelCountNbdm_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix parallelCountNbdm(NumericVector x, NumericVector y, IntegerVector ReferencePoints);

TEST(dbmss_deepstate_test,parallelCountNbdm_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbmss/inst/testfiles/parallelCountNbdm/AFL_parallelCountNbdm/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbmss/inst/testfiles/parallelCountNbdm/AFL_parallelCountNbdm/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  IntegerVector ReferencePoints  = RcppDeepState_IntegerVector();
  std::string ReferencePoints_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbmss/inst/testfiles/parallelCountNbdm/AFL_parallelCountNbdm/afl_inputs/" + std::to_string(t) + "_ReferencePoints.qs";
  qs::c_qsave(ReferencePoints,ReferencePoints_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ReferencePoints values: "<< ReferencePoints << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    parallelCountNbdm(x,y,ReferencePoints);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
