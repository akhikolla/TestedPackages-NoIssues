// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_blatent_RCPPEXPORTS_H_GEN_
#define RCPP_blatent_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace blatent {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("blatent", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("blatent", "_blatent_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in blatent");
            }
        }
    }

    inline double logdN01(const Rcpp::NumericVector& x, const Rcpp::List& pars, const Rcpp::DataFrame& data) {
        typedef SEXP(*Ptr_logdN01)(SEXP,SEXP,SEXP);
        static Ptr_logdN01 p_logdN01 = NULL;
        if (p_logdN01 == NULL) {
            validateSignature("double(*logdN01)(const Rcpp::NumericVector&,const Rcpp::List&,const Rcpp::DataFrame&)");
            p_logdN01 = (Ptr_logdN01)R_GetCCallable("blatent", "_blatent_logdN01");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_logdN01(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(pars)), Shield<SEXP>(Rcpp::wrap(data)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline SEXP create_xptr(std::string fstr) {
        typedef SEXP(*Ptr_create_xptr)(SEXP);
        static Ptr_create_xptr p_create_xptr = NULL;
        if (p_create_xptr == NULL) {
            validateSignature("SEXP(*create_xptr)(std::string)");
            p_create_xptr = (Ptr_create_xptr)R_GetCCallable("blatent", "_blatent_create_xptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_create_xptr(Shield<SEXP>(Rcpp::wrap(fstr)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

}

#endif // RCPP_blatent_RCPPEXPORTS_H_GEN_
