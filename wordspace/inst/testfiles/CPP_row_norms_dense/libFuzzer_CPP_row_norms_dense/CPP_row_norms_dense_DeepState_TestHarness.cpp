// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// CPP_row_norms_dense_DeepState_TestHarness_generation.cpp and CPP_row_norms_dense_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector CPP_row_norms_dense(NumericMatrix x, int norm_code, double p_norm);

TEST(wordspace_deepstate_test,CPP_row_norms_dense_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix x  = RcppDeepState_NumericMatrix();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wordspace/inst/testfiles/CPP_row_norms_dense/libFuzzer_CPP_row_norms_dense/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  IntegerVector norm_code(1);
  norm_code[0]  = RcppDeepState_int();
  std::string norm_code_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wordspace/inst/testfiles/CPP_row_norms_dense/libFuzzer_CPP_row_norms_dense/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_norm_code.qs";
  qs::c_qsave(norm_code,norm_code_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "norm_code values: "<< norm_code << std::endl;
  NumericVector p_norm(1);
  p_norm[0]  = RcppDeepState_double();
  std::string p_norm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wordspace/inst/testfiles/CPP_row_norms_dense/libFuzzer_CPP_row_norms_dense/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p_norm.qs";
  qs::c_qsave(p_norm,p_norm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p_norm values: "<< p_norm << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    CPP_row_norms_dense(x,norm_code[0],p_norm[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
