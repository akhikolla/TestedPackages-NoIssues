// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pej_DeepState_TestHarness_generation.cpp and pej_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double pej(NumericVector ejVec, int j, int m, int mu, double p, NumericVector z1tozjm1Vec);

TEST(ordinalClust_deepstate_test,pej_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector ejVec  = RcppDeepState_NumericVector();
  std::string ejVec_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/libFuzzer_pej/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ejVec.qs";
  qs::c_qsave(ejVec,ejVec_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ejVec values: "<< ejVec << std::endl;
  IntegerVector j(1);
  j[0]  = RcppDeepState_int();
  std::string j_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/libFuzzer_pej/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_j.qs";
  qs::c_qsave(j,j_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "j values: "<< j << std::endl;
  IntegerVector m(1);
  m[0]  = RcppDeepState_int();
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/libFuzzer_pej/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m.qs";
  qs::c_qsave(m,m_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m values: "<< m << std::endl;
  IntegerVector mu(1);
  mu[0]  = RcppDeepState_int();
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/libFuzzer_pej/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m.qs";
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/libFuzzer_pej/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector p(1);
  p[0]  = RcppDeepState_double();
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/libFuzzer_pej/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  qs::c_qsave(p,p_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  NumericVector z1tozjm1Vec  = RcppDeepState_NumericVector();
  std::string z1tozjm1Vec_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/libFuzzer_pej/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_z1tozjm1Vec.qs";
  qs::c_qsave(z1tozjm1Vec,z1tozjm1Vec_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "z1tozjm1Vec values: "<< z1tozjm1Vec << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pej(ejVec,j[0],m[0],mu[0],p[0],z1tozjm1Vec);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
