// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pej_DeepState_TestHarness_generation.cpp and pej_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double pej(NumericVector ejVec, int j, int m, int mu, double p, NumericVector z1tozjm1Vec);

TEST(ordinalClust_deepstate_test,pej_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector ejVec  = RcppDeepState_NumericVector();
  qs::c_qsave(ejVec,"/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/inputs/ejVec.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ejVec values: "<< ejVec << std::endl;
  IntegerVector j(1);
  j[0]  = RcppDeepState_int();
  qs::c_qsave(j,"/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/inputs/j.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "j values: "<< j << std::endl;
  IntegerVector m(1);
  m[0]  = RcppDeepState_int();
  qs::c_qsave(m,"/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/inputs/m.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m values: "<< m << std::endl;
  IntegerVector mu(1);
  mu[0]  = RcppDeepState_int();
  qs::c_qsave(mu,"/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/inputs/mu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector p(1);
  p[0]  = RcppDeepState_double();
  qs::c_qsave(p,"/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/inputs/p.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  NumericVector z1tozjm1Vec  = RcppDeepState_NumericVector();
  qs::c_qsave(z1tozjm1Vec,"/home/akhila/fuzzer_packages/fuzzedpackages/ordinalClust/inst/testfiles/pej/inputs/z1tozjm1Vec.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "z1tozjm1Vec values: "<< z1tozjm1Vec << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pej(ejVec,j[0],m[0],mu[0],p[0],z1tozjm1Vec);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
