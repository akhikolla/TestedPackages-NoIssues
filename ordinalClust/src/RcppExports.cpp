// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// testSeed
void testSeed(int seed);
RcppExport SEXP _ordinalClust_testSeed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    testSeed(seed);
    return R_NilValue;
END_RCPP
}
// coclust
S4 coclust(NumericMatrix xMat, std::vector<unsigned int> myList, int kr, std::vector<int> kc, std::string init, int nbSEM, int nbSEMburn, int nbRepeat, int nbindmini, const std::vector<int> m, std::vector<double> percentRandomB, int seed);
RcppExport SEXP _ordinalClust_coclust(SEXP xMatSEXP, SEXP myListSEXP, SEXP krSEXP, SEXP kcSEXP, SEXP initSEXP, SEXP nbSEMSEXP, SEXP nbSEMburnSEXP, SEXP nbRepeatSEXP, SEXP nbindminiSEXP, SEXP mSEXP, SEXP percentRandomBSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xMat(xMatSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type myList(myListSEXP);
    Rcpp::traits::input_parameter< int >::type kr(krSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type kc(kcSEXP);
    Rcpp::traits::input_parameter< std::string >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEM(nbSEMSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEMburn(nbSEMburnSEXP);
    Rcpp::traits::input_parameter< int >::type nbRepeat(nbRepeatSEXP);
    Rcpp::traits::input_parameter< int >::type nbindmini(nbindminiSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type percentRandomB(percentRandomBSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(coclust(xMat, myList, kr, kc, init, nbSEM, nbSEMburn, nbRepeat, nbindmini, m, percentRandomB, seed));
    return rcpp_result_gen;
END_RCPP
}
// clust
S4 clust(NumericMatrix xMat, std::vector<unsigned int> myList, int kr, std::string init, int nbSEM, int nbSEMburn, int nbindmini, const std::vector<int> m, std::vector<double> percentRandomB, int seed);
RcppExport SEXP _ordinalClust_clust(SEXP xMatSEXP, SEXP myListSEXP, SEXP krSEXP, SEXP initSEXP, SEXP nbSEMSEXP, SEXP nbSEMburnSEXP, SEXP nbindminiSEXP, SEXP mSEXP, SEXP percentRandomBSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xMat(xMatSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type myList(myListSEXP);
    Rcpp::traits::input_parameter< int >::type kr(krSEXP);
    Rcpp::traits::input_parameter< std::string >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEM(nbSEMSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEMburn(nbSEMburnSEXP);
    Rcpp::traits::input_parameter< int >::type nbindmini(nbindminiSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type percentRandomB(percentRandomBSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(clust(xMat, myList, kr, init, nbSEM, nbSEMburn, nbindmini, m, percentRandomB, seed));
    return rcpp_result_gen;
END_RCPP
}
// classif
S4 classif(NumericMatrix xMat, NumericVector yVec, std::vector<unsigned int> myList, int kr, std::vector<int> kc, std::string init, int nbSEM, int nbSEMburn, int nbindmini, const std::vector<int> m, std::vector<double> percentRandomB, int seed);
RcppExport SEXP _ordinalClust_classif(SEXP xMatSEXP, SEXP yVecSEXP, SEXP myListSEXP, SEXP krSEXP, SEXP kcSEXP, SEXP initSEXP, SEXP nbSEMSEXP, SEXP nbSEMburnSEXP, SEXP nbindminiSEXP, SEXP mSEXP, SEXP percentRandomBSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xMat(xMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yVec(yVecSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type myList(myListSEXP);
    Rcpp::traits::input_parameter< int >::type kr(krSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type kc(kcSEXP);
    Rcpp::traits::input_parameter< std::string >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEM(nbSEMSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEMburn(nbSEMburnSEXP);
    Rcpp::traits::input_parameter< int >::type nbindmini(nbindminiSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type percentRandomB(percentRandomBSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(classif(xMat, yVec, myList, kr, kc, init, nbSEM, nbSEMburn, nbindmini, m, percentRandomB, seed));
    return rcpp_result_gen;
END_RCPP
}
// classifM
S4 classifM(NumericMatrix xMat, NumericVector yVec, std::vector<unsigned int> myList, int kr, std::string init, int nbSEM, int nbSEMburn, int nbindmini, const std::vector<int> m, int seed);
RcppExport SEXP _ordinalClust_classifM(SEXP xMatSEXP, SEXP yVecSEXP, SEXP myListSEXP, SEXP krSEXP, SEXP initSEXP, SEXP nbSEMSEXP, SEXP nbSEMburnSEXP, SEXP nbindminiSEXP, SEXP mSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xMat(xMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yVec(yVecSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type myList(myListSEXP);
    Rcpp::traits::input_parameter< int >::type kr(krSEXP);
    Rcpp::traits::input_parameter< std::string >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEM(nbSEMSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEMburn(nbSEMburnSEXP);
    Rcpp::traits::input_parameter< int >::type nbindmini(nbindminiSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(classifM(xMat, yVec, myList, kr, init, nbSEM, nbSEMburn, nbindmini, m, seed));
    return rcpp_result_gen;
END_RCPP
}
// prediction
S4 prediction(S4 classif, NumericMatrix xMat_topredict, int seed);
RcppExport SEXP _ordinalClust_prediction(SEXP classifSEXP, SEXP xMat_topredictSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type classif(classifSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xMat_topredict(xMat_topredictSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(prediction(classif, xMat_topredict, seed));
    return rcpp_result_gen;
END_RCPP
}
// allej
NumericMatrix allej(int j, int m);
RcppExport SEXP _ordinalClust_allej(SEXP jSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(allej(j, m));
    return rcpp_result_gen;
END_RCPP
}
// pejp1zj1_ej
double pejp1zj1_ej(NumericVector ejp1Vec, NumericVector ejVec, int mu, double p);
RcppExport SEXP _ordinalClust_pejp1zj1_ej(SEXP ejp1VecSEXP, SEXP ejVecSEXP, SEXP muSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ejp1Vec(ejp1VecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ejVec(ejVecSEXP);
    Rcpp::traits::input_parameter< int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(pejp1zj1_ej(ejp1Vec, ejVec, mu, p));
    return rcpp_result_gen;
END_RCPP
}
// pejp1_ej
double pejp1_ej(NumericVector ejp1Vec, NumericVector ejVec, int mu, double p);
RcppExport SEXP _ordinalClust_pejp1_ej(SEXP ejp1VecSEXP, SEXP ejVecSEXP, SEXP muSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ejp1Vec(ejp1VecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ejVec(ejVecSEXP);
    Rcpp::traits::input_parameter< int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(pejp1_ej(ejp1Vec, ejVec, mu, p));
    return rcpp_result_gen;
END_RCPP
}
// pej
double pej(NumericVector ejVec, int j, int m, int mu, double p, NumericVector z1tozjm1Vec);
RcppExport SEXP _ordinalClust_pej(SEXP ejVecSEXP, SEXP jSEXP, SEXP mSEXP, SEXP muSEXP, SEXP pSEXP, SEXP z1tozjm1VecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ejVec(ejVecSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z1tozjm1Vec(z1tozjm1VecSEXP);
    rcpp_result_gen = Rcpp::wrap(pej(ejVec, j, m, mu, p, z1tozjm1Vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ordinalClust_testSeed", (DL_FUNC) &_ordinalClust_testSeed, 1},
    {"_ordinalClust_coclust", (DL_FUNC) &_ordinalClust_coclust, 12},
    {"_ordinalClust_clust", (DL_FUNC) &_ordinalClust_clust, 10},
    {"_ordinalClust_classif", (DL_FUNC) &_ordinalClust_classif, 12},
    {"_ordinalClust_classifM", (DL_FUNC) &_ordinalClust_classifM, 10},
    {"_ordinalClust_prediction", (DL_FUNC) &_ordinalClust_prediction, 3},
    {"_ordinalClust_allej", (DL_FUNC) &_ordinalClust_allej, 2},
    {"_ordinalClust_pejp1zj1_ej", (DL_FUNC) &_ordinalClust_pejp1zj1_ej, 4},
    {"_ordinalClust_pejp1_ej", (DL_FUNC) &_ordinalClust_pejp1_ej, 4},
    {"_ordinalClust_pej", (DL_FUNC) &_ordinalClust_pej, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ordinalClust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
