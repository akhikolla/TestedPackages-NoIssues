// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sparse_emp_cov_est1_DeepState_TestHarness_generation.cpp and sparse_emp_cov_est1_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

DataFrame sparse_emp_cov_est1(NumericMatrix X, int nRow, int nCol, int nnr, NumericVector pidx);

TEST(stfit_deepstate_test,sparse_emp_cov_est1_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/stfit/inst/testfiles/sparse_emp_cov_est1/libFuzzer_sparse_emp_cov_est1/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  IntegerVector nRow(1);
  nRow[0]  = RcppDeepState_int();
  std::string nRow_t = "/home/akhila/fuzzer_packages/fuzzedpackages/stfit/inst/testfiles/sparse_emp_cov_est1/libFuzzer_sparse_emp_cov_est1/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nRow.qs";
  qs::c_qsave(nRow,nRow_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nRow values: "<< nRow << std::endl;
  IntegerVector nCol(1);
  nCol[0]  = RcppDeepState_int();
  std::string nCol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/stfit/inst/testfiles/sparse_emp_cov_est1/libFuzzer_sparse_emp_cov_est1/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nCol.qs";
  qs::c_qsave(nCol,nCol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nCol values: "<< nCol << std::endl;
  IntegerVector nnr(1);
  nnr[0]  = RcppDeepState_int();
  std::string nnr_t = "/home/akhila/fuzzer_packages/fuzzedpackages/stfit/inst/testfiles/sparse_emp_cov_est1/libFuzzer_sparse_emp_cov_est1/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nnr.qs";
  qs::c_qsave(nnr,nnr_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nnr values: "<< nnr << std::endl;
  NumericVector pidx  = RcppDeepState_NumericVector();
  std::string pidx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/stfit/inst/testfiles/sparse_emp_cov_est1/libFuzzer_sparse_emp_cov_est1/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_pidx.qs";
  qs::c_qsave(pidx,pidx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pidx values: "<< pidx << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sparse_emp_cov_est1(X,nRow[0],nCol[0],nnr[0],pidx);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
