// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dptm_DeepState_TestHarness_generation.cpp and dptm_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix dptm(NumericMatrix pts, NumericMatrix myMeans, NumericVector wgts, int ppDim, int kkMean, int nn);

TEST(kamila_deepstate_test,dptm_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix pts  = RcppDeepState_NumericMatrix();
  qs::c_qsave(pts,"/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/inputs/pts.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pts values: "<< pts << std::endl;
  NumericMatrix myMeans  = RcppDeepState_NumericMatrix();
  qs::c_qsave(myMeans,"/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/inputs/myMeans.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "myMeans values: "<< myMeans << std::endl;
  NumericVector wgts  = RcppDeepState_NumericVector();
  qs::c_qsave(wgts,"/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/inputs/wgts.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wgts values: "<< wgts << std::endl;
  IntegerVector ppDim(1);
  ppDim[0]  = RcppDeepState_int();
  qs::c_qsave(ppDim,"/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/inputs/ppDim.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ppDim values: "<< ppDim << std::endl;
  IntegerVector kkMean(1);
  kkMean[0]  = RcppDeepState_int();
  qs::c_qsave(kkMean,"/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/inputs/kkMean.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kkMean values: "<< kkMean << std::endl;
  IntegerVector nn(1);
  nn[0]  = RcppDeepState_int();
  qs::c_qsave(nn,"/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/inputs/nn.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nn values: "<< nn << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dptm(pts,myMeans,wgts,ppDim[0],kkMean[0],nn[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
