// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dptm_DeepState_TestHarness_generation.cpp and dptm_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix dptm(NumericMatrix pts, NumericMatrix myMeans, NumericVector wgts, int ppDim, int kkMean, int nn);

TEST(kamila_deepstate_test,dptm_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix pts  = RcppDeepState_NumericMatrix();
  std::string pts_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/libFuzzer_dptm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_pts.qs";
  qs::c_qsave(pts,pts_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pts values: "<< pts << std::endl;
  NumericMatrix myMeans  = RcppDeepState_NumericMatrix();
  std::string myMeans_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/libFuzzer_dptm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_myMeans.qs";
  qs::c_qsave(myMeans,myMeans_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "myMeans values: "<< myMeans << std::endl;
  NumericVector wgts  = RcppDeepState_NumericVector();
  std::string wgts_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/libFuzzer_dptm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_wgts.qs";
  qs::c_qsave(wgts,wgts_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wgts values: "<< wgts << std::endl;
  IntegerVector ppDim(1);
  ppDim[0]  = RcppDeepState_int();
  std::string ppDim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/libFuzzer_dptm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ppDim.qs";
  qs::c_qsave(ppDim,ppDim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ppDim values: "<< ppDim << std::endl;
  IntegerVector kkMean(1);
  kkMean[0]  = RcppDeepState_int();
  std::string kkMean_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/libFuzzer_dptm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kkMean.qs";
  qs::c_qsave(kkMean,kkMean_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kkMean values: "<< kkMean << std::endl;
  IntegerVector nn(1);
  nn[0]  = RcppDeepState_int();
  std::string nn_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/dptm/libFuzzer_dptm/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nn.qs";
  qs::c_qsave(nn,nn_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nn values: "<< nn << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dptm(pts,myMeans,wgts,ppDim[0],kkMean[0],nn[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
