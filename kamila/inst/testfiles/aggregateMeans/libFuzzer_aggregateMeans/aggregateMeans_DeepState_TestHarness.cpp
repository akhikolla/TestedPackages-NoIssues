// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// aggregateMeans_DeepState_TestHarness_generation.cpp and aggregateMeans_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix aggregateMeans(NumericMatrix conVar, IntegerVector membNew, int kk);

TEST(kamila_deepstate_test,aggregateMeans_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix conVar  = RcppDeepState_NumericMatrix();
  std::string conVar_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/aggregateMeans/libFuzzer_aggregateMeans/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_conVar.qs";
  qs::c_qsave(conVar,conVar_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "conVar values: "<< conVar << std::endl;
  IntegerVector membNew  = RcppDeepState_IntegerVector();
  std::string membNew_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/aggregateMeans/libFuzzer_aggregateMeans/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_membNew.qs";
  qs::c_qsave(membNew,membNew_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "membNew values: "<< membNew << std::endl;
  IntegerVector kk(1);
  kk[0]  = RcppDeepState_int();
  std::string kk_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kamila/inst/testfiles/aggregateMeans/libFuzzer_aggregateMeans/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kk.qs";
  qs::c_qsave(kk,kk_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kk values: "<< kk << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    aggregateMeans(conVar,membNew,kk[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
