// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// mollweide_projection_DeepState_TestHarness_generation.cpp and mollweide_projection_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

DataFrame mollweide_projection(NumericVector latitude, NumericVector longitude, const double meridian);

TEST(glow_deepstate_test,mollweide_projection_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector latitude  = RcppDeepState_NumericVector();
  std::string latitude_t = "/home/akhila/fuzzer_packages/fuzzedpackages/glow/inst/testfiles/mollweide_projection/libFuzzer_mollweide_projection/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_latitude.qs";
  qs::c_qsave(latitude,latitude_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "latitude values: "<< latitude << std::endl;
  NumericVector longitude  = RcppDeepState_NumericVector();
  std::string longitude_t = "/home/akhila/fuzzer_packages/fuzzedpackages/glow/inst/testfiles/mollweide_projection/libFuzzer_mollweide_projection/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_longitude.qs";
  qs::c_qsave(longitude,longitude_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "longitude values: "<< longitude << std::endl;
  NumericVector meridian(1);
  meridian[0]  = RcppDeepState_double();
  std::string meridian_t = "/home/akhila/fuzzer_packages/fuzzedpackages/glow/inst/testfiles/mollweide_projection/libFuzzer_mollweide_projection/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_meridian.qs";
  qs::c_qsave(meridian,meridian_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "meridian values: "<< meridian << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    mollweide_projection(latitude,longitude,meridian[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
