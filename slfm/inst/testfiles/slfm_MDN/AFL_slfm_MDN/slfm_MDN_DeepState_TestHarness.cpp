// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// slfm_MDN_DeepState_TestHarness_generation.cpp and slfm_MDN_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List slfm_MDN(NumericMatrix x, double a, double b, double gamma_a, double gamma_b, double omega_1, int burnin, int lag, int npost);

TEST(slfm_deepstate_test,slfm_MDN_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix x  = RcppDeepState_NumericMatrix();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector a(1);
  a[0]  = RcppDeepState_double();
  std::string a_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_a.qs";
  qs::c_qsave(a,a_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a values: "<< a << std::endl;
  NumericVector b(1);
  b[0]  = RcppDeepState_double();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_b.qs";
  qs::c_qsave(b,b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericVector gamma_a(1);
  gamma_a[0]  = RcppDeepState_double();
  std::string gamma_a_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_gamma_a.qs";
  qs::c_qsave(gamma_a,gamma_a_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma_a values: "<< gamma_a << std::endl;
  NumericVector gamma_b(1);
  gamma_b[0]  = RcppDeepState_double();
  std::string gamma_b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_gamma_b.qs";
  qs::c_qsave(gamma_b,gamma_b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma_b values: "<< gamma_b << std::endl;
  NumericVector omega_1(1);
  omega_1[0]  = RcppDeepState_double();
  std::string omega_1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_omega_1.qs";
  qs::c_qsave(omega_1,omega_1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "omega_1 values: "<< omega_1 << std::endl;
  IntegerVector burnin(1);
  burnin[0]  = RcppDeepState_int();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_b.qs";
  std::string burnin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_burnin.qs";
  qs::c_qsave(burnin,burnin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "burnin values: "<< burnin << std::endl;
  IntegerVector lag(1);
  lag[0]  = RcppDeepState_int();
  std::string lag_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_lag.qs";
  qs::c_qsave(lag,lag_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lag values: "<< lag << std::endl;
  IntegerVector npost(1);
  npost[0]  = RcppDeepState_int();
  std::string npost_t = "/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MDN/AFL_slfm_MDN/afl_inputs/" + std::to_string(t) + "_npost.qs";
  qs::c_qsave(npost,npost_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "npost values: "<< npost << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    slfm_MDN(x,a[0],b[0],gamma_a[0],gamma_b[0],omega_1[0],burnin[0],lag[0],npost[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
