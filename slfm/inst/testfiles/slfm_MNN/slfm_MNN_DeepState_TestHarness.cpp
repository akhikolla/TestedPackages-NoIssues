// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// slfm_MNN_DeepState_TestHarness_generation.cpp and slfm_MNN_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List slfm_MNN(NumericMatrix x, double a, double b, double gamma_a, double gamma_b, double omega_0, double omega_1, int burnin, int lag, int npost);

TEST(slfm_deepstate_test,slfm_MNN_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix x  = RcppDeepState_NumericMatrix();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector a(1);
  a[0]  = RcppDeepState_double();
  qs::c_qsave(a,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/a.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a values: "<< a << std::endl;
  NumericVector b(1);
  b[0]  = RcppDeepState_double();
  qs::c_qsave(b,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/b.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericVector gamma_a(1);
  gamma_a[0]  = RcppDeepState_double();
  qs::c_qsave(gamma_a,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/gamma_a.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma_a values: "<< gamma_a << std::endl;
  NumericVector gamma_b(1);
  gamma_b[0]  = RcppDeepState_double();
  qs::c_qsave(gamma_b,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/gamma_b.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma_b values: "<< gamma_b << std::endl;
  NumericVector omega_0(1);
  omega_0[0]  = RcppDeepState_double();
  qs::c_qsave(omega_0,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/omega_0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "omega_0 values: "<< omega_0 << std::endl;
  NumericVector omega_1(1);
  omega_1[0]  = RcppDeepState_double();
  qs::c_qsave(omega_1,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/omega_1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "omega_1 values: "<< omega_1 << std::endl;
  IntegerVector burnin(1);
  burnin[0]  = RcppDeepState_int();
  qs::c_qsave(burnin,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/burnin.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "burnin values: "<< burnin << std::endl;
  IntegerVector lag(1);
  lag[0]  = RcppDeepState_int();
  qs::c_qsave(lag,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/lag.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lag values: "<< lag << std::endl;
  IntegerVector npost(1);
  npost[0]  = RcppDeepState_int();
  qs::c_qsave(npost,"/home/akhila/fuzzer_packages/fuzzedpackages/slfm/inst/testfiles/slfm_MNN/inputs/npost.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "npost values: "<< npost << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    slfm_MNN(x,a[0],b[0],gamma_a[0],gamma_b[0],omega_0[0],omega_1[0],burnin[0],lag[0],npost[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
