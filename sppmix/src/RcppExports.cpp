// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/sppmix.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ApproxAvgPostIntensity
mat ApproxAvgPostIntensity(List const& genmix, vec const& lamdas, int const& LL, int const& burnin, vec const& xlims, vec const& ylims, mat const& approxcomp);
RcppExport SEXP _sppmix_ApproxAvgPostIntensity(SEXP genmixSEXP, SEXP lamdasSEXP, SEXP LLSEXP, SEXP burninSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP approxcompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type genmix(genmixSEXP);
    Rcpp::traits::input_parameter< vec const& >::type lamdas(lamdasSEXP);
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< int const& >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< mat const& >::type approxcomp(approxcompSEXP);
    rcpp_result_gen = Rcpp::wrap(ApproxAvgPostIntensity(genmix, lamdas, LL, burnin, xlims, ylims, approxcomp));
    return rcpp_result_gen;
END_RCPP
}
// ApproxCompMass_sppmix
double ApproxCompMass_sppmix(vec const& xlims, vec const& ylims, vec const& mu, mat const& sigma);
RcppExport SEXP _sppmix_ApproxCompMass_sppmix(SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< mat const& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ApproxCompMass_sppmix(xlims, ylims, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ApproxMHRatiosig_sppmix
double ApproxMHRatiosig_sppmix(vec const& xlims, vec const& ylims, vec const& mu, mat const& cursigma, mat const& propsigma, int const& num);
RcppExport SEXP _sppmix_ApproxMHRatiosig_sppmix(SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP muSEXP, SEXP cursigmaSEXP, SEXP propsigmaSEXP, SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< mat const& >::type cursigma(cursigmaSEXP);
    Rcpp::traits::input_parameter< mat const& >::type propsigma(propsigmaSEXP);
    Rcpp::traits::input_parameter< int const& >::type num(numSEXP);
    rcpp_result_gen = Rcpp::wrap(ApproxMHRatiosig_sppmix(xlims, ylims, mu, cursigma, propsigma, num));
    return rcpp_result_gen;
END_RCPP
}
// ApproxBayesianModelAvgIntensity_sppmix
mat ApproxBayesianModelAvgIntensity_sppmix(List const& genBDmix, vec const& lamdas, vec const& numcomp, vec const& distr_numcomp, int const& mincomp, int const& maxcomp, int const& LL, vec const& xlims, vec const& ylims, mat const& approxcomp);
RcppExport SEXP _sppmix_ApproxBayesianModelAvgIntensity_sppmix(SEXP genBDmixSEXP, SEXP lamdasSEXP, SEXP numcompSEXP, SEXP distr_numcompSEXP, SEXP mincompSEXP, SEXP maxcompSEXP, SEXP LLSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP approxcompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type genBDmix(genBDmixSEXP);
    Rcpp::traits::input_parameter< vec const& >::type lamdas(lamdasSEXP);
    Rcpp::traits::input_parameter< vec const& >::type numcomp(numcompSEXP);
    Rcpp::traits::input_parameter< vec const& >::type distr_numcomp(distr_numcompSEXP);
    Rcpp::traits::input_parameter< int const& >::type mincomp(mincompSEXP);
    Rcpp::traits::input_parameter< int const& >::type maxcomp(maxcompSEXP);
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< mat const& >::type approxcomp(approxcompSEXP);
    rcpp_result_gen = Rcpp::wrap(ApproxBayesianModelAvgIntensity_sppmix(genBDmix, lamdas, numcomp, distr_numcomp, mincomp, maxcomp, LL, xlims, ylims, approxcomp));
    return rcpp_result_gen;
END_RCPP
}
// BDMCMC2d_sppmix
List BDMCMC2d_sppmix(int const& maxnumcomp, mat const& points, vec const& xlims, vec const& ylims, int const& L, bool const& truncate, double const& lamda, double const& lamdab, vec const& hyper);
RcppExport SEXP _sppmix_BDMCMC2d_sppmix(SEXP maxnumcompSEXP, SEXP pointsSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP LSEXP, SEXP truncateSEXP, SEXP lamdaSEXP, SEXP lamdabSEXP, SEXP hyperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type maxnumcomp(maxnumcompSEXP);
    Rcpp::traits::input_parameter< mat const& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< int const& >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    Rcpp::traits::input_parameter< double const& >::type lamda(lamdaSEXP);
    Rcpp::traits::input_parameter< double const& >::type lamdab(lamdabSEXP);
    Rcpp::traits::input_parameter< vec const& >::type hyper(hyperSEXP);
    rcpp_result_gen = Rcpp::wrap(BDMCMC2d_sppmix(maxnumcomp, points, xlims, ylims, L, truncate, lamda, lamdab, hyper));
    return rcpp_result_gen;
END_RCPP
}
// DAMCMC2d_sppmix
List DAMCMC2d_sppmix(mat const& points, vec const& xlims, vec const& ylims, int const& m, int const& L, bool const& truncate, vec const& hyperparams, bool const& useKmeans);
RcppExport SEXP _sppmix_DAMCMC2d_sppmix(SEXP pointsSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP mSEXP, SEXP LSEXP, SEXP truncateSEXP, SEXP hyperparamsSEXP, SEXP useKmeansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int const& >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    Rcpp::traits::input_parameter< vec const& >::type hyperparams(hyperparamsSEXP);
    Rcpp::traits::input_parameter< bool const& >::type useKmeans(useKmeansSEXP);
    rcpp_result_gen = Rcpp::wrap(DAMCMC2d_sppmix(points, xlims, ylims, m, L, truncate, hyperparams, useKmeans));
    return rcpp_result_gen;
END_RCPP
}
// DAMCMC2dRMCP_sppmix
List DAMCMC2dRMCP_sppmix(mat const& points, vec const& xlims, vec const& ylims, int const& m, int const& L, bool const& truncate, vec const& d, vec const& mu0, mat const& Sigma0, int const& df0, double const& sig0, bool const& useKmeans, mat const& startmus);
RcppExport SEXP _sppmix_DAMCMC2dRMCP_sppmix(SEXP pointsSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP mSEXP, SEXP LSEXP, SEXP truncateSEXP, SEXP dSEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP df0SEXP, SEXP sig0SEXP, SEXP useKmeansSEXP, SEXP startmusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int const& >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    Rcpp::traits::input_parameter< vec const& >::type d(dSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< mat const& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< int const& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< double const& >::type sig0(sig0SEXP);
    Rcpp::traits::input_parameter< bool const& >::type useKmeans(useKmeansSEXP);
    Rcpp::traits::input_parameter< mat const& >::type startmus(startmusSEXP);
    rcpp_result_gen = Rcpp::wrap(DAMCMC2dRMCP_sppmix(points, xlims, ylims, m, L, truncate, d, mu0, Sigma0, df0, sig0, useKmeans, startmus));
    return rcpp_result_gen;
END_RCPP
}
// TriangleArea
double TriangleArea(vec const& a, vec const& b, vec const& c);
RcppExport SEXP _sppmix_TriangleArea(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type a(aSEXP);
    Rcpp::traits::input_parameter< vec const& >::type b(bSEXP);
    Rcpp::traits::input_parameter< vec const& >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(TriangleArea(a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// CheckTriangleCLockwise
int CheckTriangleCLockwise(vec const& a, vec const& b, vec const& c);
RcppExport SEXP _sppmix_CheckTriangleCLockwise(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type a(aSEXP);
    Rcpp::traits::input_parameter< vec const& >::type b(bSEXP);
    Rcpp::traits::input_parameter< vec const& >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(CheckTriangleCLockwise(a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// CheckInPoly
bool CheckInPoly(mat const& poly, vec const& xy);
RcppExport SEXP _sppmix_CheckInPoly(SEXP polySEXP, SEXP xySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< vec const& >::type xy(xySEXP);
    rcpp_result_gen = Rcpp::wrap(CheckInPoly(poly, xy));
    return rcpp_result_gen;
END_RCPP
}
// MatrixNorm
double MatrixNorm(mat const& M, double const& p);
RcppExport SEXP _sppmix_MatrixNorm(SEXP MSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double const& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixNorm(M, p));
    return rcpp_result_gen;
END_RCPP
}
// MatTrace
double MatTrace(mat const& M);
RcppExport SEXP _sppmix_MatTrace(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(MatTrace(M));
    return rcpp_result_gen;
END_RCPP
}
// Quad_sppmix
double Quad_sppmix(vec const& v, mat const& m);
RcppExport SEXP _sppmix_Quad_sppmix(SEXP vSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type v(vSEXP);
    Rcpp::traits::input_parameter< mat const& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(Quad_sppmix(v, m));
    return rcpp_result_gen;
END_RCPP
}
// VecNorm2
double VecNorm2(vec const& v);
RcppExport SEXP _sppmix_VecNorm2(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(VecNorm2(v));
    return rcpp_result_gen;
END_RCPP
}
// VecLen2
double VecLen2(vec const& v);
RcppExport SEXP _sppmix_VecLen2(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(VecLen2(v));
    return rcpp_result_gen;
END_RCPP
}
// SQ_sppmix
double SQ_sppmix(double const& x);
RcppExport SEXP _sppmix_SQ_sppmix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double const& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(SQ_sppmix(x));
    return rcpp_result_gen;
END_RCPP
}
// Factorial_sppmix
double Factorial_sppmix(int x);
RcppExport SEXP _sppmix_Factorial_sppmix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Factorial_sppmix(x));
    return rcpp_result_gen;
END_RCPP
}
// invmat2d_sppmix
mat invmat2d_sppmix(mat const& A);
RcppExport SEXP _sppmix_invmat2d_sppmix(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(invmat2d_sppmix(A));
    return rcpp_result_gen;
END_RCPP
}
// densNormMixatx_sppmix
double densNormMixatx_sppmix(vec const& atx, List const& mix, vec const& approxcomp);
RcppExport SEXP _sppmix_densNormMixatx_sppmix(SEXP atxSEXP, SEXP mixSEXP, SEXP approxcompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type atx(atxSEXP);
    Rcpp::traits::input_parameter< List const& >::type mix(mixSEXP);
    Rcpp::traits::input_parameter< vec const& >::type approxcomp(approxcompSEXP);
    rcpp_result_gen = Rcpp::wrap(densNormMixatx_sppmix(atx, mix, approxcomp));
    return rcpp_result_gen;
END_RCPP
}
// densNormMix_atxy_sppmix
vec densNormMix_atxy_sppmix(mat const& atxy, List const& mix, vec const& approxcomp);
RcppExport SEXP _sppmix_densNormMix_atxy_sppmix(SEXP atxySEXP, SEXP mixSEXP, SEXP approxcompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type atxy(atxySEXP);
    Rcpp::traits::input_parameter< List const& >::type mix(mixSEXP);
    Rcpp::traits::input_parameter< vec const& >::type approxcomp(approxcompSEXP);
    rcpp_result_gen = Rcpp::wrap(densNormMix_atxy_sppmix(atxy, mix, approxcomp));
    return rcpp_result_gen;
END_RCPP
}
// dNormMix_sppmix
mat dNormMix_sppmix(List const& mix, vec const& x, vec const& y, vec const& approxcomp);
RcppExport SEXP _sppmix_dNormMix_sppmix(SEXP mixSEXP, SEXP xSEXP, SEXP ySEXP, SEXP approxcompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type mix(mixSEXP);
    Rcpp::traits::input_parameter< vec const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec const& >::type approxcomp(approxcompSEXP);
    rcpp_result_gen = Rcpp::wrap(dNormMix_sppmix(mix, x, y, approxcomp));
    return rcpp_result_gen;
END_RCPP
}
// Permute_vec_sppmix
vec Permute_vec_sppmix(vec const& oldvec, vec const& perm);
RcppExport SEXP _sppmix_Permute_vec_sppmix(SEXP oldvecSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type oldvec(oldvecSEXP);
    Rcpp::traits::input_parameter< vec const& >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(Permute_vec_sppmix(oldvec, perm));
    return rcpp_result_gen;
END_RCPP
}
// Permute_mat_sppmix
mat Permute_mat_sppmix(mat const& oldmat, vec const& perm);
RcppExport SEXP _sppmix_Permute_mat_sppmix(SEXP oldmatSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type oldmat(oldmatSEXP);
    Rcpp::traits::input_parameter< vec const& >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(Permute_mat_sppmix(oldmat, perm));
    return rcpp_result_gen;
END_RCPP
}
// GetAllPermutations_sppmix
mat GetAllPermutations_sppmix(int const& m);
RcppExport SEXP _sppmix_GetAllPermutations_sppmix(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAllPermutations_sppmix(m));
    return rcpp_result_gen;
END_RCPP
}
// GetAPermutation_sppmix
vec GetAPermutation_sppmix(int const& m, int const& which);
RcppExport SEXP _sppmix_GetAPermutation_sppmix(SEXP mSEXP, SEXP whichSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int const& >::type which(whichSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAPermutation_sppmix(m, which));
    return rcpp_result_gen;
END_RCPP
}
// GetGrid_sppmix
List GetGrid_sppmix(int const& len, vec const& xlims, vec const& ylims);
RcppExport SEXP _sppmix_GetGrid_sppmix(SEXP lenSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type len(lenSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetGrid_sppmix(len, xlims, ylims));
    return rcpp_result_gen;
END_RCPP
}
// EqVec_sppmix
bool EqVec_sppmix(vec const& v1, vec const& v2, double const& tol);
RcppExport SEXP _sppmix_EqVec_sppmix(SEXP v1SEXP, SEXP v2SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< vec const& >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< double const& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(EqVec_sppmix(v1, v2, tol));
    return rcpp_result_gen;
END_RCPP
}
// logGammaFunc_sppmix
double logGammaFunc_sppmix(double const& x);
RcppExport SEXP _sppmix_logGammaFunc_sppmix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double const& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logGammaFunc_sppmix(x));
    return rcpp_result_gen;
END_RCPP
}
// GammaFunc_sppmix
double GammaFunc_sppmix(double const& x);
RcppExport SEXP _sppmix_GammaFunc_sppmix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double const& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(GammaFunc_sppmix(x));
    return rcpp_result_gen;
END_RCPP
}
// dDirichlet_sppmix
double dDirichlet_sppmix(vec const& ps, vec const& ds);
RcppExport SEXP _sppmix_dDirichlet_sppmix(SEXP psSEXP, SEXP dsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type ps(psSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ds(dsSEXP);
    rcpp_result_gen = Rcpp::wrap(dDirichlet_sppmix(ps, ds));
    return rcpp_result_gen;
END_RCPP
}
// SumVec_sppmix
double SumVec_sppmix(vec const& v, int const& start, int const& end);
RcppExport SEXP _sppmix_SumVec_sppmix(SEXP vSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int const& >::type start(startSEXP);
    Rcpp::traits::input_parameter< int const& >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(SumVec_sppmix(v, start, end));
    return rcpp_result_gen;
END_RCPP
}
// SubstituteVec_sppmix
vec SubstituteVec_sppmix(vec v, vec const& subv, int const& start);
RcppExport SEXP _sppmix_SubstituteVec_sppmix(SEXP vSEXP, SEXP subvSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< vec const& >::type subv(subvSEXP);
    Rcpp::traits::input_parameter< int const& >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(SubstituteVec_sppmix(v, subv, start));
    return rcpp_result_gen;
END_RCPP
}
// SubVec_sppmix
vec SubVec_sppmix(vec const& v, int const& start, int const& end);
RcppExport SEXP _sppmix_SubVec_sppmix(SEXP vSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int const& >::type start(startSEXP);
    Rcpp::traits::input_parameter< int const& >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(SubVec_sppmix(v, start, end));
    return rcpp_result_gen;
END_RCPP
}
// GetMixtureMaxz_sppmix
double GetMixtureMaxz_sppmix(List const& genmix, int const& len, vec const& xlims, vec const& ylims, vec const& approxcomp);
RcppExport SEXP _sppmix_GetMixtureMaxz_sppmix(SEXP genmixSEXP, SEXP lenSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP approxcompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type genmix(genmixSEXP);
    Rcpp::traits::input_parameter< int const& >::type len(lenSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type approxcomp(approxcompSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMixtureMaxz_sppmix(genmix, len, xlims, ylims, approxcomp));
    return rcpp_result_gen;
END_RCPP
}
// MakeMixtureList_sppmix
List MakeMixtureList_sppmix(List const& gens_list, int const& burnin);
RcppExport SEXP _sppmix_MakeMixtureList_sppmix(SEXP gens_listSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type gens_list(gens_listSEXP);
    Rcpp::traits::input_parameter< int const& >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(MakeMixtureList_sppmix(gens_list, burnin));
    return rcpp_result_gen;
END_RCPP
}
// CheckInWindow_sppmix
List CheckInWindow_sppmix(mat const& points, vec const& xlims, vec const& ylims, bool const& truncate, bool const& show);
RcppExport SEXP _sppmix_CheckInWindow_sppmix(SEXP pointsSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP truncateSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    Rcpp::traits::input_parameter< bool const& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(CheckInWindow_sppmix(points, xlims, ylims, truncate, show));
    return rcpp_result_gen;
END_RCPP
}
// GetMax_sppmix
List GetMax_sppmix(vec const& v);
RcppExport SEXP _sppmix_GetMax_sppmix(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMax_sppmix(v));
    return rcpp_result_gen;
END_RCPP
}
// dNormal1d_sppmix
double dNormal1d_sppmix(double const& atx, double const& mu, double const& sigsq);
RcppExport SEXP _sppmix_dNormal1d_sppmix(SEXP atxSEXP, SEXP muSEXP, SEXP sigsqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double const& >::type atx(atxSEXP);
    Rcpp::traits::input_parameter< double const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double const& >::type sigsq(sigsqSEXP);
    rcpp_result_gen = Rcpp::wrap(dNormal1d_sppmix(atx, mu, sigsq));
    return rcpp_result_gen;
END_RCPP
}
// dNormal_sppmix
double dNormal_sppmix(vec const& atx, vec const& mu, mat const& sig);
RcppExport SEXP _sppmix_dNormal_sppmix(SEXP atxSEXP, SEXP muSEXP, SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type atx(atxSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< mat const& >::type sig(sigSEXP);
    rcpp_result_gen = Rcpp::wrap(dNormal_sppmix(atx, mu, sig));
    return rcpp_result_gen;
END_RCPP
}
// MultGamma
double MultGamma(int const& p, int const& n);
RcppExport SEXP _sppmix_MultGamma(SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type p(pSEXP);
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(MultGamma(p, n));
    return rcpp_result_gen;
END_RCPP
}
// dInvWishart_sppmix
double dInvWishart_sppmix(mat const& W, double const& df, mat const& alpha);
RcppExport SEXP _sppmix_dInvWishart_sppmix(SEXP WSEXP, SEXP dfSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type W(WSEXP);
    Rcpp::traits::input_parameter< double const& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< mat const& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dInvWishart_sppmix(W, df, alpha));
    return rcpp_result_gen;
END_RCPP
}
// MIPPCondLoc_sppmix
List MIPPCondLoc_sppmix(mat const& points, vec const& marks, vec const& xlims, vec const& ylims, int const& L, bool const& truncate, vec const& hyperparams, vec const& uniquemarks, bool const& discrete_mark, double const& r);
RcppExport SEXP _sppmix_MIPPCondLoc_sppmix(SEXP pointsSEXP, SEXP marksSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP LSEXP, SEXP truncateSEXP, SEXP hyperparamsSEXP, SEXP uniquemarksSEXP, SEXP discrete_markSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type marks(marksSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< int const& >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    Rcpp::traits::input_parameter< vec const& >::type hyperparams(hyperparamsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type uniquemarks(uniquemarksSEXP);
    Rcpp::traits::input_parameter< bool const& >::type discrete_mark(discrete_markSEXP);
    Rcpp::traits::input_parameter< double const& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(MIPPCondLoc_sppmix(points, marks, xlims, ylims, L, truncate, hyperparams, uniquemarks, discrete_mark, r));
    return rcpp_result_gen;
END_RCPP
}
// GetProbFieldsCondLoc_sppmix
List GetProbFieldsCondLoc_sppmix(mat const& points, vec const& marks, vec const& xlims, vec const& ylims, int const& LL, vec const& meangamma, vec const& uniquemarks, bool const& truncate, double const& r);
RcppExport SEXP _sppmix_GetProbFieldsCondLoc_sppmix(SEXP pointsSEXP, SEXP marksSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP LLSEXP, SEXP meangammaSEXP, SEXP uniquemarksSEXP, SEXP truncateSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type marks(marksSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< vec const& >::type meangamma(meangammaSEXP);
    Rcpp::traits::input_parameter< vec const& >::type uniquemarks(uniquemarksSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    Rcpp::traits::input_parameter< double const& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(GetProbFieldsCondLoc_sppmix(points, marks, xlims, ylims, LL, meangamma, uniquemarks, truncate, r));
    return rcpp_result_gen;
END_RCPP
}
// GenMarksProbCondLoc_sppmix
List GenMarksProbCondLoc_sppmix(mat const& points, int const& L, vec const& xlims, vec const& ylims, vec const& meangamma, vec const& uniquemarks, bool const& truncate, double const& r);
RcppExport SEXP _sppmix_GenMarksProbCondLoc_sppmix(SEXP pointsSEXP, SEXP LSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP meangammaSEXP, SEXP uniquemarksSEXP, SEXP truncateSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< int const& >::type L(LSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type meangamma(meangammaSEXP);
    Rcpp::traits::input_parameter< vec const& >::type uniquemarks(uniquemarksSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    Rcpp::traits::input_parameter< double const& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(GenMarksProbCondLoc_sppmix(points, L, xlims, ylims, meangamma, uniquemarks, truncate, r));
    return rcpp_result_gen;
END_RCPP
}
// GetProbCondLoc_sppmix
List GetProbCondLoc_sppmix(mat const& points, vec const& origmarks, vec const& xlims, vec const& ylims, vec const& meangamma, vec const& uniquemarks, bool const& truncate, double const& r);
RcppExport SEXP _sppmix_GetProbCondLoc_sppmix(SEXP pointsSEXP, SEXP origmarksSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP meangammaSEXP, SEXP uniquemarksSEXP, SEXP truncateSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type origmarks(origmarksSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type meangamma(meangammaSEXP);
    Rcpp::traits::input_parameter< vec const& >::type uniquemarks(uniquemarksSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    Rcpp::traits::input_parameter< double const& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(GetProbCondLoc_sppmix(points, origmarks, xlims, ylims, meangamma, uniquemarks, truncate, r));
    return rcpp_result_gen;
END_RCPP
}
// GetPriorVals_sppmix
vec GetPriorVals_sppmix(mat const& pp, List const& allgens, int const& priortype, vec const& d, vec const& mu0, mat const& Sigma0, int const& df0, double const& sig0);
RcppExport SEXP _sppmix_GetPriorVals_sppmix(SEXP ppSEXP, SEXP allgensSEXP, SEXP priortypeSEXP, SEXP dSEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP df0SEXP, SEXP sig0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    Rcpp::traits::input_parameter< int const& >::type priortype(priortypeSEXP);
    Rcpp::traits::input_parameter< vec const& >::type d(dSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< mat const& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< int const& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< double const& >::type sig0(sig0SEXP);
    rcpp_result_gen = Rcpp::wrap(GetPriorVals_sppmix(pp, allgens, priortype, d, mu0, Sigma0, df0, sig0));
    return rcpp_result_gen;
END_RCPP
}
// GetStats_sppmix
List GetStats_sppmix(vec const& gens, double const& alpha);
RcppExport SEXP _sppmix_GetStats_sppmix(SEXP gensSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type gens(gensSEXP);
    Rcpp::traits::input_parameter< double const& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(GetStats_sppmix(gens, alpha));
    return rcpp_result_gen;
END_RCPP
}
// GetAllRealiz_ps_sppmix
mat GetAllRealiz_ps_sppmix(List const& allgens);
RcppExport SEXP _sppmix_GetAllRealiz_ps_sppmix(SEXP allgensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAllRealiz_ps_sppmix(allgens));
    return rcpp_result_gen;
END_RCPP
}
// GetAllRealiz_mus_sppmix
List GetAllRealiz_mus_sppmix(List const& allgens);
RcppExport SEXP _sppmix_GetAllRealiz_mus_sppmix(SEXP allgensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAllRealiz_mus_sppmix(allgens));
    return rcpp_result_gen;
END_RCPP
}
// GetAllRealiz_sigmas_sppmix
List GetAllRealiz_sigmas_sppmix(List const& allgens);
RcppExport SEXP _sppmix_GetAllRealiz_sigmas_sppmix(SEXP allgensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAllRealiz_sigmas_sppmix(allgens));
    return rcpp_result_gen;
END_RCPP
}
// GetRealiz_ps_sppmix
vec GetRealiz_ps_sppmix(List const& allgens, int const& realiz);
RcppExport SEXP _sppmix_GetRealiz_ps_sppmix(SEXP allgensSEXP, SEXP realizSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    Rcpp::traits::input_parameter< int const& >::type realiz(realizSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRealiz_ps_sppmix(allgens, realiz));
    return rcpp_result_gen;
END_RCPP
}
// GetRealiz_mus_sppmix
mat GetRealiz_mus_sppmix(List const& allgens, int const& realiz);
RcppExport SEXP _sppmix_GetRealiz_mus_sppmix(SEXP allgensSEXP, SEXP realizSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    Rcpp::traits::input_parameter< int const& >::type realiz(realizSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRealiz_mus_sppmix(allgens, realiz));
    return rcpp_result_gen;
END_RCPP
}
// GetRealiz_sigmas_sppmix
mat GetRealiz_sigmas_sppmix(List const& allgens, int const& realiz);
RcppExport SEXP _sppmix_GetRealiz_sigmas_sppmix(SEXP allgensSEXP, SEXP realizSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    Rcpp::traits::input_parameter< int const& >::type realiz(realizSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRealiz_sigmas_sppmix(allgens, realiz));
    return rcpp_result_gen;
END_RCPP
}
// PostGenGetBestPerm_sppmix
List PostGenGetBestPerm_sppmix(List const& allgens);
RcppExport SEXP _sppmix_PostGenGetBestPerm_sppmix(SEXP allgensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    rcpp_result_gen = Rcpp::wrap(PostGenGetBestPerm_sppmix(allgens));
    return rcpp_result_gen;
END_RCPP
}
// GetAllMeans_sppmix
List GetAllMeans_sppmix(List const& allgens, int const& burnin);
RcppExport SEXP _sppmix_GetAllMeans_sppmix(SEXP allgensSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    Rcpp::traits::input_parameter< int const& >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAllMeans_sppmix(allgens, burnin));
    return rcpp_result_gen;
END_RCPP
}
// GetCompDistr_sppmix
vec GetCompDistr_sppmix(vec const& numcomp, int const& maxnumcomp);
RcppExport SEXP _sppmix_GetCompDistr_sppmix(SEXP numcompSEXP, SEXP maxnumcompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type numcomp(numcompSEXP);
    Rcpp::traits::input_parameter< int const& >::type maxnumcomp(maxnumcompSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCompDistr_sppmix(numcomp, maxnumcomp));
    return rcpp_result_gen;
END_RCPP
}
// GetBDCompRealiz_sppmix
List GetBDCompRealiz_sppmix(List const& genBDmix, vec const& genlamdas, vec const& numcomp, int const& comp);
RcppExport SEXP _sppmix_GetBDCompRealiz_sppmix(SEXP genBDmixSEXP, SEXP genlamdasSEXP, SEXP numcompSEXP, SEXP compSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type genBDmix(genBDmixSEXP);
    Rcpp::traits::input_parameter< vec const& >::type genlamdas(genlamdasSEXP);
    Rcpp::traits::input_parameter< vec const& >::type numcomp(numcompSEXP);
    Rcpp::traits::input_parameter< int const& >::type comp(compSEXP);
    rcpp_result_gen = Rcpp::wrap(GetBDCompRealiz_sppmix(genBDmix, genlamdas, numcomp, comp));
    return rcpp_result_gen;
END_RCPP
}
// GetAvgLabelsDiscrete2Multinomial_sppmix
mat GetAvgLabelsDiscrete2Multinomial_sppmix(mat       const& genzs, int const& m);
RcppExport SEXP _sppmix_GetAvgLabelsDiscrete2Multinomial_sppmix(SEXP genzsSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat       const& >::type genzs(genzsSEXP);
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAvgLabelsDiscrete2Multinomial_sppmix(genzs, m));
    return rcpp_result_gen;
END_RCPP
}
// Check4LabelSwitching_sppmix
bool Check4LabelSwitching_sppmix(vec const& chain, int const& lag);
RcppExport SEXP _sppmix_Check4LabelSwitching_sppmix(SEXP chainSEXP, SEXP lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< int const& >::type lag(lagSEXP);
    rcpp_result_gen = Rcpp::wrap(Check4LabelSwitching_sppmix(chain, lag));
    return rcpp_result_gen;
END_RCPP
}
// PostGenGetBestPermIdenConstraint_sppmix
List PostGenGetBestPermIdenConstraint_sppmix(List const& allgens);
RcppExport SEXP _sppmix_PostGenGetBestPermIdenConstraint_sppmix(SEXP allgensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type allgens(allgensSEXP);
    rcpp_result_gen = Rcpp::wrap(PostGenGetBestPermIdenConstraint_sppmix(allgens));
    return rcpp_result_gen;
END_RCPP
}
// PermuteZs_sppmix
mat PermuteZs_sppmix(mat const& allgens_zs, mat const& bestperm);
RcppExport SEXP _sppmix_PermuteZs_sppmix(SEXP allgens_zsSEXP, SEXP bestpermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type allgens_zs(allgens_zsSEXP);
    Rcpp::traits::input_parameter< mat const& >::type bestperm(bestpermSEXP);
    rcpp_result_gen = Rcpp::wrap(PermuteZs_sppmix(allgens_zs, bestperm));
    return rcpp_result_gen;
END_RCPP
}
// FisherInfoMat_sppmix
mat FisherInfoMat_sppmix(mat const& data, vec const& map_ps, mat const& map_mus, List const& map_sigmas, mat const& map_zs);
RcppExport SEXP _sppmix_FisherInfoMat_sppmix(SEXP dataSEXP, SEXP map_psSEXP, SEXP map_musSEXP, SEXP map_sigmasSEXP, SEXP map_zsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< vec const& >::type map_ps(map_psSEXP);
    Rcpp::traits::input_parameter< mat const& >::type map_mus(map_musSEXP);
    Rcpp::traits::input_parameter< List const& >::type map_sigmas(map_sigmasSEXP);
    Rcpp::traits::input_parameter< mat const& >::type map_zs(map_zsSEXP);
    rcpp_result_gen = Rcpp::wrap(FisherInfoMat_sppmix(data, map_ps, map_mus, map_sigmas, map_zs));
    return rcpp_result_gen;
END_RCPP
}
// GetDensityValues_sppmix
List GetDensityValues_sppmix(mat const& data, List const& fit, vec const& xlims, vec const& ylims);
RcppExport SEXP _sppmix_GetDensityValues_sppmix(SEXP dataSEXP, SEXP fitSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List const& >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDensityValues_sppmix(data, fit, xlims, ylims));
    return rcpp_result_gen;
END_RCPP
}
// ComputeBayesFactor_sppmix
double ComputeBayesFactor_sppmix(mat const& densvals1, mat const& densvals2);
RcppExport SEXP _sppmix_ComputeBayesFactor_sppmix(SEXP densvals1SEXP, SEXP densvals2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type densvals1(densvals1SEXP);
    Rcpp::traits::input_parameter< mat const& >::type densvals2(densvals2SEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeBayesFactor_sppmix(densvals1, densvals2));
    return rcpp_result_gen;
END_RCPP
}
// ApproxBivNormProb_sppmix
double ApproxBivNormProb_sppmix(vec const& xlims, vec const& ylims, vec const& mu, mat const& sigma, int type);
RcppExport SEXP _sppmix_ApproxBivNormProb_sppmix(SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< mat const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(ApproxBivNormProb_sppmix(xlims, ylims, mu, sigma, type));
    return rcpp_result_gen;
END_RCPP
}
// rnorm2_sppmix
mat rnorm2_sppmix(int const& n, vec const& mu, mat const& sigma);
RcppExport SEXP _sppmix_rnorm2_sppmix(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< mat const& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rnorm2_sppmix(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rWishart_sppmix
mat rWishart_sppmix(int const& df, mat const& A);
RcppExport SEXP _sppmix_rWishart_sppmix(SEXP dfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< mat const& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(rWishart_sppmix(df, A));
    return rcpp_result_gen;
END_RCPP
}
// rDiscrete_sppmix
int rDiscrete_sppmix(int const& start, vec const& probs);
RcppExport SEXP _sppmix_rDiscrete_sppmix(SEXP startSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type start(startSEXP);
    Rcpp::traits::input_parameter< vec const& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(rDiscrete_sppmix(start, probs));
    return rcpp_result_gen;
END_RCPP
}
// rBinom_sppmix
int rBinom_sppmix(int const& n, double const& p);
RcppExport SEXP _sppmix_rBinom_sppmix(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< double const& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rBinom_sppmix(n, p));
    return rcpp_result_gen;
END_RCPP
}
// rExp_sppmix
double rExp_sppmix(double const& a);
RcppExport SEXP _sppmix_rExp_sppmix(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double const& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(rExp_sppmix(a));
    return rcpp_result_gen;
END_RCPP
}
// rDirichlet_sppmix
vec rDirichlet_sppmix(vec const& d);
RcppExport SEXP _sppmix_rDirichlet_sppmix(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(rDirichlet_sppmix(d));
    return rcpp_result_gen;
END_RCPP
}
// rMultinomial_sppmix
vec rMultinomial_sppmix(int const& n, vec const& ps);
RcppExport SEXP _sppmix_rMultinomial_sppmix(SEXP nSEXP, SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(rMultinomial_sppmix(n, ps));
    return rcpp_result_gen;
END_RCPP
}
// rNormMix_sppmix
List rNormMix_sppmix(int const& lamda, List const& mix);
RcppExport SEXP _sppmix_rNormMix_sppmix(SEXP lamdaSEXP, SEXP mixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type lamda(lamdaSEXP);
    Rcpp::traits::input_parameter< List const& >::type mix(mixSEXP);
    rcpp_result_gen = Rcpp::wrap(rNormMix_sppmix(lamda, mix));
    return rcpp_result_gen;
END_RCPP
}
// rPerm_sppmix
vec rPerm_sppmix(int const& n);
RcppExport SEXP _sppmix_rPerm_sppmix(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rPerm_sppmix(n));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_sppmix
vec rmvnorm_sppmix(vec const& mu, mat const& sigma);
RcppExport SEXP _sppmix_rmvnorm_sppmix(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< mat const& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_sppmix(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
