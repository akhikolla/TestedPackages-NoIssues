// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// across_fip_DeepState_TestHarness_generation.cpp and across_fip_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector across_fip(NumericMatrix X, NumericVector tau, double p, NumericVector epp, double p1, double Ts);

TEST(wbsts_deepstate_test,across_fip_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wbsts/inst/testfiles/across_fip/libFuzzer_across_fip/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericVector tau  = RcppDeepState_NumericVector();
  std::string tau_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wbsts/inst/testfiles/across_fip/libFuzzer_across_fip/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tau.qs";
  qs::c_qsave(tau,tau_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau values: "<< tau << std::endl;
  NumericVector p(1);
  p[0]  = RcppDeepState_double();
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wbsts/inst/testfiles/across_fip/libFuzzer_across_fip/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  qs::c_qsave(p,p_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  NumericVector epp  = RcppDeepState_NumericVector();
  std::string epp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wbsts/inst/testfiles/across_fip/libFuzzer_across_fip/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_epp.qs";
  qs::c_qsave(epp,epp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "epp values: "<< epp << std::endl;
  NumericVector p1(1);
  p1[0]  = RcppDeepState_double();
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wbsts/inst/testfiles/across_fip/libFuzzer_across_fip/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  std::string p1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wbsts/inst/testfiles/across_fip/libFuzzer_across_fip/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p1.qs";
  qs::c_qsave(p1,p1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p1 values: "<< p1 << std::endl;
  NumericVector Ts(1);
  Ts[0]  = RcppDeepState_double();
  std::string Ts_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wbsts/inst/testfiles/across_fip/libFuzzer_across_fip/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Ts.qs";
  qs::c_qsave(Ts,Ts_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ts values: "<< Ts << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    across_fip(X,tau,p[0],epp,p1[0],Ts[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
