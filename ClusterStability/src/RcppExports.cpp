// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Reorder
IntegerVector Reorder(NumericVector data);
RcppExport SEXP _ClusterStability_Reorder(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(Reorder(data));
    return rcpp_result_gen;
END_RCPP
}
// Kcombination
List Kcombination(NumericVector data, int k, int selector);
RcppExport SEXP _ClusterStability_Kcombination(SEXP dataSEXP, SEXP kSEXP, SEXP selectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type selector(selectorSEXP);
    rcpp_result_gen = Rcpp::wrap(Kcombination(data, k, selector));
    return rcpp_result_gen;
END_RCPP
}
// calculate_indices
NumericVector calculate_indices(Rcpp::List r_combinations, Rcpp::List r_partition, NumericVector r_indice, double total_indice);
RcppExport SEXP _ClusterStability_calculate_indices(SEXP r_combinationsSEXP, SEXP r_partitionSEXP, SEXP r_indiceSEXP, SEXP total_indiceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type r_combinations(r_combinationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type r_partition(r_partitionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_indice(r_indiceSEXP);
    Rcpp::traits::input_parameter< double >::type total_indice(total_indiceSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_indices(r_combinations, r_partition, r_indice, total_indice));
    return rcpp_result_gen;
END_RCPP
}
// calculate_individual_PSG
NumericVector calculate_individual_PSG(double k, Rcpp::List r_combinations, NumericVector total_indices, NumericVector indices);
RcppExport SEXP _ClusterStability_calculate_individual_PSG(SEXP kSEXP, SEXP r_combinationsSEXP, SEXP total_indicesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type r_combinations(r_combinationsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type total_indices(total_indicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_individual_PSG(k, r_combinations, total_indices, indices));
    return rcpp_result_gen;
END_RCPP
}
// calculate_individual_PSG_exact
NumericVector calculate_individual_PSG_exact(double k, Rcpp::List r_combinations, NumericVector total_singletons, NumericVector total_indices, NumericVector indices, double pnk, double ptildenk);
RcppExport SEXP _ClusterStability_calculate_individual_PSG_exact(SEXP kSEXP, SEXP r_combinationsSEXP, SEXP total_singletonsSEXP, SEXP total_indicesSEXP, SEXP indicesSEXP, SEXP pnkSEXP, SEXP ptildenkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type r_combinations(r_combinationsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type total_singletons(total_singletonsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type total_indices(total_indicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type pnk(pnkSEXP);
    Rcpp::traits::input_parameter< double >::type ptildenk(ptildenkSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_individual_PSG_exact(k, r_combinations, total_singletons, total_indices, indices, pnk, ptildenk));
    return rcpp_result_gen;
END_RCPP
}
// calculate_individual_PSG_approximative
NumericVector calculate_individual_PSG_approximative(double k, Rcpp::List r_combinations, NumericVector total_singletons, NumericVector total_indices, NumericVector indices);
RcppExport SEXP _ClusterStability_calculate_individual_PSG_approximative(SEXP kSEXP, SEXP r_combinationsSEXP, SEXP total_singletonsSEXP, SEXP total_indicesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type r_combinations(r_combinationsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type total_singletons(total_singletonsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type total_indices(total_indicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_individual_PSG_approximative(k, r_combinations, total_singletons, total_indices, indices));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ClusterStability_Reorder", (DL_FUNC) &_ClusterStability_Reorder, 1},
    {"_ClusterStability_Kcombination", (DL_FUNC) &_ClusterStability_Kcombination, 3},
    {"_ClusterStability_calculate_indices", (DL_FUNC) &_ClusterStability_calculate_indices, 4},
    {"_ClusterStability_calculate_individual_PSG", (DL_FUNC) &_ClusterStability_calculate_individual_PSG, 4},
    {"_ClusterStability_calculate_individual_PSG_exact", (DL_FUNC) &_ClusterStability_calculate_individual_PSG_exact, 7},
    {"_ClusterStability_calculate_individual_PSG_approximative", (DL_FUNC) &_ClusterStability_calculate_individual_PSG_approximative, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ClusterStability(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
