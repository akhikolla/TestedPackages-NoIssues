// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// Kcombination_DeepState_TestHarness_generation.cpp and Kcombination_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List Kcombination(NumericVector data, int k, int selector);

TEST(ClusterStability_deepstate_test,Kcombination_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector data  = RcppDeepState_NumericVector();
  std::string data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClusterStability/inst/testfiles/Kcombination/libFuzzer_Kcombination/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_data.qs";
  qs::c_qsave(data,data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  IntegerVector k(1);
  k[0]  = RcppDeepState_int();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClusterStability/inst/testfiles/Kcombination/libFuzzer_Kcombination/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  IntegerVector selector(1);
  selector[0]  = RcppDeepState_int();
  std::string selector_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ClusterStability/inst/testfiles/Kcombination/libFuzzer_Kcombination/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_selector.qs";
  qs::c_qsave(selector,selector_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "selector values: "<< selector << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    Kcombination(data,k[0],selector[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
