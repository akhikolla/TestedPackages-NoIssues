// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// minlplus_cpp_DeepState_TestHarness_generation.cpp and minlplus_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double minlplus_cpp(double beta, double xi, int y1, int y2, int n1, int n2, double mu_beta, double sigma_beta, double mu_psi, double sigma_psi);

TEST(abtest_deepstate_test,minlplus_cpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_double();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericVector xi(1);
  xi[0]  = RcppDeepState_double();
  std::string xi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_xi.qs";
  qs::c_qsave(xi,xi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xi values: "<< xi << std::endl;
  IntegerVector y1(1);
  y1[0]  = RcppDeepState_int();
  std::string y1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_y1.qs";
  qs::c_qsave(y1,y1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y1 values: "<< y1 << std::endl;
  IntegerVector y2(1);
  y2[0]  = RcppDeepState_int();
  std::string y2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_y2.qs";
  qs::c_qsave(y2,y2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y2 values: "<< y2 << std::endl;
  IntegerVector n1(1);
  n1[0]  = RcppDeepState_int();
  std::string n1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_n1.qs";
  qs::c_qsave(n1,n1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n1 values: "<< n1 << std::endl;
  IntegerVector n2(1);
  n2[0]  = RcppDeepState_int();
  std::string n2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_n2.qs";
  qs::c_qsave(n2,n2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n2 values: "<< n2 << std::endl;
  NumericVector mu_beta(1);
  mu_beta[0]  = RcppDeepState_double();
  std::string mu_beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_mu_beta.qs";
  qs::c_qsave(mu_beta,mu_beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu_beta values: "<< mu_beta << std::endl;
  NumericVector sigma_beta(1);
  sigma_beta[0]  = RcppDeepState_double();
  std::string sigma_beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_sigma_beta.qs";
  qs::c_qsave(sigma_beta,sigma_beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma_beta values: "<< sigma_beta << std::endl;
  NumericVector mu_psi(1);
  mu_psi[0]  = RcppDeepState_double();
  std::string mu_psi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_mu_psi.qs";
  qs::c_qsave(mu_psi,mu_psi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu_psi values: "<< mu_psi << std::endl;
  NumericVector sigma_psi(1);
  sigma_psi[0]  = RcppDeepState_double();
  std::string sigma_psi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/abtest/inst/testfiles/minlplus_cpp/AFL_minlplus_cpp/afl_inputs/" + std::to_string(t) + "_sigma_psi.qs";
  qs::c_qsave(sigma_psi,sigma_psi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma_psi values: "<< sigma_psi << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    minlplus_cpp(beta[0],xi[0],y1[0],y2[0],n1[0],n2[0],mu_beta[0],sigma_beta[0],mu_psi[0],sigma_psi[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
