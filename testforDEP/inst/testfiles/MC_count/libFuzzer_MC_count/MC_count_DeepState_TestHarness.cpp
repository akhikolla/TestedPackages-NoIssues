// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// MC_count_DeepState_TestHarness_generation.cpp and MC_count_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

int MC_count(double Ts, int n, int sn);

TEST(testforDEP_deepstate_test,MC_count_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector Ts(1);
  Ts[0]  = RcppDeepState_double();
  std::string Ts_t = "/home/akhila/fuzzer_packages/fuzzedpackages/testforDEP/inst/testfiles/MC_count/libFuzzer_MC_count/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Ts.qs";
  qs::c_qsave(Ts,Ts_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ts values: "<< Ts << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/testforDEP/inst/testfiles/MC_count/libFuzzer_MC_count/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  IntegerVector sn(1);
  sn[0]  = RcppDeepState_int();
  std::string sn_t = "/home/akhila/fuzzer_packages/fuzzedpackages/testforDEP/inst/testfiles/MC_count/libFuzzer_MC_count/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sn.qs";
  qs::c_qsave(sn,sn_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sn values: "<< sn << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    MC_count(Ts[0],n[0],sn[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
