// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// computeConditional_q_DeepState_TestHarness_generation.cpp and computeConditional_q_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector computeConditional_q(Rcpp::NumericVector p, Rcpp::NumericVector etas, Rcpp::NumericMatrix baselineParams, Rcpp::CharacterVector reg_model, Rcpp::CharacterVector base_dist);

TEST(icenReg_deepstate_test,computeConditional_q_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector p  = RcppDeepState_NumericVector();
  qs::c_qsave(p,"/home/akhila/fuzzer_packages/fuzzedpackages/icenReg/inst/testfiles/computeConditional_q/inputs/p.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  NumericVector etas  = RcppDeepState_NumericVector();
  qs::c_qsave(etas,"/home/akhila/fuzzer_packages/fuzzedpackages/icenReg/inst/testfiles/computeConditional_q/inputs/etas.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "etas values: "<< etas << std::endl;
  NumericMatrix baselineParams  = RcppDeepState_NumericMatrix();
  qs::c_qsave(baselineParams,"/home/akhila/fuzzer_packages/fuzzedpackages/icenReg/inst/testfiles/computeConditional_q/inputs/baselineParams.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "baselineParams values: "<< baselineParams << std::endl;
  CharacterVector reg_model  = RcppDeepState_CharacterVector();
  qs::c_qsave(reg_model,"/home/akhila/fuzzer_packages/fuzzedpackages/icenReg/inst/testfiles/computeConditional_q/inputs/reg_model.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "reg_model values: "<< reg_model << std::endl;
  CharacterVector base_dist  = RcppDeepState_CharacterVector();
  qs::c_qsave(base_dist,"/home/akhila/fuzzer_packages/fuzzedpackages/icenReg/inst/testfiles/computeConditional_q/inputs/base_dist.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "base_dist values: "<< base_dist << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    computeConditional_q(p,etas,baselineParams,reg_model,base_dist);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
