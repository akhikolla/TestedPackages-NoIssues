// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// Mellin_QF
List Mellin_QF(NumericVector lambdas, std::vector<double> a_k, int maxit, double h, std::complex<double> delta, double eps, double beta);
RcppExport SEXP _QF_Mellin_QF(SEXP lambdasSEXP, SEXP a_kSEXP, SEXP maxitSEXP, SEXP hSEXP, SEXP deltaSEXP, SEXP epsSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_k(a_kSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(Mellin_QF(lambdas, a_k, maxit, h, delta, eps, beta));
    return rcpp_result_gen;
END_RCPP
}
// Mellin_QF_error
List Mellin_QF_error(NumericVector lambdas, std::vector<double> a_k, int maxit, double h, std::complex<double> delta, double eps, double beta, std::vector<double> q_lims);
RcppExport SEXP _QF_Mellin_QF_error(SEXP lambdasSEXP, SEXP a_kSEXP, SEXP maxitSEXP, SEXP hSEXP, SEXP deltaSEXP, SEXP epsSEXP, SEXP betaSEXP, SEXP q_limsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_k(a_kSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type q_lims(q_limsSEXP);
    rcpp_result_gen = Rcpp::wrap(Mellin_QF_error(lambdas, a_k, maxit, h, delta, eps, beta, q_lims));
    return rcpp_result_gen;
END_RCPP
}
// find_maximum_error
double find_maximum_error(std::vector<double> range_f_ref, std::vector<double> range_F_ref, std::vector<double> range_f_new, std::vector<double> range_F_new);
RcppExport SEXP _QF_find_maximum_error(SEXP range_f_refSEXP, SEXP range_F_refSEXP, SEXP range_f_newSEXP, SEXP range_F_newSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type range_f_ref(range_f_refSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type range_F_ref(range_F_refSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type range_f_new(range_f_newSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type range_F_new(range_F_newSEXP);
    rcpp_result_gen = Rcpp::wrap(find_maximum_error(range_f_ref, range_F_ref, range_f_new, range_F_new));
    return rcpp_result_gen;
END_RCPP
}
// Mellin_QF_ratio
List Mellin_QF_ratio(NumericVector lambdas_1, NumericVector lambdas_2, std::vector<double> a_k_1, std::vector<double> a_k_2, int maxit, double h, std::complex<double> delta, double eps, double beta_1, double beta_2);
RcppExport SEXP _QF_Mellin_QF_ratio(SEXP lambdas_1SEXP, SEXP lambdas_2SEXP, SEXP a_k_1SEXP, SEXP a_k_2SEXP, SEXP maxitSEXP, SEXP hSEXP, SEXP deltaSEXP, SEXP epsSEXP, SEXP beta_1SEXP, SEXP beta_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdas_1(lambdas_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdas_2(lambdas_2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_k_1(a_k_1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_k_2(a_k_2SEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type beta_1(beta_1SEXP);
    Rcpp::traits::input_parameter< double >::type beta_2(beta_2SEXP);
    rcpp_result_gen = Rcpp::wrap(Mellin_QF_ratio(lambdas_1, lambdas_2, a_k_1, a_k_2, maxit, h, delta, eps, beta_1, beta_2));
    return rcpp_result_gen;
END_RCPP
}
// Mellin_QF_ratio_error
List Mellin_QF_ratio_error(NumericVector lambdas_1, NumericVector lambdas_2, std::vector<double> a_k_1, std::vector<double> a_k_2, int maxit, double h, std::complex<double> delta, double eps, double beta_1, double beta_2, std::vector<double> q_lims);
RcppExport SEXP _QF_Mellin_QF_ratio_error(SEXP lambdas_1SEXP, SEXP lambdas_2SEXP, SEXP a_k_1SEXP, SEXP a_k_2SEXP, SEXP maxitSEXP, SEXP hSEXP, SEXP deltaSEXP, SEXP epsSEXP, SEXP beta_1SEXP, SEXP beta_2SEXP, SEXP q_limsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdas_1(lambdas_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdas_2(lambdas_2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_k_1(a_k_1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_k_2(a_k_2SEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type beta_1(beta_1SEXP);
    Rcpp::traits::input_parameter< double >::type beta_2(beta_2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type q_lims(q_limsSEXP);
    rcpp_result_gen = Rcpp::wrap(Mellin_QF_ratio_error(lambdas_1, lambdas_2, a_k_1, a_k_2, maxit, h, delta, eps, beta_1, beta_2, q_lims));
    return rcpp_result_gen;
END_RCPP
}
// rQF_c
std::vector<double> rQF_c(int n, std::vector<double> lambdas, std::vector<double> etas);
RcppExport SEXP _QF_rQF_c(SEXP nSEXP, SEXP lambdasSEXP, SEXP etasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type etas(etasSEXP);
    rcpp_result_gen = Rcpp::wrap(rQF_c(n, lambdas, etas));
    return rcpp_result_gen;
END_RCPP
}
// rQF_ratio_c
std::vector<double> rQF_ratio_c(int n, std::vector<double> lambdas_1, std::vector<double> lambdas_2, std::vector<double> etas_1, std::vector<double> etas_2);
RcppExport SEXP _QF_rQF_ratio_c(SEXP nSEXP, SEXP lambdas_1SEXP, SEXP lambdas_2SEXP, SEXP etas_1SEXP, SEXP etas_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lambdas_1(lambdas_1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lambdas_2(lambdas_2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type etas_1(etas_1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type etas_2(etas_2SEXP);
    rcpp_result_gen = Rcpp::wrap(rQF_ratio_c(n, lambdas_1, lambdas_2, etas_1, etas_2));
    return rcpp_result_gen;
END_RCPP
}
// pochhammer_complex
std::complex<double> pochhammer_complex(std::complex<double> x, std::complex<double> y);
RcppExport SEXP _QF_pochhammer_complex(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pochhammer_complex(x, y));
    return rcpp_result_gen;
END_RCPP
}
// beta_complex
std::complex<double> beta_complex(std::complex<double> a, std::complex<double> b);
RcppExport SEXP _QF_beta_complex(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_complex(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gamma_complex
std::complex<double> gamma_complex(std::complex<double> n);
RcppExport SEXP _QF_gamma_complex(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_complex(n));
    return rcpp_result_gen;
END_RCPP
}
// compute_ak_nc
std::vector<double> compute_ak_nc(NumericVector lambdas, NumericVector etas, int maxit, double eps, double beta);
RcppExport SEXP _QF_compute_ak_nc(SEXP lambdasSEXP, SEXP etasSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ak_nc(lambdas, etas, maxit, eps, beta));
    return rcpp_result_gen;
END_RCPP
}
// compute_ak_c
std::vector<double> compute_ak_c(NumericVector lambdas, int maxit, double eps, double beta);
RcppExport SEXP _QF_compute_ak_c(SEXP lambdasSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ak_c(lambdas, maxit, eps, beta));
    return rcpp_result_gen;
END_RCPP
}
// dQF_c
std::vector<double> dQF_c(std::vector<double> q, List Mellin_list);
RcppExport SEXP _QF_dQF_c(SEXP qSEXP, SEXP Mellin_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type q(qSEXP);
    Rcpp::traits::input_parameter< List >::type Mellin_list(Mellin_listSEXP);
    rcpp_result_gen = Rcpp::wrap(dQF_c(q, Mellin_list));
    return rcpp_result_gen;
END_RCPP
}
// dQF_c_scal
std::vector<double> dQF_c_scal(std::vector<double> q, List Mellin_list);
RcppExport SEXP _QF_dQF_c_scal(SEXP qSEXP, SEXP Mellin_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type q(qSEXP);
    Rcpp::traits::input_parameter< List >::type Mellin_list(Mellin_listSEXP);
    rcpp_result_gen = Rcpp::wrap(dQF_c_scal(q, Mellin_list));
    return rcpp_result_gen;
END_RCPP
}
// pQF_c
std::vector<double> pQF_c(std::vector<double> q, List Mellin_list);
RcppExport SEXP _QF_pQF_c(SEXP qSEXP, SEXP Mellin_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type q(qSEXP);
    Rcpp::traits::input_parameter< List >::type Mellin_list(Mellin_listSEXP);
    rcpp_result_gen = Rcpp::wrap(pQF_c(q, Mellin_list));
    return rcpp_result_gen;
END_RCPP
}
// pQF_c_scal
std::vector<double> pQF_c_scal(std::vector<double> q, List Mellin_list);
RcppExport SEXP _QF_pQF_c_scal(SEXP qSEXP, SEXP Mellin_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type q(qSEXP);
    Rcpp::traits::input_parameter< List >::type Mellin_list(Mellin_listSEXP);
    rcpp_result_gen = Rcpp::wrap(pQF_c_scal(q, Mellin_list));
    return rcpp_result_gen;
END_RCPP
}
// pQF_depratio_c
double pQF_depratio_c(NumericVector lambdas_1, NumericVector lambdas_2, double h, std::complex<double> delta, double eps, int maxit_ak, int maxit_delta);
RcppExport SEXP _QF_pQF_depratio_c(SEXP lambdas_1SEXP, SEXP lambdas_2SEXP, SEXP hSEXP, SEXP deltaSEXP, SEXP epsSEXP, SEXP maxit_akSEXP, SEXP maxit_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdas_1(lambdas_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdas_2(lambdas_2SEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_ak(maxit_akSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_delta(maxit_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(pQF_depratio_c(lambdas_1, lambdas_2, h, delta, eps, maxit_ak, maxit_delta));
    return rcpp_result_gen;
END_RCPP
}
// get_mellin_QF
List get_mellin_QF(NumericVector lambdas, NumericVector etas, double rho, double h, std::complex<double> delta, double eps, double eps_quant, int maxit_ak, int maxit_quant, int maxit_delta, double step_delta);
RcppExport SEXP _QF_get_mellin_QF(SEXP lambdasSEXP, SEXP etasSEXP, SEXP rhoSEXP, SEXP hSEXP, SEXP deltaSEXP, SEXP epsSEXP, SEXP eps_quantSEXP, SEXP maxit_akSEXP, SEXP maxit_quantSEXP, SEXP maxit_deltaSEXP, SEXP step_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type eps_quant(eps_quantSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_ak(maxit_akSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_quant(maxit_quantSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_delta(maxit_deltaSEXP);
    Rcpp::traits::input_parameter< double >::type step_delta(step_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mellin_QF(lambdas, etas, rho, h, delta, eps, eps_quant, maxit_ak, maxit_quant, maxit_delta, step_delta));
    return rcpp_result_gen;
END_RCPP
}
// get_mellin_QF_ratio
List get_mellin_QF_ratio(NumericVector lambdas_1, NumericVector lambdas_2, NumericVector etas_1, NumericVector etas_2, double rho, double h, std::complex<double> delta, double eps, double eps_quant, int maxit_ak, int maxit_quant, int maxit_delta, double step_delta);
RcppExport SEXP _QF_get_mellin_QF_ratio(SEXP lambdas_1SEXP, SEXP lambdas_2SEXP, SEXP etas_1SEXP, SEXP etas_2SEXP, SEXP rhoSEXP, SEXP hSEXP, SEXP deltaSEXP, SEXP epsSEXP, SEXP eps_quantSEXP, SEXP maxit_akSEXP, SEXP maxit_quantSEXP, SEXP maxit_deltaSEXP, SEXP step_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdas_1(lambdas_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdas_2(lambdas_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type etas_1(etas_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type etas_2(etas_2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type eps_quant(eps_quantSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_ak(maxit_akSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_quant(maxit_quantSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_delta(maxit_deltaSEXP);
    Rcpp::traits::input_parameter< double >::type step_delta(step_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mellin_QF_ratio(lambdas_1, lambdas_2, etas_1, etas_2, rho, h, delta, eps, eps_quant, maxit_ak, maxit_quant, maxit_delta, step_delta));
    return rcpp_result_gen;
END_RCPP
}
// dQF_quant
std::vector<double> dQF_quant(std::vector<double> q, std::vector<std::complex<double> > Mellin, std::vector<std::complex<double> > z, std::complex<double> delta);
RcppExport SEXP _QF_dQF_quant(SEXP qSEXP, SEXP MellinSEXP, SEXP zSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type q(qSEXP);
    Rcpp::traits::input_parameter< std::vector<std::complex<double> > >::type Mellin(MellinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::complex<double> > >::type z(zSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(dQF_quant(q, Mellin, z, delta));
    return rcpp_result_gen;
END_RCPP
}
// pQF_quant
std::vector<double> pQF_quant(std::vector<double> q, std::vector<std::complex<double> > Mellin, std::vector<std::complex<double> > z, std::complex<double> delta);
RcppExport SEXP _QF_pQF_quant(SEXP qSEXP, SEXP MellinSEXP, SEXP zSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type q(qSEXP);
    Rcpp::traits::input_parameter< std::vector<std::complex<double> > >::type Mellin(MellinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::complex<double> > >::type z(zSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(pQF_quant(q, Mellin, z, delta));
    return rcpp_result_gen;
END_RCPP
}
// qQF_c
std::vector<double> qQF_c(std::vector<double> p, List Mellin_list, double eps_quant, int maxit_quant, double q0);
RcppExport SEXP _QF_qQF_c(SEXP pSEXP, SEXP Mellin_listSEXP, SEXP eps_quantSEXP, SEXP maxit_quantSEXP, SEXP q0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type p(pSEXP);
    Rcpp::traits::input_parameter< List >::type Mellin_list(Mellin_listSEXP);
    Rcpp::traits::input_parameter< double >::type eps_quant(eps_quantSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_quant(maxit_quantSEXP);
    Rcpp::traits::input_parameter< double >::type q0(q0SEXP);
    rcpp_result_gen = Rcpp::wrap(qQF_c(p, Mellin_list, eps_quant, maxit_quant, q0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_QF_Mellin_QF", (DL_FUNC) &_QF_Mellin_QF, 7},
    {"_QF_Mellin_QF_error", (DL_FUNC) &_QF_Mellin_QF_error, 8},
    {"_QF_find_maximum_error", (DL_FUNC) &_QF_find_maximum_error, 4},
    {"_QF_Mellin_QF_ratio", (DL_FUNC) &_QF_Mellin_QF_ratio, 10},
    {"_QF_Mellin_QF_ratio_error", (DL_FUNC) &_QF_Mellin_QF_ratio_error, 11},
    {"_QF_rQF_c", (DL_FUNC) &_QF_rQF_c, 3},
    {"_QF_rQF_ratio_c", (DL_FUNC) &_QF_rQF_ratio_c, 5},
    {"_QF_pochhammer_complex", (DL_FUNC) &_QF_pochhammer_complex, 2},
    {"_QF_beta_complex", (DL_FUNC) &_QF_beta_complex, 2},
    {"_QF_gamma_complex", (DL_FUNC) &_QF_gamma_complex, 1},
    {"_QF_compute_ak_nc", (DL_FUNC) &_QF_compute_ak_nc, 5},
    {"_QF_compute_ak_c", (DL_FUNC) &_QF_compute_ak_c, 4},
    {"_QF_dQF_c", (DL_FUNC) &_QF_dQF_c, 2},
    {"_QF_dQF_c_scal", (DL_FUNC) &_QF_dQF_c_scal, 2},
    {"_QF_pQF_c", (DL_FUNC) &_QF_pQF_c, 2},
    {"_QF_pQF_c_scal", (DL_FUNC) &_QF_pQF_c_scal, 2},
    {"_QF_pQF_depratio_c", (DL_FUNC) &_QF_pQF_depratio_c, 7},
    {"_QF_get_mellin_QF", (DL_FUNC) &_QF_get_mellin_QF, 11},
    {"_QF_get_mellin_QF_ratio", (DL_FUNC) &_QF_get_mellin_QF_ratio, 13},
    {"_QF_dQF_quant", (DL_FUNC) &_QF_dQF_quant, 4},
    {"_QF_pQF_quant", (DL_FUNC) &_QF_pQF_quant, 4},
    {"_QF_qQF_c", (DL_FUNC) &_QF_qQF_c, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_QF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
