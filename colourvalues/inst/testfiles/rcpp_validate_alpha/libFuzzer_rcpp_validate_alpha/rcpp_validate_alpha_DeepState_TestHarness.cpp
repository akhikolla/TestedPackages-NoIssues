// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_validate_alpha_DeepState_TestHarness_generation.cpp and rcpp_validate_alpha_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector rcpp_validate_alpha(Rcpp::NumericVector alpha, int alpha_type);

TEST(colourvalues_deepstate_test,rcpp_validate_alpha_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector alpha  = RcppDeepState_NumericVector();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colourvalues/inst/testfiles/rcpp_validate_alpha/libFuzzer_rcpp_validate_alpha/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  IntegerVector alpha_type(1);
  alpha_type[0]  = RcppDeepState_int();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colourvalues/inst/testfiles/rcpp_validate_alpha/libFuzzer_rcpp_validate_alpha/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  std::string alpha_type_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colourvalues/inst/testfiles/rcpp_validate_alpha/libFuzzer_rcpp_validate_alpha/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha_type.qs";
  qs::c_qsave(alpha_type,alpha_type_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha_type values: "<< alpha_type << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_validate_alpha(alpha,alpha_type[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
