// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_rENA_RCPPEXPORTS_H_GEN_
#define RCPP_rENA_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace rENA {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("rENA", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("rENA", "_rENA_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in rENA");
            }
        }
    }

    inline arma::umat ena_correlation(arma::umat points, arma::umat centroids) {
        typedef SEXP(*Ptr_ena_correlation)(SEXP,SEXP);
        static Ptr_ena_correlation p_ena_correlation = NULL;
        if (p_ena_correlation == NULL) {
            validateSignature("arma::umat(*ena_correlation)(arma::umat,arma::umat)");
            p_ena_correlation = (Ptr_ena_correlation)R_GetCCallable("rENA", "_rENA_ena_correlation");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ena_correlation(Shield<SEXP>(Rcpp::wrap(points)), Shield<SEXP>(Rcpp::wrap(centroids)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::umat >(rcpp_result_gen);
    }

    inline std::vector<std::string> merge_columns_c(DataFrame df, CharacterVector cols, std::string sep = ".") {
        typedef SEXP(*Ptr_merge_columns_c)(SEXP,SEXP,SEXP);
        static Ptr_merge_columns_c p_merge_columns_c = NULL;
        if (p_merge_columns_c == NULL) {
            validateSignature("std::vector<std::string>(*merge_columns_c)(DataFrame,CharacterVector,std::string)");
            p_merge_columns_c = (Ptr_merge_columns_c)R_GetCCallable("rENA", "_rENA_merge_columns_c");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_merge_columns_c(Shield<SEXP>(Rcpp::wrap(df)), Shield<SEXP>(Rcpp::wrap(cols)), Shield<SEXP>(Rcpp::wrap(sep)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<std::string> >(rcpp_result_gen);
    }

    inline arma::rowvec vector_to_ut(arma::mat v) {
        typedef SEXP(*Ptr_vector_to_ut)(SEXP);
        static Ptr_vector_to_ut p_vector_to_ut = NULL;
        if (p_vector_to_ut == NULL) {
            validateSignature("arma::rowvec(*vector_to_ut)(arma::mat)");
            p_vector_to_ut = (Ptr_vector_to_ut)R_GetCCallable("rENA", "_rENA_vector_to_ut");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_vector_to_ut(Shield<SEXP>(Rcpp::wrap(v)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::rowvec >(rcpp_result_gen);
    }

    inline std::vector<std::string> svector_to_ut(std::vector<std::string> v) {
        typedef SEXP(*Ptr_svector_to_ut)(SEXP);
        static Ptr_svector_to_ut p_svector_to_ut = NULL;
        if (p_svector_to_ut == NULL) {
            validateSignature("std::vector<std::string>(*svector_to_ut)(std::vector<std::string>)");
            p_svector_to_ut = (Ptr_svector_to_ut)R_GetCCallable("rENA", "_rENA_svector_to_ut");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_svector_to_ut(Shield<SEXP>(Rcpp::wrap(v)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<std::string> >(rcpp_result_gen);
    }

    inline arma::mat rows_to_co_occurrences(DataFrame df, bool binary = true) {
        typedef SEXP(*Ptr_rows_to_co_occurrences)(SEXP,SEXP);
        static Ptr_rows_to_co_occurrences p_rows_to_co_occurrences = NULL;
        if (p_rows_to_co_occurrences == NULL) {
            validateSignature("arma::mat(*rows_to_co_occurrences)(DataFrame,bool)");
            p_rows_to_co_occurrences = (Ptr_rows_to_co_occurrences)R_GetCCallable("rENA", "_rENA_rows_to_co_occurrences");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rows_to_co_occurrences(Shield<SEXP>(Rcpp::wrap(df)), Shield<SEXP>(Rcpp::wrap(binary)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline DataFrame ref_window_df(DataFrame df, float windowSize = 1, float windowForward = 0, bool binary = true) {
        typedef SEXP(*Ptr_ref_window_df)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_ref_window_df p_ref_window_df = NULL;
        if (p_ref_window_df == NULL) {
            validateSignature("DataFrame(*ref_window_df)(DataFrame,float,float,bool)");
            p_ref_window_df = (Ptr_ref_window_df)R_GetCCallable("rENA", "_rENA_ref_window_df");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ref_window_df(Shield<SEXP>(Rcpp::wrap(df)), Shield<SEXP>(Rcpp::wrap(windowSize)), Shield<SEXP>(Rcpp::wrap(windowForward)), Shield<SEXP>(Rcpp::wrap(binary)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

    inline DataFrame ref_window_lag(DataFrame df, int windowSize = 0, bool binary = true) {
        typedef SEXP(*Ptr_ref_window_lag)(SEXP,SEXP,SEXP);
        static Ptr_ref_window_lag p_ref_window_lag = NULL;
        if (p_ref_window_lag == NULL) {
            validateSignature("DataFrame(*ref_window_lag)(DataFrame,int,bool)");
            p_ref_window_lag = (Ptr_ref_window_lag)R_GetCCallable("rENA", "_rENA_ref_window_lag");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ref_window_lag(Shield<SEXP>(Rcpp::wrap(df)), Shield<SEXP>(Rcpp::wrap(windowSize)), Shield<SEXP>(Rcpp::wrap(binary)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

    inline NumericMatrix fun_sphere_norm(DataFrame dfM) {
        typedef SEXP(*Ptr_fun_sphere_norm)(SEXP);
        static Ptr_fun_sphere_norm p_fun_sphere_norm = NULL;
        if (p_fun_sphere_norm == NULL) {
            validateSignature("NumericMatrix(*fun_sphere_norm)(DataFrame)");
            p_fun_sphere_norm = (Ptr_fun_sphere_norm)R_GetCCallable("rENA", "_rENA_fun_sphere_norm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fun_sphere_norm(Shield<SEXP>(Rcpp::wrap(dfM)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline NumericMatrix fun_skip_sphere_norm(DataFrame dfM) {
        typedef SEXP(*Ptr_fun_skip_sphere_norm)(SEXP);
        static Ptr_fun_skip_sphere_norm p_fun_skip_sphere_norm = NULL;
        if (p_fun_skip_sphere_norm == NULL) {
            validateSignature("NumericMatrix(*fun_skip_sphere_norm)(DataFrame)");
            p_fun_skip_sphere_norm = (Ptr_fun_skip_sphere_norm)R_GetCCallable("rENA", "_rENA_fun_skip_sphere_norm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fun_skip_sphere_norm(Shield<SEXP>(Rcpp::wrap(dfM)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline Rcpp::NumericMatrix center_data_c(arma::mat values) {
        typedef SEXP(*Ptr_center_data_c)(SEXP);
        static Ptr_center_data_c p_center_data_c = NULL;
        if (p_center_data_c == NULL) {
            validateSignature("Rcpp::NumericMatrix(*center_data_c)(arma::mat)");
            p_center_data_c = (Ptr_center_data_c)R_GetCCallable("rENA", "_rENA_center_data_c");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_center_data_c(Shield<SEXP>(Rcpp::wrap(values)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericMatrix >(rcpp_result_gen);
    }

    inline arma::umat triIndices(int len, int row = -1) {
        typedef SEXP(*Ptr_triIndices)(SEXP,SEXP);
        static Ptr_triIndices p_triIndices = NULL;
        if (p_triIndices == NULL) {
            validateSignature("arma::umat(*triIndices)(int,int)");
            p_triIndices = (Ptr_triIndices)R_GetCCallable("rENA", "_rENA_triIndices");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_triIndices(Shield<SEXP>(Rcpp::wrap(len)), Shield<SEXP>(Rcpp::wrap(row)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::umat >(rcpp_result_gen);
    }

    inline Rcpp::List lws_lsq_positions(arma::mat adjMats, arma::mat t, int numDims) {
        typedef SEXP(*Ptr_lws_lsq_positions)(SEXP,SEXP,SEXP);
        static Ptr_lws_lsq_positions p_lws_lsq_positions = NULL;
        if (p_lws_lsq_positions == NULL) {
            validateSignature("Rcpp::List(*lws_lsq_positions)(arma::mat,arma::mat,int)");
            p_lws_lsq_positions = (Ptr_lws_lsq_positions)R_GetCCallable("rENA", "_rENA_lws_lsq_positions");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_lws_lsq_positions(Shield<SEXP>(Rcpp::wrap(adjMats)), Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(numDims)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

}

#endif // RCPP_rENA_RCPPEXPORTS_H_GEN_
