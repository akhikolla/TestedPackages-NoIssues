// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// myQQNormIntern_DeepState_TestHarness_generation.cpp and myQQNormIntern_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix myQQNormIntern(NumericVector mySeq, double myMean, double mySd, double lengthX, int n_sim);

TEST(StMoSim_deepstate_test,myQQNormIntern_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector mySeq  = RcppDeepState_NumericVector();
  std::string mySeq_t = "/home/akhila/fuzzer_packages/fuzzedpackages/StMoSim/inst/testfiles/myQQNormIntern/libFuzzer_myQQNormIntern/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mySeq.qs";
  qs::c_qsave(mySeq,mySeq_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mySeq values: "<< mySeq << std::endl;
  NumericVector myMean(1);
  myMean[0]  = RcppDeepState_double();
  std::string myMean_t = "/home/akhila/fuzzer_packages/fuzzedpackages/StMoSim/inst/testfiles/myQQNormIntern/libFuzzer_myQQNormIntern/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_myMean.qs";
  qs::c_qsave(myMean,myMean_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "myMean values: "<< myMean << std::endl;
  NumericVector mySd(1);
  mySd[0]  = RcppDeepState_double();
  std::string mySd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/StMoSim/inst/testfiles/myQQNormIntern/libFuzzer_myQQNormIntern/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mySd.qs";
  qs::c_qsave(mySd,mySd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mySd values: "<< mySd << std::endl;
  NumericVector lengthX(1);
  lengthX[0]  = RcppDeepState_double();
  std::string lengthX_t = "/home/akhila/fuzzer_packages/fuzzedpackages/StMoSim/inst/testfiles/myQQNormIntern/libFuzzer_myQQNormIntern/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lengthX.qs";
  qs::c_qsave(lengthX,lengthX_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lengthX values: "<< lengthX << std::endl;
  IntegerVector n_sim(1);
  n_sim[0]  = RcppDeepState_int();
  std::string n_sim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/StMoSim/inst/testfiles/myQQNormIntern/libFuzzer_myQQNormIntern/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n_sim.qs";
  qs::c_qsave(n_sim,n_sim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n_sim values: "<< n_sim << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    myQQNormIntern(mySeq,myMean[0],mySd[0],lengthX[0],n_sim[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
