// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// bounding_wkt_points_DeepState_TestHarness_generation.cpp and bounding_wkt_points_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

CharacterVector bounding_wkt_points(NumericVector min_x, NumericVector max_x, NumericVector min_y, NumericVector max_y);

TEST(wicket_deepstate_test,bounding_wkt_points_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector min_x  = RcppDeepState_NumericVector();
  std::string min_x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wicket/inst/testfiles/bounding_wkt_points/AFL_bounding_wkt_points/afl_inputs/" + std::to_string(t) + "_min_x.qs";
  qs::c_qsave(min_x,min_x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min_x values: "<< min_x << std::endl;
  NumericVector max_x  = RcppDeepState_NumericVector();
  std::string max_x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wicket/inst/testfiles/bounding_wkt_points/AFL_bounding_wkt_points/afl_inputs/" + std::to_string(t) + "_max_x.qs";
  qs::c_qsave(max_x,max_x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_x values: "<< max_x << std::endl;
  NumericVector min_y  = RcppDeepState_NumericVector();
  std::string min_y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wicket/inst/testfiles/bounding_wkt_points/AFL_bounding_wkt_points/afl_inputs/" + std::to_string(t) + "_min_y.qs";
  qs::c_qsave(min_y,min_y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min_y values: "<< min_y << std::endl;
  NumericVector max_y  = RcppDeepState_NumericVector();
  std::string max_y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/wicket/inst/testfiles/bounding_wkt_points/AFL_bounding_wkt_points/afl_inputs/" + std::to_string(t) + "_max_y.qs";
  qs::c_qsave(max_y,max_y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_y values: "<< max_y << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    bounding_wkt_points(min_x,max_x,min_y,max_y);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
