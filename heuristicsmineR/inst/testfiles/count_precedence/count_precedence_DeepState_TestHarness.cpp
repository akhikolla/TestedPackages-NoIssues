// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// count_precedence_DeepState_TestHarness_generation.cpp and count_precedence_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

DataFrame count_precedence(CharacterVector cases, IntegerVector activities, int lead);

TEST(heuristicsmineR_deepstate_test,count_precedence_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  CharacterVector cases  = RcppDeepState_CharacterVector();
  qs::c_qsave(cases,"/home/akhila/fuzzer_packages/fuzzedpackages/heuristicsmineR/inst/testfiles/count_precedence/inputs/cases.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cases values: "<< cases << std::endl;
  IntegerVector activities  = RcppDeepState_IntegerVector();
  qs::c_qsave(activities,"/home/akhila/fuzzer_packages/fuzzedpackages/heuristicsmineR/inst/testfiles/count_precedence/inputs/activities.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "activities values: "<< activities << std::endl;
  IntegerVector lead(1);
  lead[0]  = RcppDeepState_int();
  qs::c_qsave(lead,"/home/akhila/fuzzer_packages/fuzzedpackages/heuristicsmineR/inst/testfiles/count_precedence/inputs/lead.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lead values: "<< lead << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    count_precedence(cases,activities,lead[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
