// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dEuclidean
double dEuclidean(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _umap_dEuclidean(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dEuclidean(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mdEuclidean
NumericVector mdEuclidean(const NumericMatrix& m, int origin, const NumericVector& targets);
RcppExport SEXP _umap_mdEuclidean(SEXP mSEXP, SEXP originSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type origin(originSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(mdEuclidean(m, origin, targets));
    return rcpp_result_gen;
END_RCPP
}
// dManhattan
double dManhattan(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _umap_dManhattan(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dManhattan(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mdManhattan
NumericVector mdManhattan(const NumericMatrix& m, int origin, const NumericVector& targets);
RcppExport SEXP _umap_mdManhattan(SEXP mSEXP, SEXP originSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type origin(originSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(mdManhattan(m, origin, targets));
    return rcpp_result_gen;
END_RCPP
}
// dCenteredPearson
double dCenteredPearson(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _umap_dCenteredPearson(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dCenteredPearson(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mdCenteredPearson
NumericVector mdCenteredPearson(const NumericMatrix& m, int origin, const NumericVector& targets);
RcppExport SEXP _umap_mdCenteredPearson(SEXP mSEXP, SEXP originSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type origin(originSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(mdCenteredPearson(m, origin, targets));
    return rcpp_result_gen;
END_RCPP
}
// dCosine
double dCosine(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _umap_dCosine(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dCosine(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mdCosine
NumericVector mdCosine(const NumericMatrix& m, int origin, const NumericVector& targets);
RcppExport SEXP _umap_mdCosine(SEXP mSEXP, SEXP originSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type origin(originSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(mdCosine(m, origin, targets));
    return rcpp_result_gen;
END_RCPP
}
// clip4
NumericVector clip4(NumericVector x, double inner, double outer);
RcppExport SEXP _umap_clip4(SEXP xSEXP, SEXP innerSEXP, SEXP outerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type inner(innerSEXP);
    Rcpp::traits::input_parameter< double >::type outer(outerSEXP);
    rcpp_result_gen = Rcpp::wrap(clip4(x, inner, outer));
    return rcpp_result_gen;
END_RCPP
}
// optimize_epoch
NumericMatrix optimize_epoch(NumericMatrix& embedding, IntegerMatrix& pairs, IntegerVector& adjust, IntegerVector& nns, NumericVector& abg, double alpha);
RcppExport SEXP _umap_optimize_epoch(SEXP embeddingSEXP, SEXP pairsSEXP, SEXP adjustSEXP, SEXP nnsSEXP, SEXP abgSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type embedding(embeddingSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type nns(nnsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type abg(abgSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(optimize_epoch(embedding, pairs, adjust, nns, abg, alpha));
    return rcpp_result_gen;
END_RCPP
}
// optimize_embedding
NumericMatrix optimize_embedding(NumericMatrix& embedding, IntegerMatrix& pairs, NumericVector& eps, NumericVector& epns, NumericVector& abg, double alpha0, int num_epochs);
RcppExport SEXP _umap_optimize_embedding(SEXP embeddingSEXP, SEXP pairsSEXP, SEXP epsSEXP, SEXP epnsSEXP, SEXP abgSEXP, SEXP alpha0SEXP, SEXP num_epochsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type embedding(embeddingSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type epns(epnsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type abg(abgSEXP);
    Rcpp::traits::input_parameter< double >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< int >::type num_epochs(num_epochsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimize_embedding(embedding, pairs, eps, epns, abg, alpha0, num_epochs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_umap_dEuclidean", (DL_FUNC) &_umap_dEuclidean, 2},
    {"_umap_mdEuclidean", (DL_FUNC) &_umap_mdEuclidean, 3},
    {"_umap_dManhattan", (DL_FUNC) &_umap_dManhattan, 2},
    {"_umap_mdManhattan", (DL_FUNC) &_umap_mdManhattan, 3},
    {"_umap_dCenteredPearson", (DL_FUNC) &_umap_dCenteredPearson, 2},
    {"_umap_mdCenteredPearson", (DL_FUNC) &_umap_mdCenteredPearson, 3},
    {"_umap_dCosine", (DL_FUNC) &_umap_dCosine, 2},
    {"_umap_mdCosine", (DL_FUNC) &_umap_mdCosine, 3},
    {"_umap_clip4", (DL_FUNC) &_umap_clip4, 3},
    {"_umap_optimize_epoch", (DL_FUNC) &_umap_optimize_epoch, 6},
    {"_umap_optimize_embedding", (DL_FUNC) &_umap_optimize_embedding, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_umap(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
