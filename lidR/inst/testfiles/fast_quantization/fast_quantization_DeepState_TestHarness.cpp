// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// fast_quantization_DeepState_TestHarness_generation.cpp and fast_quantization_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

void fast_quantization(NumericVector x, double scale, double offset);

TEST(lidR_deepstate_test,fast_quantization_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/lidR/inst/testfiles/fast_quantization/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector scale(1);
  scale[0]  = RcppDeepState_double();
  qs::c_qsave(scale,"/home/akhila/fuzzer_packages/fuzzedpackages/lidR/inst/testfiles/fast_quantization/inputs/scale.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "scale values: "<< scale << std::endl;
  NumericVector offset(1);
  offset[0]  = RcppDeepState_double();
  qs::c_qsave(offset,"/home/akhila/fuzzer_packages/fuzzedpackages/lidR/inst/testfiles/fast_quantization/inputs/offset.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    fast_quantization(x,scale[0],offset[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
