// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// variogramLineSimple
RObject variogramLineSimple(const DataFrame& vgmModel, const NumericVector& dist, bool bCov);
RcppExport SEXP _atakrig_variogramLineSimple(SEXP vgmModelSEXP, SEXP distSEXP, SEXP bCovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type vgmModel(vgmModelSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type bCov(bCovSEXP);
    rcpp_result_gen = Rcpp::wrap(variogramLineSimple(vgmModel, dist, bCov));
    return rcpp_result_gen;
END_RCPP
}
// spDistsNN
NumericMatrix spDistsNN(NumericVector& x1, NumericVector& y1, NumericVector& x2, NumericVector& y2, bool longlat);
RcppExport SEXP _atakrig_spDistsNN(SEXP x1SEXP, SEXP y1SEXP, SEXP x2SEXP, SEXP y2SEXP, SEXP longlatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< bool >::type longlat(longlatSEXP);
    rcpp_result_gen = Rcpp::wrap(spDistsNN(x1, y1, x2, y2, longlat));
    return rcpp_result_gen;
END_RCPP
}
// outerProd
NumericMatrix outerProd(const NumericVector& v1, const NumericVector& v2);
RcppExport SEXP _atakrig_outerProd(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(outerProd(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// svAreaCloudByPointVgmInit
void svAreaCloudByPointVgmInit(const DataFrame& discretePoints, const NumericMatrix& areaDistByCentroid, bool longlat);
RcppExport SEXP _atakrig_svAreaCloudByPointVgmInit(SEXP discretePointsSEXP, SEXP areaDistByCentroidSEXP, SEXP longlatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type discretePoints(discretePointsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type areaDistByCentroid(areaDistByCentroidSEXP);
    Rcpp::traits::input_parameter< bool >::type longlat(longlatSEXP);
    svAreaCloudByPointVgmInit(discretePoints, areaDistByCentroid, longlat);
    return R_NilValue;
END_RCPP
}
// svAreaCloudByPointVgmEnd
void svAreaCloudByPointVgmEnd();
RcppExport SEXP _atakrig_svAreaCloudByPointVgmEnd() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    svAreaCloudByPointVgmEnd();
    return R_NilValue;
END_RCPP
}
// ataSetNumberOfThreadsForOMP
void ataSetNumberOfThreadsForOMP(int num);
RcppExport SEXP _atakrig_ataSetNumberOfThreadsForOMP(SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    ataSetNumberOfThreadsForOMP(num);
    return R_NilValue;
END_RCPP
}
// svAreaCloudByPointVgm
DataFrame svAreaCloudByPointVgm(const DataFrame& ptVgmModel);
RcppExport SEXP _atakrig_svAreaCloudByPointVgm(SEXP ptVgmModelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type ptVgmModel(ptVgmModelSEXP);
    rcpp_result_gen = Rcpp::wrap(svAreaCloudByPointVgm(ptVgmModel));
    return rcpp_result_gen;
END_RCPP
}
// crossSvAreaCloudByPointVgmInit
void crossSvAreaCloudByPointVgmInit(const DataFrame& discretePointsX, const DataFrame& discretePointsY, const DataFrame& ptVgmModelX, const DataFrame& ptVgmModelY, const NumericMatrix& areaDistByCentroidXY, const List& areaDistByPtsX, const List& areaDistByPtsY, const List& areaDistByPtsXY, const List& areaWeightByPtsX, const List& areaWeightByPtsY, const List& areaWeightByPtsXY);
RcppExport SEXP _atakrig_crossSvAreaCloudByPointVgmInit(SEXP discretePointsXSEXP, SEXP discretePointsYSEXP, SEXP ptVgmModelXSEXP, SEXP ptVgmModelYSEXP, SEXP areaDistByCentroidXYSEXP, SEXP areaDistByPtsXSEXP, SEXP areaDistByPtsYSEXP, SEXP areaDistByPtsXYSEXP, SEXP areaWeightByPtsXSEXP, SEXP areaWeightByPtsYSEXP, SEXP areaWeightByPtsXYSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type discretePointsX(discretePointsXSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type discretePointsY(discretePointsYSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ptVgmModelX(ptVgmModelXSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ptVgmModelY(ptVgmModelYSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type areaDistByCentroidXY(areaDistByCentroidXYSEXP);
    Rcpp::traits::input_parameter< const List& >::type areaDistByPtsX(areaDistByPtsXSEXP);
    Rcpp::traits::input_parameter< const List& >::type areaDistByPtsY(areaDistByPtsYSEXP);
    Rcpp::traits::input_parameter< const List& >::type areaDistByPtsXY(areaDistByPtsXYSEXP);
    Rcpp::traits::input_parameter< const List& >::type areaWeightByPtsX(areaWeightByPtsXSEXP);
    Rcpp::traits::input_parameter< const List& >::type areaWeightByPtsY(areaWeightByPtsYSEXP);
    Rcpp::traits::input_parameter< const List& >::type areaWeightByPtsXY(areaWeightByPtsXYSEXP);
    crossSvAreaCloudByPointVgmInit(discretePointsX, discretePointsY, ptVgmModelX, ptVgmModelY, areaDistByCentroidXY, areaDistByPtsX, areaDistByPtsY, areaDistByPtsXY, areaWeightByPtsX, areaWeightByPtsY, areaWeightByPtsXY);
    return R_NilValue;
END_RCPP
}
// crossSvAreaCloudByPointVgm
DataFrame crossSvAreaCloudByPointVgm(const DataFrame& xyPointCrossVgm);
RcppExport SEXP _atakrig_crossSvAreaCloudByPointVgm(SEXP xyPointCrossVgmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type xyPointCrossVgm(xyPointCrossVgmSEXP);
    rcpp_result_gen = Rcpp::wrap(crossSvAreaCloudByPointVgm(xyPointCrossVgm));
    return rcpp_result_gen;
END_RCPP
}
// crossSvAreaCloudByPointVgmEnd
void crossSvAreaCloudByPointVgmEnd();
RcppExport SEXP _atakrig_crossSvAreaCloudByPointVgmEnd() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    crossSvAreaCloudByPointVgmEnd();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_atakrig_variogramLineSimple", (DL_FUNC) &_atakrig_variogramLineSimple, 3},
    {"_atakrig_spDistsNN", (DL_FUNC) &_atakrig_spDistsNN, 5},
    {"_atakrig_outerProd", (DL_FUNC) &_atakrig_outerProd, 2},
    {"_atakrig_svAreaCloudByPointVgmInit", (DL_FUNC) &_atakrig_svAreaCloudByPointVgmInit, 3},
    {"_atakrig_svAreaCloudByPointVgmEnd", (DL_FUNC) &_atakrig_svAreaCloudByPointVgmEnd, 0},
    {"_atakrig_ataSetNumberOfThreadsForOMP", (DL_FUNC) &_atakrig_ataSetNumberOfThreadsForOMP, 1},
    {"_atakrig_svAreaCloudByPointVgm", (DL_FUNC) &_atakrig_svAreaCloudByPointVgm, 1},
    {"_atakrig_crossSvAreaCloudByPointVgmInit", (DL_FUNC) &_atakrig_crossSvAreaCloudByPointVgmInit, 11},
    {"_atakrig_crossSvAreaCloudByPointVgm", (DL_FUNC) &_atakrig_crossSvAreaCloudByPointVgm, 1},
    {"_atakrig_crossSvAreaCloudByPointVgmEnd", (DL_FUNC) &_atakrig_crossSvAreaCloudByPointVgmEnd, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_atakrig(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
