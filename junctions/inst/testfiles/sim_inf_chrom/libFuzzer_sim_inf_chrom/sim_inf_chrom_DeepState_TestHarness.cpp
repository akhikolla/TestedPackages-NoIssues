// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sim_inf_chrom_DeepState_TestHarness_generation.cpp and sim_inf_chrom_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List sim_inf_chrom(int pop_size, double init_heterozygosity, int run_time, double size_in_Morgan, int markers, int seed);

TEST(junctions_deepstate_test,sim_inf_chrom_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector pop_size(1);
  pop_size[0]  = RcppDeepState_int();
  std::string pop_size_t = "/home/akhila/fuzzer_packages/fuzzedpackages/junctions/inst/testfiles/sim_inf_chrom/libFuzzer_sim_inf_chrom/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_pop_size.qs";
  qs::c_qsave(pop_size,pop_size_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pop_size values: "<< pop_size << std::endl;
  NumericVector init_heterozygosity(1);
  init_heterozygosity[0]  = RcppDeepState_double();
  std::string init_heterozygosity_t = "/home/akhila/fuzzer_packages/fuzzedpackages/junctions/inst/testfiles/sim_inf_chrom/libFuzzer_sim_inf_chrom/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_init_heterozygosity.qs";
  qs::c_qsave(init_heterozygosity,init_heterozygosity_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "init_heterozygosity values: "<< init_heterozygosity << std::endl;
  IntegerVector run_time(1);
  run_time[0]  = RcppDeepState_int();
  std::string run_time_t = "/home/akhila/fuzzer_packages/fuzzedpackages/junctions/inst/testfiles/sim_inf_chrom/libFuzzer_sim_inf_chrom/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_run_time.qs";
  qs::c_qsave(run_time,run_time_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "run_time values: "<< run_time << std::endl;
  NumericVector size_in_Morgan(1);
  size_in_Morgan[0]  = RcppDeepState_double();
  std::string size_in_Morgan_t = "/home/akhila/fuzzer_packages/fuzzedpackages/junctions/inst/testfiles/sim_inf_chrom/libFuzzer_sim_inf_chrom/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_size_in_Morgan.qs";
  qs::c_qsave(size_in_Morgan,size_in_Morgan_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "size_in_Morgan values: "<< size_in_Morgan << std::endl;
  IntegerVector markers(1);
  markers[0]  = RcppDeepState_int();
  std::string markers_t = "/home/akhila/fuzzer_packages/fuzzedpackages/junctions/inst/testfiles/sim_inf_chrom/libFuzzer_sim_inf_chrom/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_markers.qs";
  qs::c_qsave(markers,markers_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "markers values: "<< markers << std::endl;
  IntegerVector seed(1);
  seed[0]  = RcppDeepState_int();
  std::string seed_t = "/home/akhila/fuzzer_packages/fuzzedpackages/junctions/inst/testfiles/sim_inf_chrom/libFuzzer_sim_inf_chrom/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_seed.qs";
  qs::c_qsave(seed,seed_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "seed values: "<< seed << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sim_inf_chrom(pop_size[0],init_heterozygosity[0],run_time[0],size_in_Morgan[0],markers[0],seed[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
