// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// bestswap_DeepState_TestHarness_generation.cpp and bestswap_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerVector bestswap(NumericMatrix dm, IntegerVector ins, IntegerVector outs);

TEST(tbart_deepstate_test,bestswap_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix dm  = RcppDeepState_NumericMatrix();
  std::string dm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tbart/inst/testfiles/bestswap/libFuzzer_bestswap/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dm.qs";
  qs::c_qsave(dm,dm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dm values: "<< dm << std::endl;
  IntegerVector ins  = RcppDeepState_IntegerVector();
  std::string ins_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tbart/inst/testfiles/bestswap/libFuzzer_bestswap/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ins.qs";
  qs::c_qsave(ins,ins_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ins values: "<< ins << std::endl;
  IntegerVector outs  = RcppDeepState_IntegerVector();
  std::string outs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tbart/inst/testfiles/bestswap/libFuzzer_bestswap/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_outs.qs";
  qs::c_qsave(outs,outs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "outs values: "<< outs << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    bestswap(dm,ins,outs);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
