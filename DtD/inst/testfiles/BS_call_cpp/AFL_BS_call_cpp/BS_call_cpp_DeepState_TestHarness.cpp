// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// BS_call_cpp_DeepState_TestHarness_generation.cpp and BS_call_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double BS_call_cpp(const double V, const double D, const double T, const double r, const double vol);

TEST(DtD_deepstate_test,BS_call_cpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector V(1);
  V[0]  = RcppDeepState_double();
  std::string V_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DtD/inst/testfiles/BS_call_cpp/AFL_BS_call_cpp/afl_inputs/" + std::to_string(t) + "_V.qs";
  qs::c_qsave(V,V_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "V values: "<< V << std::endl;
  NumericVector D(1);
  D[0]  = RcppDeepState_double();
  std::string D_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DtD/inst/testfiles/BS_call_cpp/AFL_BS_call_cpp/afl_inputs/" + std::to_string(t) + "_D.qs";
  qs::c_qsave(D,D_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "D values: "<< D << std::endl;
  NumericVector T(1);
  T[0]  = RcppDeepState_double();
  std::string T_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DtD/inst/testfiles/BS_call_cpp/AFL_BS_call_cpp/afl_inputs/" + std::to_string(t) + "_T.qs";
  qs::c_qsave(T,T_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "T values: "<< T << std::endl;
  NumericVector r(1);
  r[0]  = RcppDeepState_double();
  std::string r_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DtD/inst/testfiles/BS_call_cpp/AFL_BS_call_cpp/afl_inputs/" + std::to_string(t) + "_r.qs";
  qs::c_qsave(r,r_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "r values: "<< r << std::endl;
  NumericVector vol(1);
  vol[0]  = RcppDeepState_double();
  std::string vol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DtD/inst/testfiles/BS_call_cpp/AFL_BS_call_cpp/afl_inputs/" + std::to_string(t) + "_vol.qs";
  qs::c_qsave(vol,vol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vol values: "<< vol << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    BS_call_cpp(V[0],D[0],T[0],r[0],vol[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
