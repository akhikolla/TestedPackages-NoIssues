// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// paraGmmCW_DeepState_TestHarness_generation.cpp and paraGmmCW_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List paraGmmCW(NumericMatrix X, NumericVector Xw, int G, NumericVector alpha, NumericMatrix mu, NumericMatrix sigma, double eigenRatioLim, double convergenceEPS, double alphaEPS, int maxIter, double tlimit, int verbose, int maxCore);

TEST(GMKMcharlie_deepstate_test,paraGmmCW_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  qs::c_qsave(X,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/X.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericVector Xw  = RcppDeepState_NumericVector();
  qs::c_qsave(Xw,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/Xw.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Xw values: "<< Xw << std::endl;
  IntegerVector G(1);
  G[0]  = RcppDeepState_int();
  qs::c_qsave(G,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/G.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "G values: "<< G << std::endl;
  NumericVector alpha  = RcppDeepState_NumericVector();
  qs::c_qsave(alpha,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/alpha.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericMatrix mu  = RcppDeepState_NumericMatrix();
  qs::c_qsave(mu,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/mu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericMatrix sigma  = RcppDeepState_NumericMatrix();
  qs::c_qsave(sigma,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/sigma.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma values: "<< sigma << std::endl;
  NumericVector eigenRatioLim(1);
  eigenRatioLim[0]  = RcppDeepState_double();
  qs::c_qsave(eigenRatioLim,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/eigenRatioLim.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eigenRatioLim values: "<< eigenRatioLim << std::endl;
  NumericVector convergenceEPS(1);
  convergenceEPS[0]  = RcppDeepState_double();
  qs::c_qsave(convergenceEPS,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/convergenceEPS.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "convergenceEPS values: "<< convergenceEPS << std::endl;
  NumericVector alphaEPS(1);
  alphaEPS[0]  = RcppDeepState_double();
  qs::c_qsave(alphaEPS,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/alphaEPS.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alphaEPS values: "<< alphaEPS << std::endl;
  IntegerVector maxIter(1);
  maxIter[0]  = RcppDeepState_int();
  qs::c_qsave(maxIter,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/maxIter.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxIter values: "<< maxIter << std::endl;
  NumericVector tlimit(1);
  tlimit[0]  = RcppDeepState_double();
  qs::c_qsave(tlimit,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/tlimit.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tlimit values: "<< tlimit << std::endl;
  IntegerVector verbose(1);
  verbose[0]  = RcppDeepState_int();
  qs::c_qsave(verbose,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/verbose.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "verbose values: "<< verbose << std::endl;
  IntegerVector maxCore(1);
  maxCore[0]  = RcppDeepState_int();
  qs::c_qsave(maxCore,"/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/paraGmmCW/inputs/maxCore.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxCore values: "<< maxCore << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    paraGmmCW(X,Xw,G[0],alpha,mu,sigma,eigenRatioLim[0],convergenceEPS[0],alphaEPS[0],maxIter[0],tlimit[0],verbose[0],maxCore[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
