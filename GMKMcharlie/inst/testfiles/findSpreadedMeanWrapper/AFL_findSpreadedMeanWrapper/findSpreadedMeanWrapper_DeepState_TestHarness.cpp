// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// findSpreadedMeanWrapper_DeepState_TestHarness_generation.cpp and findSpreadedMeanWrapper_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix findSpreadedMeanWrapper(NumericMatrix X, int K, int maxCore);

TEST(GMKMcharlie_deepstate_test,findSpreadedMeanWrapper_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/findSpreadedMeanWrapper/AFL_findSpreadedMeanWrapper/afl_inputs/" + std::to_string(t) + "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  IntegerVector K(1);
  K[0]  = RcppDeepState_int();
  std::string K_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/findSpreadedMeanWrapper/AFL_findSpreadedMeanWrapper/afl_inputs/" + std::to_string(t) + "_K.qs";
  qs::c_qsave(K,K_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K values: "<< K << std::endl;
  IntegerVector maxCore(1);
  maxCore[0]  = RcppDeepState_int();
  std::string maxCore_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GMKMcharlie/inst/testfiles/findSpreadedMeanWrapper/AFL_findSpreadedMeanWrapper/afl_inputs/" + std::to_string(t) + "_maxCore.qs";
  qs::c_qsave(maxCore,maxCore_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxCore values: "<< maxCore << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    findSpreadedMeanWrapper(X,K[0],maxCore[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
