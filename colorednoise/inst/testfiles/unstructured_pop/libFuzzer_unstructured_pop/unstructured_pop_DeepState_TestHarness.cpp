// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// unstructured_pop_DeepState_TestHarness_generation.cpp and unstructured_pop_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::DataFrame unstructured_pop(int start, int timesteps, double survPhi, double fecundPhi, double survMean, double survSd, double fecundMean, double fecundSd);

TEST(colorednoise_deepstate_test,unstructured_pop_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector start(1);
  start[0]  = RcppDeepState_int();
  std::string start_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/unstructured_pop/libFuzzer_unstructured_pop/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_start.qs";
  qs::c_qsave(start,start_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "start values: "<< start << std::endl;
  IntegerVector timesteps(1);
  timesteps[0]  = RcppDeepState_int();
  std::string timesteps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/unstructured_pop/libFuzzer_unstructured_pop/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_timesteps.qs";
  qs::c_qsave(timesteps,timesteps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "timesteps values: "<< timesteps << std::endl;
  NumericVector survPhi(1);
  survPhi[0]  = RcppDeepState_double();
  std::string survPhi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/unstructured_pop/libFuzzer_unstructured_pop/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_survPhi.qs";
  qs::c_qsave(survPhi,survPhi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "survPhi values: "<< survPhi << std::endl;
  NumericVector fecundPhi(1);
  fecundPhi[0]  = RcppDeepState_double();
  std::string fecundPhi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/unstructured_pop/libFuzzer_unstructured_pop/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_fecundPhi.qs";
  qs::c_qsave(fecundPhi,fecundPhi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fecundPhi values: "<< fecundPhi << std::endl;
  NumericVector survMean(1);
  survMean[0]  = RcppDeepState_double();
  std::string survMean_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/unstructured_pop/libFuzzer_unstructured_pop/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_survMean.qs";
  qs::c_qsave(survMean,survMean_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "survMean values: "<< survMean << std::endl;
  NumericVector survSd(1);
  survSd[0]  = RcppDeepState_double();
  std::string survSd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/unstructured_pop/libFuzzer_unstructured_pop/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_survSd.qs";
  qs::c_qsave(survSd,survSd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "survSd values: "<< survSd << std::endl;
  NumericVector fecundMean(1);
  fecundMean[0]  = RcppDeepState_double();
  std::string fecundMean_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/unstructured_pop/libFuzzer_unstructured_pop/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_fecundMean.qs";
  qs::c_qsave(fecundMean,fecundMean_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fecundMean values: "<< fecundMean << std::endl;
  NumericVector fecundSd(1);
  fecundSd[0]  = RcppDeepState_double();
  std::string fecundSd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/unstructured_pop/libFuzzer_unstructured_pop/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_fecundSd.qs";
  qs::c_qsave(fecundSd,fecundSd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fecundSd values: "<< fecundSd << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    unstructured_pop(start[0],timesteps[0],survPhi[0],fecundPhi[0],survMean[0],survSd[0],fecundMean[0],fecundSd[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
