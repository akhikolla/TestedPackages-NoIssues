// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// colored_noise_DeepState_TestHarness_generation.cpp and colored_noise_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector colored_noise(int timesteps, double mean, double sd, double phi);

TEST(colorednoise_deepstate_test,colored_noise_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector timesteps(1);
  timesteps[0]  = RcppDeepState_int();
  std::string timesteps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/colored_noise/AFL_colored_noise/afl_inputs/" + std::to_string(t) + "_timesteps.qs";
  qs::c_qsave(timesteps,timesteps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "timesteps values: "<< timesteps << std::endl;
  NumericVector mean(1);
  mean[0]  = RcppDeepState_double();
  std::string mean_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/colored_noise/AFL_colored_noise/afl_inputs/" + std::to_string(t) + "_mean.qs";
  qs::c_qsave(mean,mean_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mean values: "<< mean << std::endl;
  NumericVector sd(1);
  sd[0]  = RcppDeepState_double();
  std::string sd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/colored_noise/AFL_colored_noise/afl_inputs/" + std::to_string(t) + "_sd.qs";
  qs::c_qsave(sd,sd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sd values: "<< sd << std::endl;
  NumericVector phi(1);
  phi[0]  = RcppDeepState_double();
  std::string phi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/colorednoise/inst/testfiles/colored_noise/AFL_colored_noise/afl_inputs/" + std::to_string(t) + "_phi.qs";
  qs::c_qsave(phi,phi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phi values: "<< phi << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    colored_noise(timesteps[0],mean[0],sd[0],phi[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
