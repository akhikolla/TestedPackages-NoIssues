// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// resBoot_DeepState_TestHarness_generation.cpp and resBoot_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

SEXP resBoot(NumericVector coeff, NumericVector r, double S, double k);

TEST(RobGARCHBoot_deepstate_test,resBoot_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector coeff  = RcppDeepState_NumericVector();
  std::string coeff_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/resBoot/libFuzzer_resBoot/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_coeff.qs";
  qs::c_qsave(coeff,coeff_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "coeff values: "<< coeff << std::endl;
  NumericVector r  = RcppDeepState_NumericVector();
  std::string r_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/resBoot/libFuzzer_resBoot/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_r.qs";
  qs::c_qsave(r,r_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "r values: "<< r << std::endl;
  NumericVector S(1);
  S[0]  = RcppDeepState_double();
  std::string S_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/resBoot/libFuzzer_resBoot/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_S.qs";
  qs::c_qsave(S,S_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "S values: "<< S << std::endl;
  NumericVector k(1);
  k[0]  = RcppDeepState_double();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/resBoot/libFuzzer_resBoot/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    resBoot(coeff,r,S[0],k[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
