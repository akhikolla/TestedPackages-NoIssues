// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// foreBoot_DeepState_TestHarness_generation.cpp and foreBoot_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

SEXP foreBoot(NumericVector coeff, NumericVector e, NumericVector e2, NumericVector h, NumericVector r, int ahead, double k);

TEST(RobGARCHBoot_deepstate_test,foreBoot_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector coeff  = RcppDeepState_NumericVector();
  std::string coeff_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/foreBoot/AFL_foreBoot/afl_inputs/" + std::to_string(t) + "_coeff.qs";
  qs::c_qsave(coeff,coeff_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "coeff values: "<< coeff << std::endl;
  NumericVector e  = RcppDeepState_NumericVector();
  std::string e_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/foreBoot/AFL_foreBoot/afl_inputs/" + std::to_string(t) + "_e.qs";
  qs::c_qsave(e,e_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "e values: "<< e << std::endl;
  NumericVector e2  = RcppDeepState_NumericVector();
  std::string e_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/foreBoot/AFL_foreBoot/afl_inputs/" + std::to_string(t) + "_e.qs";
  std::string e2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/foreBoot/AFL_foreBoot/afl_inputs/" + std::to_string(t) + "_e2.qs";
  qs::c_qsave(e2,e2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "e2 values: "<< e2 << std::endl;
  NumericVector h  = RcppDeepState_NumericVector();
  std::string h_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/foreBoot/AFL_foreBoot/afl_inputs/" + std::to_string(t) + "_h.qs";
  qs::c_qsave(h,h_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h values: "<< h << std::endl;
  NumericVector r  = RcppDeepState_NumericVector();
  std::string r_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/foreBoot/AFL_foreBoot/afl_inputs/" + std::to_string(t) + "_r.qs";
  qs::c_qsave(r,r_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "r values: "<< r << std::endl;
  IntegerVector ahead(1);
  ahead[0]  = RcppDeepState_int();
  std::string ahead_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/foreBoot/AFL_foreBoot/afl_inputs/" + std::to_string(t) + "_ahead.qs";
  qs::c_qsave(ahead,ahead_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ahead values: "<< ahead << std::endl;
  NumericVector k(1);
  k[0]  = RcppDeepState_double();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/RobGARCHBoot/inst/testfiles/foreBoot/AFL_foreBoot/afl_inputs/" + std::to_string(t) + "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    foreBoot(coeff,e,e2,h,r,ahead[0],k[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
