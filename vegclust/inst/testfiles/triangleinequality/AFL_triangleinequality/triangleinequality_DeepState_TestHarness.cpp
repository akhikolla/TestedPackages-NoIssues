// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// triangleinequality_DeepState_TestHarness_generation.cpp and triangleinequality_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

bool triangleinequality(double d1, double d2, double d3, double tol);

TEST(vegclust_deepstate_test,triangleinequality_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector d1(1);
  d1[0]  = RcppDeepState_double();
  std::string d1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/vegclust/inst/testfiles/triangleinequality/AFL_triangleinequality/afl_inputs/" + std::to_string(t) + "_d1.qs";
  qs::c_qsave(d1,d1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d1 values: "<< d1 << std::endl;
  NumericVector d2(1);
  d2[0]  = RcppDeepState_double();
  std::string d2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/vegclust/inst/testfiles/triangleinequality/AFL_triangleinequality/afl_inputs/" + std::to_string(t) + "_d2.qs";
  qs::c_qsave(d2,d2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d2 values: "<< d2 << std::endl;
  NumericVector d3(1);
  d3[0]  = RcppDeepState_double();
  std::string d3_t = "/home/akhila/fuzzer_packages/fuzzedpackages/vegclust/inst/testfiles/triangleinequality/AFL_triangleinequality/afl_inputs/" + std::to_string(t) + "_d3.qs";
  qs::c_qsave(d3,d3_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d3 values: "<< d3 << std::endl;
  NumericVector tol(1);
  tol[0]  = RcppDeepState_double();
  std::string tol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/vegclust/inst/testfiles/triangleinequality/AFL_triangleinequality/afl_inputs/" + std::to_string(t) + "_tol.qs";
  qs::c_qsave(tol,tol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tol values: "<< tol << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    triangleinequality(d1[0],d2[0],d3[0],tol[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
