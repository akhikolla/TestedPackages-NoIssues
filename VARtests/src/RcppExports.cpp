// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ACtestCpp
SEXP ACtestCpp(arma::mat z_e, arma::mat z, arma::mat e, int h, bool univariate, bool LM, bool HC0, bool HC1, bool HC2, bool HC3);
RcppExport SEXP _VARtests_ACtestCpp(SEXP z_eSEXP, SEXP zSEXP, SEXP eSEXP, SEXP hSEXP, SEXP univariateSEXP, SEXP LMSEXP, SEXP HC0SEXP, SEXP HC1SEXP, SEXP HC2SEXP, SEXP HC3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type z_e(z_eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< bool >::type univariate(univariateSEXP);
    Rcpp::traits::input_parameter< bool >::type LM(LMSEXP);
    Rcpp::traits::input_parameter< bool >::type HC0(HC0SEXP);
    Rcpp::traits::input_parameter< bool >::type HC1(HC1SEXP);
    Rcpp::traits::input_parameter< bool >::type HC2(HC2SEXP);
    Rcpp::traits::input_parameter< bool >::type HC3(HC3SEXP);
    rcpp_result_gen = Rcpp::wrap(ACtestCpp(z_e, z, e, h, univariate, LM, HC0, HC1, HC2, HC3));
    return rcpp_result_gen;
END_RCPP
}
// computeET_LM
arma::mat computeET_LM(arma::mat resid, int h);
RcppExport SEXP _VARtests_computeET_LM(SEXP residSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type resid(residSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(computeET_LM(resid, h));
    return rcpp_result_gen;
END_RCPP
}
// computeMARCH
double computeMARCH(arma::mat e, int h);
RcppExport SEXP _VARtests_computeMARCH(SEXP eSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMARCH(e, h));
    return rcpp_result_gen;
END_RCPP
}
// estimate_VECM
SEXP estimate_VECM(arma::mat y, int r, int p, int model, arma::mat dummy);
RcppExport SEXP _VARtests_estimate_VECM(SEXP ySEXP, SEXP rSEXP, SEXP pSEXP, SEXP modelSEXP, SEXP dummySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dummy(dummySEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_VECM(y, r, p, model, dummy));
    return rcpp_result_gen;
END_RCPP
}
// make_VECM
arma::mat make_VECM(arma::mat Ystart, arma::mat e, arma::mat alpha, arma::mat beta, arma::mat gamma, arma::mat rho, arma::mat phi, int model);
RcppExport SEXP _VARtests_make_VECM(SEXP YstartSEXP, SEXP eSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP phiSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Ystart(YstartSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(make_VECM(Ystart, e, alpha, beta, gamma, rho, phi, model));
    return rcpp_result_gen;
END_RCPP
}
// vecm_check_eigen
SEXP vecm_check_eigen(arma::mat alpha, arma::mat beta, arma::mat gamma, int r, int k, int p);
RcppExport SEXP _VARtests_vecm_check_eigen(SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP rSEXP, SEXP kSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(vecm_check_eigen(alpha, beta, gamma, r, k, p));
    return rcpp_result_gen;
END_RCPP
}
// makeVar
arma::mat makeVar(arma::mat Ystart, arma::mat e, arma::mat param, int p, bool constFlag, bool trendFlag, bool exogenFlag, arma::mat exogen);
RcppExport SEXP _VARtests_makeVar(SEXP YstartSEXP, SEXP eSEXP, SEXP paramSEXP, SEXP pSEXP, SEXP constFlagSEXP, SEXP trendFlagSEXP, SEXP exogenFlagSEXP, SEXP exogenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Ystart(YstartSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type constFlag(constFlagSEXP);
    Rcpp::traits::input_parameter< bool >::type trendFlag(trendFlagSEXP);
    Rcpp::traits::input_parameter< bool >::type exogenFlag(exogenFlagSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type exogen(exogenSEXP);
    rcpp_result_gen = Rcpp::wrap(makeVar(Ystart, e, param, p, constFlag, trendFlag, exogenFlag, exogen));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VARtests_ACtestCpp", (DL_FUNC) &_VARtests_ACtestCpp, 10},
    {"_VARtests_computeET_LM", (DL_FUNC) &_VARtests_computeET_LM, 2},
    {"_VARtests_computeMARCH", (DL_FUNC) &_VARtests_computeMARCH, 2},
    {"_VARtests_estimate_VECM", (DL_FUNC) &_VARtests_estimate_VECM, 5},
    {"_VARtests_make_VECM", (DL_FUNC) &_VARtests_make_VECM, 8},
    {"_VARtests_vecm_check_eigen", (DL_FUNC) &_VARtests_vecm_check_eigen, 6},
    {"_VARtests_makeVar", (DL_FUNC) &_VARtests_makeVar, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_VARtests(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
