// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// ds3_DeepState_TestHarness_generation.cpp and ds3_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double ds3(NumericVector T, double x, NumericMatrix inv, double dt, int order);

TEST(VNM_deepstate_test,ds3_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector T  = RcppDeepState_NumericVector();
  std::string T_t = "/home/akhila/fuzzer_packages/fuzzedpackages/VNM/inst/testfiles/ds3/AFL_ds3/afl_inputs/" + std::to_string(t) + "_T.qs";
  qs::c_qsave(T,T_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "T values: "<< T << std::endl;
  NumericVector x(1);
  x[0]  = RcppDeepState_double();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/VNM/inst/testfiles/ds3/AFL_ds3/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericMatrix inv  = RcppDeepState_NumericMatrix();
  std::string inv_t = "/home/akhila/fuzzer_packages/fuzzedpackages/VNM/inst/testfiles/ds3/AFL_ds3/afl_inputs/" + std::to_string(t) + "_inv.qs";
  qs::c_qsave(inv,inv_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inv values: "<< inv << std::endl;
  NumericVector dt(1);
  dt[0]  = RcppDeepState_double();
  std::string dt_t = "/home/akhila/fuzzer_packages/fuzzedpackages/VNM/inst/testfiles/ds3/AFL_ds3/afl_inputs/" + std::to_string(t) + "_dt.qs";
  qs::c_qsave(dt,dt_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dt values: "<< dt << std::endl;
  IntegerVector order(1);
  order[0]  = RcppDeepState_int();
  std::string order_t = "/home/akhila/fuzzer_packages/fuzzedpackages/VNM/inst/testfiles/ds3/AFL_ds3/afl_inputs/" + std::to_string(t) + "_order.qs";
  qs::c_qsave(order,order_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "order values: "<< order << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    ds3(T,x[0],inv,dt[0],order[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
