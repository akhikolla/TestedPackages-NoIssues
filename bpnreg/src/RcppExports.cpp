// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rho
Rcpp::List rho(arma::vec theta);
RcppExport SEXP _bpnreg_rho(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(rho(theta));
    return rcpp_result_gen;
END_RCPP
}
// theta_bar
double theta_bar(arma::vec theta);
RcppExport SEXP _bpnreg_theta_bar(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_bar(theta));
    return rcpp_result_gen;
END_RCPP
}
// eigen_val
arma::vec eigen_val(arma::mat X);
RcppExport SEXP _bpnreg_eigen_val(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_val(X));
    return rcpp_result_gen;
END_RCPP
}
// eigen_vec
arma::mat eigen_vec(arma::mat X);
RcppExport SEXP _bpnreg_eigen_vec(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_vec(X));
    return rcpp_result_gen;
END_RCPP
}
// mvrnorm_arma_eigen
arma::mat mvrnorm_arma_eigen(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _bpnreg_mvrnorm_arma_eigen(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnorm_arma_eigen(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// circ_coef_rcpp
NumericVector circ_coef_rcpp(double a1, double a2, double b1, double b2);
RcppExport SEXP _bpnreg_circ_coef_rcpp(SEXP a1SEXP, SEXP a2SEXP, SEXP b1SEXP, SEXP b2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    rcpp_result_gen = Rcpp::wrap(circ_coef_rcpp(a1, a2, b1, b2));
    return rcpp_result_gen;
END_RCPP
}
// lik
arma::vec lik(arma::mat X1, arma::mat X2, arma::vec theta, arma::mat b1, arma::mat b2, int n);
RcppExport SEXP _bpnreg_lik(SEXP X1SEXP, SEXP X2SEXP, SEXP thetaSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(lik(X1, X2, theta, b1, b2, n));
    return rcpp_result_gen;
END_RCPP
}
// DIC_reg
Rcpp::List DIC_reg(Rcpp::List Output, arma::mat X1, arma::mat X2);
RcppExport SEXP _bpnreg_DIC_reg(SEXP OutputSEXP, SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Output(OutputSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(DIC_reg(Output, X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// slice_rcpp
arma::mat slice_rcpp(arma::mat X1, arma::mat X2, arma::vec theta, arma::mat b1, arma::mat b2, int n, arma::mat r);
RcppExport SEXP _bpnreg_slice_rcpp(SEXP X1SEXP, SEXP X2SEXP, SEXP thetaSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP nSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_rcpp(X1, X2, theta, b1, b2, n, r));
    return rcpp_result_gen;
END_RCPP
}
// pnr
Rcpp::List pnr(arma::vec theta, NumericMatrix X1r, NumericMatrix X2r, int its, int lag, int burn);
RcppExport SEXP _bpnreg_pnr(SEXP thetaSEXP, SEXP X1rSEXP, SEXP X2rSEXP, SEXP itsSEXP, SEXP lagSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X1r(X1rSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X2r(X2rSEXP);
    Rcpp::traits::input_parameter< int >::type its(itsSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(pnr(theta, X1r, X2r, its, lag, burn));
    return rcpp_result_gen;
END_RCPP
}
// hmodeC
double hmodeC(NumericVector x, double cip);
RcppExport SEXP _bpnreg_hmodeC(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(hmodeC(x, cip));
    return rcpp_result_gen;
END_RCPP
}
// hmodeciC
NumericVector hmodeciC(NumericVector x, double cip);
RcppExport SEXP _bpnreg_hmodeciC(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(hmodeciC(x, cip));
    return rcpp_result_gen;
END_RCPP
}
// hmode
double hmode(NumericVector x, double cip);
RcppExport SEXP _bpnreg_hmode(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(hmode(x, cip));
    return rcpp_result_gen;
END_RCPP
}
// hmodeci
NumericVector hmodeci(NumericVector x, double cip);
RcppExport SEXP _bpnreg_hmodeci(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(hmodeci(x, cip));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bpnreg_rho", (DL_FUNC) &_bpnreg_rho, 1},
    {"_bpnreg_theta_bar", (DL_FUNC) &_bpnreg_theta_bar, 1},
    {"_bpnreg_eigen_val", (DL_FUNC) &_bpnreg_eigen_val, 1},
    {"_bpnreg_eigen_vec", (DL_FUNC) &_bpnreg_eigen_vec, 1},
    {"_bpnreg_mvrnorm_arma_eigen", (DL_FUNC) &_bpnreg_mvrnorm_arma_eigen, 3},
    {"_bpnreg_circ_coef_rcpp", (DL_FUNC) &_bpnreg_circ_coef_rcpp, 4},
    {"_bpnreg_lik", (DL_FUNC) &_bpnreg_lik, 6},
    {"_bpnreg_DIC_reg", (DL_FUNC) &_bpnreg_DIC_reg, 3},
    {"_bpnreg_slice_rcpp", (DL_FUNC) &_bpnreg_slice_rcpp, 7},
    {"_bpnreg_pnr", (DL_FUNC) &_bpnreg_pnr, 6},
    {"_bpnreg_hmodeC", (DL_FUNC) &_bpnreg_hmodeC, 2},
    {"_bpnreg_hmodeciC", (DL_FUNC) &_bpnreg_hmodeciC, 2},
    {"_bpnreg_hmode", (DL_FUNC) &_bpnreg_hmode, 2},
    {"_bpnreg_hmodeci", (DL_FUNC) &_bpnreg_hmodeci, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_bpnreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
