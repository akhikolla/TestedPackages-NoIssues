// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// bifiesurvey_rcpp_logistreg_DeepState_TestHarness_generation.cpp and bifiesurvey_rcpp_logistreg_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List bifiesurvey_rcpp_logistreg(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector dep_index, Rcpp::NumericVector pre_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values, double eps, int maxiter);

TEST(BIFIEsurvey_deepstate_test,bifiesurvey_rcpp_logistreg_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix datalist  = RcppDeepState_NumericMatrix();
  qs::c_qsave(datalist,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/datalist.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "datalist values: "<< datalist << std::endl;
  NumericMatrix wgt1  = RcppDeepState_NumericMatrix();
  qs::c_qsave(wgt1,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/wgt1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wgt1 values: "<< wgt1 << std::endl;
  NumericMatrix wgtrep  = RcppDeepState_NumericMatrix();
  qs::c_qsave(wgtrep,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/wgtrep.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wgtrep values: "<< wgtrep << std::endl;
  NumericVector dep_index  = RcppDeepState_NumericVector();
  qs::c_qsave(dep_index,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/dep_index.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dep_index values: "<< dep_index << std::endl;
  NumericVector pre_index  = RcppDeepState_NumericVector();
  qs::c_qsave(pre_index,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/pre_index.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pre_index values: "<< pre_index << std::endl;
  NumericVector fayfac  = RcppDeepState_NumericVector();
  qs::c_qsave(fayfac,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/fayfac.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fayfac values: "<< fayfac << std::endl;
  NumericVector NI  = RcppDeepState_NumericVector();
  qs::c_qsave(NI,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/NI.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NI values: "<< NI << std::endl;
  NumericVector group_index1  = RcppDeepState_NumericVector();
  qs::c_qsave(group_index1,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/group_index1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "group_index1 values: "<< group_index1 << std::endl;
  NumericVector group_values  = RcppDeepState_NumericVector();
  qs::c_qsave(group_values,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/group_values.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "group_values values: "<< group_values << std::endl;
  NumericVector eps(1);
  eps[0]  = RcppDeepState_double();
  qs::c_qsave(eps,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/eps.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps values: "<< eps << std::endl;
  IntegerVector maxiter(1);
  maxiter[0]  = RcppDeepState_int();
  qs::c_qsave(maxiter,"/home/akhila/fuzzer_packages/fuzzedpackages/BIFIEsurvey/inst/testfiles/bifiesurvey_rcpp_logistreg/inputs/maxiter.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxiter values: "<< maxiter << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    bifiesurvey_rcpp_logistreg(datalist,wgt1,wgtrep,dep_index,pre_index,fayfac,NI,group_index1,group_values,eps[0],maxiter[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
