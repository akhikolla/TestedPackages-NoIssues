// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// W1_DeepState_TestHarness_generation.cpp and W1_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double W1(NumericMatrix crossdx, NumericMatrix b, NumericMatrix A, double h);

TEST(yuima_deepstate_test,W1_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix crossdx  = RcppDeepState_NumericMatrix();
  std::string crossdx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/yuima/inst/testfiles/W1/libFuzzer_W1/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_crossdx.qs";
  qs::c_qsave(crossdx,crossdx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "crossdx values: "<< crossdx << std::endl;
  NumericMatrix b  = RcppDeepState_NumericMatrix();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/yuima/inst/testfiles/W1/libFuzzer_W1/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_b.qs";
  qs::c_qsave(b,b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericMatrix A  = RcppDeepState_NumericMatrix();
  std::string A_t = "/home/akhila/fuzzer_packages/fuzzedpackages/yuima/inst/testfiles/W1/libFuzzer_W1/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_A.qs";
  qs::c_qsave(A,A_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "A values: "<< A << std::endl;
  NumericVector h(1);
  h[0]  = RcppDeepState_double();
  std::string h_t = "/home/akhila/fuzzer_packages/fuzzedpackages/yuima/inst/testfiles/W1/libFuzzer_W1/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_h.qs";
  qs::c_qsave(h,h_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h values: "<< h << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    W1(crossdx,b,A,h[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
