// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// GabrielGraph
IntegerMatrix GabrielGraph(const NumericMatrix X);
RcppExport SEXP _GGClassification_GabrielGraph(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(GabrielGraph(X));
    return rcpp_result_gen;
END_RCPP
}
// model
List model(NumericMatrix& X, IntegerVector& y, bool normalize);
RcppExport SEXP _GGClassification_model(SEXP XSEXP, SEXP ySEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(model(X, y, normalize));
    return rcpp_result_gen;
END_RCPP
}
// predict
IntegerVector predict(List model, NumericMatrix& X);
RcppExport SEXP _GGClassification_predict(SEXP modelSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(predict(model, X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GGClassification_GabrielGraph", (DL_FUNC) &_GGClassification_GabrielGraph, 1},
    {"_GGClassification_model", (DL_FUNC) &_GGClassification_model, 3},
    {"_GGClassification_predict", (DL_FUNC) &_GGClassification_predict, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_GGClassification(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
