// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// genspell_DeepState_TestHarness_generation.cpp and genspell_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List genspell(double x1, double x2, double ve, double vp, double censor);

TEST(durmod_deepstate_test,genspell_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x1(1);
  x1[0]  = RcppDeepState_double();
  std::string x1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/durmod/inst/testfiles/genspell/AFL_genspell/afl_inputs/" + std::to_string(t) + "_x1.qs";
  qs::c_qsave(x1,x1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x1 values: "<< x1 << std::endl;
  NumericVector x2(1);
  x2[0]  = RcppDeepState_double();
  std::string x2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/durmod/inst/testfiles/genspell/AFL_genspell/afl_inputs/" + std::to_string(t) + "_x2.qs";
  qs::c_qsave(x2,x2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x2 values: "<< x2 << std::endl;
  NumericVector ve(1);
  ve[0]  = RcppDeepState_double();
  std::string ve_t = "/home/akhila/fuzzer_packages/fuzzedpackages/durmod/inst/testfiles/genspell/AFL_genspell/afl_inputs/" + std::to_string(t) + "_ve.qs";
  qs::c_qsave(ve,ve_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ve values: "<< ve << std::endl;
  NumericVector vp(1);
  vp[0]  = RcppDeepState_double();
  std::string vp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/durmod/inst/testfiles/genspell/AFL_genspell/afl_inputs/" + std::to_string(t) + "_vp.qs";
  qs::c_qsave(vp,vp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vp values: "<< vp << std::endl;
  NumericVector censor(1);
  censor[0]  = RcppDeepState_double();
  std::string censor_t = "/home/akhila/fuzzer_packages/fuzzedpackages/durmod/inst/testfiles/genspell/AFL_genspell/afl_inputs/" + std::to_string(t) + "_censor.qs";
  qs::c_qsave(censor,censor_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "censor values: "<< censor << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    genspell(x1[0],x2[0],ve[0],vp[0],censor[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
