// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dim_domain_subarray_DeepState_TestHarness_generation.cpp and dim_domain_subarray_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector dim_domain_subarray(NumericVector domain, NumericVector subscript);

TEST(tiledb_deepstate_test,dim_domain_subarray_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector domain  = RcppDeepState_NumericVector();
  std::string domain_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tiledb/inst/testfiles/dim_domain_subarray/libFuzzer_dim_domain_subarray/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_domain.qs";
  qs::c_qsave(domain,domain_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "domain values: "<< domain << std::endl;
  NumericVector subscript  = RcppDeepState_NumericVector();
  std::string subscript_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tiledb/inst/testfiles/dim_domain_subarray/libFuzzer_dim_domain_subarray/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_subscript.qs";
  qs::c_qsave(subscript,subscript_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "subscript values: "<< subscript << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dim_domain_subarray(domain,subscript);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
