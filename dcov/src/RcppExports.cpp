// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// pdist
int pdist(const arma::mat& x, arma::mat& D);
RcppExport SEXP _dcov_pdist(SEXP xSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(pdist(x, D));
    return rcpp_result_gen;
END_RCPP
}
// Ucenter
int Ucenter(arma::mat& D);
RcppExport SEXP _dcov_Ucenter(SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(Ucenter(D));
    return rcpp_result_gen;
END_RCPP
}
// Vcenter
int Vcenter(arma::mat& D);
RcppExport SEXP _dcov_Vcenter(SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(Vcenter(D));
    return rcpp_result_gen;
END_RCPP
}
// centering
int centering(arma::mat& D, std::string type);
RcppExport SEXP _dcov_centering(SEXP DSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(centering(D, type));
    return rcpp_result_gen;
END_RCPP
}
// centering_from_data
int centering_from_data(const arma::mat& x, arma::mat& D, std::string type);
RcppExport SEXP _dcov_centering_from_data(SEXP xSEXP, SEXP DSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(centering_from_data(x, D, type));
    return rcpp_result_gen;
END_RCPP
}
// dcov
double dcov(const arma::mat& x, const arma::mat& y, std::string type);
RcppExport SEXP _dcov_dcov(SEXP xSEXP, SEXP ySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(dcov(x, y, type));
    return rcpp_result_gen;
END_RCPP
}
// dcor
double dcor(const arma::mat& x, const arma::mat& y, std::string type);
RcppExport SEXP _dcov_dcor(SEXP xSEXP, SEXP ySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(dcor(x, y, type));
    return rcpp_result_gen;
END_RCPP
}
// dcov1v1
double dcov1v1(arma::vec x, arma::vec y, std::string type);
RcppExport SEXP _dcov_dcov1v1(SEXP xSEXP, SEXP ySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(dcov1v1(x, y, type));
    return rcpp_result_gen;
END_RCPP
}
// dcor1v1
double dcor1v1(arma::vec x, arma::vec y, std::string type);
RcppExport SEXP _dcov_dcor1v1(SEXP xSEXP, SEXP ySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(dcor1v1(x, y, type));
    return rcpp_result_gen;
END_RCPP
}
// mdcov
arma::rowvec mdcov(const arma::mat y, const arma::mat x, std::string type);
RcppExport SEXP _dcov_mdcov(SEXP ySEXP, SEXP xSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mdcov(y, x, type));
    return rcpp_result_gen;
END_RCPP
}
// mdcor
arma::rowvec mdcor(const arma::mat y, const arma::mat x, std::string type);
RcppExport SEXP _dcov_mdcor(SEXP ySEXP, SEXP xSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mdcor(y, x, type));
    return rcpp_result_gen;
END_RCPP
}
// pcovCpp
double pcovCpp(const arma::mat x, const arma::mat y);
RcppExport SEXP _dcov_pcovCpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pcovCpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// pdcov
double pdcov(const arma::mat& x, const arma::mat& y, const arma::mat& z, std::string type);
RcppExport SEXP _dcov_pdcov(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(pdcov(x, y, z, type));
    return rcpp_result_gen;
END_RCPP
}
// pdcor
double pdcor(const arma::mat& x, const arma::mat& y, const arma::mat& z, std::string type);
RcppExport SEXP _dcov_pdcor(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(pdcor(x, y, z, type));
    return rcpp_result_gen;
END_RCPP
}
// pdcov1v1v1
double pdcov1v1v1(arma::vec x, arma::vec y, arma::vec z, std::string type);
RcppExport SEXP _dcov_pdcov1v1v1(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(pdcov1v1v1(x, y, z, type));
    return rcpp_result_gen;
END_RCPP
}
// pdcor1v1v1
double pdcor1v1v1(arma::vec x, arma::vec y, arma::vec z, std::string type);
RcppExport SEXP _dcov_pdcor1v1v1(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(pdcor1v1v1(x, y, z, type));
    return rcpp_result_gen;
END_RCPP
}
// dcor_test
Rcpp::List dcor_test(const arma::mat& x, const arma::mat& y, int R, std::string type);
RcppExport SEXP _dcov_dcor_test(SEXP xSEXP, SEXP ySEXP, SEXP RSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(dcor_test(x, y, R, type));
    return rcpp_result_gen;
END_RCPP
}
// pdcor_test
Rcpp::List pdcor_test(const arma::mat& x, const arma::mat& y, const arma::mat& z, int R, std::string type);
RcppExport SEXP _dcov_pdcor_test(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP RSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(pdcor_test(x, y, z, R, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dcov_pdist", (DL_FUNC) &_dcov_pdist, 2},
    {"_dcov_Ucenter", (DL_FUNC) &_dcov_Ucenter, 1},
    {"_dcov_Vcenter", (DL_FUNC) &_dcov_Vcenter, 1},
    {"_dcov_centering", (DL_FUNC) &_dcov_centering, 2},
    {"_dcov_centering_from_data", (DL_FUNC) &_dcov_centering_from_data, 3},
    {"_dcov_dcov", (DL_FUNC) &_dcov_dcov, 3},
    {"_dcov_dcor", (DL_FUNC) &_dcov_dcor, 3},
    {"_dcov_dcov1v1", (DL_FUNC) &_dcov_dcov1v1, 3},
    {"_dcov_dcor1v1", (DL_FUNC) &_dcov_dcor1v1, 3},
    {"_dcov_mdcov", (DL_FUNC) &_dcov_mdcov, 3},
    {"_dcov_mdcor", (DL_FUNC) &_dcov_mdcor, 3},
    {"_dcov_pcovCpp", (DL_FUNC) &_dcov_pcovCpp, 2},
    {"_dcov_pdcov", (DL_FUNC) &_dcov_pdcov, 4},
    {"_dcov_pdcor", (DL_FUNC) &_dcov_pdcor, 4},
    {"_dcov_pdcov1v1v1", (DL_FUNC) &_dcov_pdcov1v1v1, 4},
    {"_dcov_pdcor1v1v1", (DL_FUNC) &_dcov_pdcor1v1v1, 4},
    {"_dcov_dcor_test", (DL_FUNC) &_dcov_dcor_test, 4},
    {"_dcov_pdcor_test", (DL_FUNC) &_dcov_pdcor_test, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_dcov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
