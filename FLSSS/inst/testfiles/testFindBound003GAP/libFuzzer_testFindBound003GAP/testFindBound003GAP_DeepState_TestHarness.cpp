// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// testFindBound003GAP_DeepState_TestHarness_generation.cpp and testFindBound003GAP_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List testFindBound003GAP(NumericMatrix dividedV, NumericVector target, NumericVector profit, NumericVector ME);

TEST(FLSSS_deepstate_test,testFindBound003GAP_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix dividedV  = RcppDeepState_NumericMatrix();
  std::string dividedV_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FLSSS/inst/testfiles/testFindBound003GAP/libFuzzer_testFindBound003GAP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dividedV.qs";
  qs::c_qsave(dividedV,dividedV_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dividedV values: "<< dividedV << std::endl;
  NumericVector target  = RcppDeepState_NumericVector();
  std::string target_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FLSSS/inst/testfiles/testFindBound003GAP/libFuzzer_testFindBound003GAP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_target.qs";
  qs::c_qsave(target,target_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "target values: "<< target << std::endl;
  NumericVector profit  = RcppDeepState_NumericVector();
  std::string profit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FLSSS/inst/testfiles/testFindBound003GAP/libFuzzer_testFindBound003GAP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_profit.qs";
  qs::c_qsave(profit,profit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "profit values: "<< profit << std::endl;
  NumericVector ME  = RcppDeepState_NumericVector();
  std::string ME_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FLSSS/inst/testfiles/testFindBound003GAP/libFuzzer_testFindBound003GAP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ME.qs";
  qs::c_qsave(ME,ME_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ME values: "<< ME << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    testFindBound003GAP(dividedV,target,profit,ME);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
