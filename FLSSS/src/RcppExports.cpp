// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// auxKnapsack01bb
List auxKnapsack01bb(NumericVector weight, NumericVector value, NumericVector caps, IntegerVector itemNcaps, int maxCore, double tlimit, String ub, bool simplify);
RcppExport SEXP _FLSSS_auxKnapsack01bb(SEXP weightSEXP, SEXP valueSEXP, SEXP capsSEXP, SEXP itemNcapsSEXP, SEXP maxCoreSEXP, SEXP tlimitSEXP, SEXP ubSEXP, SEXP simplifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type caps(capsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type itemNcaps(itemNcapsSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< double >::type tlimit(tlimitSEXP);
    Rcpp::traits::input_parameter< String >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< bool >::type simplify(simplifySEXP);
    rcpp_result_gen = Rcpp::wrap(auxKnapsack01bb(weight, value, caps, itemNcaps, maxCore, tlimit, ub, simplify));
    return rcpp_result_gen;
END_RCPP
}
// auxGAPbbMulthreadKPs
List auxGAPbbMulthreadKPs(NumericMatrix cost, NumericMatrix profitOrLoss, NumericVector budget, int maxCore, double tlimit, String ub, bool greedyBranching, String optim);
RcppExport SEXP _FLSSS_auxGAPbbMulthreadKPs(SEXP costSEXP, SEXP profitOrLossSEXP, SEXP budgetSEXP, SEXP maxCoreSEXP, SEXP tlimitSEXP, SEXP ubSEXP, SEXP greedyBranchingSEXP, SEXP optimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type cost(costSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type profitOrLoss(profitOrLossSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< double >::type tlimit(tlimitSEXP);
    Rcpp::traits::input_parameter< String >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< bool >::type greedyBranching(greedyBranchingSEXP);
    Rcpp::traits::input_parameter< String >::type optim(optimSEXP);
    rcpp_result_gen = Rcpp::wrap(auxGAPbbMulthreadKPs(cost, profitOrLoss, budget, maxCore, tlimit, ub, greedyBranching, optim));
    return rcpp_result_gen;
END_RCPP
}
// auxGAPbbMulthreadNodes
List auxGAPbbMulthreadNodes(NumericMatrix cost, NumericMatrix profitOrLoss, NumericVector budget, int maxCore, int threadLoad, double tlimit, String ub, bool greedyBranching, String optim);
RcppExport SEXP _FLSSS_auxGAPbbMulthreadNodes(SEXP costSEXP, SEXP profitOrLossSEXP, SEXP budgetSEXP, SEXP maxCoreSEXP, SEXP threadLoadSEXP, SEXP tlimitSEXP, SEXP ubSEXP, SEXP greedyBranchingSEXP, SEXP optimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type cost(costSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type profitOrLoss(profitOrLossSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type threadLoad(threadLoadSEXP);
    Rcpp::traits::input_parameter< double >::type tlimit(tlimitSEXP);
    Rcpp::traits::input_parameter< String >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< bool >::type greedyBranching(greedyBranchingSEXP);
    Rcpp::traits::input_parameter< String >::type optim(optimSEXP);
    rcpp_result_gen = Rcpp::wrap(auxGAPbbMulthreadNodes(cost, profitOrLoss, budget, maxCore, threadLoad, tlimit, ub, greedyBranching, optim));
    return rcpp_result_gen;
END_RCPP
}
// auxKnapsack01dp
List auxKnapsack01dp(IntegerVector weight, NumericVector value, IntegerVector caps, int maxCore, double tlimit, bool simplify);
RcppExport SEXP _FLSSS_auxKnapsack01dp(SEXP weightSEXP, SEXP valueSEXP, SEXP capsSEXP, SEXP maxCoreSEXP, SEXP tlimitSEXP, SEXP simplifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type caps(capsSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< double >::type tlimit(tlimitSEXP);
    Rcpp::traits::input_parameter< bool >::type simplify(simplifySEXP);
    rcpp_result_gen = Rcpp::wrap(auxKnapsack01dp(weight, value, caps, maxCore, tlimit, simplify));
    return rcpp_result_gen;
END_RCPP
}
// auxGAPbbDpMulthreadKPs
List auxGAPbbDpMulthreadKPs(IntegerMatrix cost, NumericMatrix profitOrLoss, IntegerVector budget, int maxCore, double tlimit, bool greedyBranching, String optim);
RcppExport SEXP _FLSSS_auxGAPbbDpMulthreadKPs(SEXP costSEXP, SEXP profitOrLossSEXP, SEXP budgetSEXP, SEXP maxCoreSEXP, SEXP tlimitSEXP, SEXP greedyBranchingSEXP, SEXP optimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type cost(costSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type profitOrLoss(profitOrLossSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< double >::type tlimit(tlimitSEXP);
    Rcpp::traits::input_parameter< bool >::type greedyBranching(greedyBranchingSEXP);
    Rcpp::traits::input_parameter< String >::type optim(optimSEXP);
    rcpp_result_gen = Rcpp::wrap(auxGAPbbDpMulthreadKPs(cost, profitOrLoss, budget, maxCore, tlimit, greedyBranching, optim));
    return rcpp_result_gen;
END_RCPP
}
// auxGAPbbDpMulthreadNodes
List auxGAPbbDpMulthreadNodes(IntegerMatrix cost, NumericMatrix profitOrLoss, IntegerVector budget, int maxCore, int threadLoad, double tlimit, bool greedyBranching, String optim);
RcppExport SEXP _FLSSS_auxGAPbbDpMulthreadNodes(SEXP costSEXP, SEXP profitOrLossSEXP, SEXP budgetSEXP, SEXP maxCoreSEXP, SEXP threadLoadSEXP, SEXP tlimitSEXP, SEXP greedyBranchingSEXP, SEXP optimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type cost(costSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type profitOrLoss(profitOrLossSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type threadLoad(threadLoadSEXP);
    Rcpp::traits::input_parameter< double >::type tlimit(tlimitSEXP);
    Rcpp::traits::input_parameter< bool >::type greedyBranching(greedyBranchingSEXP);
    Rcpp::traits::input_parameter< String >::type optim(optimSEXP);
    rcpp_result_gen = Rcpp::wrap(auxGAPbbDpMulthreadNodes(cost, profitOrLoss, budget, maxCore, threadLoad, tlimit, greedyBranching, optim));
    return rcpp_result_gen;
END_RCPP
}
// testFindBound003GAP
List testFindBound003GAP(NumericMatrix dividedV, NumericVector target, NumericVector profit, NumericVector ME);
RcppExport SEXP _FLSSS_testFindBound003GAP(SEXP dividedVSEXP, SEXP targetSEXP, SEXP profitSEXP, SEXP MESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dividedV(dividedVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type profit(profitSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ME(MESEXP);
    rcpp_result_gen = Rcpp::wrap(testFindBound003GAP(dividedV, target, profit, ME));
    return rcpp_result_gen;
END_RCPP
}
// testFindBound003GAP2
List testFindBound003GAP2(NumericMatrix dividedV, NumericVector targetMAX);
RcppExport SEXP _FLSSS_testFindBound003GAP2(SEXP dividedVSEXP, SEXP targetMAXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dividedV(dividedVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targetMAX(targetMAXSEXP);
    rcpp_result_gen = Rcpp::wrap(testFindBound003GAP2(dividedV, targetMAX));
    return rcpp_result_gen;
END_RCPP
}
// z_GAP
IntegerVector z_GAP(int maxCore, NumericMatrix dividedV, NumericVector profitV, NumericMatrix MAXmat, IntegerVector zeroBasedLB, IntegerVector zeroBasedUB, double duration, int threadLoad, bool verbose, bool heuristic);
RcppExport SEXP _FLSSS_z_GAP(SEXP maxCoreSEXP, SEXP dividedVSEXP, SEXP profitVSEXP, SEXP MAXmatSEXP, SEXP zeroBasedLBSEXP, SEXP zeroBasedUBSEXP, SEXP durationSEXP, SEXP threadLoadSEXP, SEXP verboseSEXP, SEXP heuristicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dividedV(dividedVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type profitV(profitVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type MAXmat(MAXmatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type zeroBasedLB(zeroBasedLBSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type zeroBasedUB(zeroBasedUBSEXP);
    Rcpp::traits::input_parameter< double >::type duration(durationSEXP);
    Rcpp::traits::input_parameter< int >::type threadLoad(threadLoadSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type heuristic(heuristicSEXP);
    rcpp_result_gen = Rcpp::wrap(z_GAP(maxCore, dividedV, profitV, MAXmat, zeroBasedLB, zeroBasedUB, duration, threadLoad, verbose, heuristic));
    return rcpp_result_gen;
END_RCPP
}
// auxGAPgaGivenRandomSeeds
List auxGAPgaGivenRandomSeeds(NumericMatrix cost, NumericMatrix profitOrLoss, NumericVector budget, IntegerVector randomSeeds, int populationSize, int generations, String optim, int maxCore);
RcppExport SEXP _FLSSS_auxGAPgaGivenRandomSeeds(SEXP costSEXP, SEXP profitOrLossSEXP, SEXP budgetSEXP, SEXP randomSeedsSEXP, SEXP populationSizeSEXP, SEXP generationsSEXP, SEXP optimSEXP, SEXP maxCoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type cost(costSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type profitOrLoss(profitOrLossSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type randomSeeds(randomSeedsSEXP);
    Rcpp::traits::input_parameter< int >::type populationSize(populationSizeSEXP);
    Rcpp::traits::input_parameter< int >::type generations(generationsSEXP);
    Rcpp::traits::input_parameter< String >::type optim(optimSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    rcpp_result_gen = Rcpp::wrap(auxGAPgaGivenRandomSeeds(cost, profitOrLoss, budget, randomSeeds, populationSize, generations, optim, maxCore));
    return rcpp_result_gen;
END_RCPP
}
// z_Gknapsack
IntegerVector z_Gknapsack(int len, NumericMatrix vr, NumericVector maskV, NumericVector profitVec, NumericMatrix targetMat, NumericVector MEr, IntegerVector LBr, IntegerVector UBr, double duration, bool useBiSearch, int maxCore, int avgThreadLoad, bool verbose, bool approx);
RcppExport SEXP _FLSSS_z_Gknapsack(SEXP lenSEXP, SEXP vrSEXP, SEXP maskVSEXP, SEXP profitVecSEXP, SEXP targetMatSEXP, SEXP MErSEXP, SEXP LBrSEXP, SEXP UBrSEXP, SEXP durationSEXP, SEXP useBiSearchSEXP, SEXP maxCoreSEXP, SEXP avgThreadLoadSEXP, SEXP verboseSEXP, SEXP approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vr(vrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maskV(maskVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type profitVec(profitVecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type targetMat(targetMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MEr(MErSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type LBr(LBrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type UBr(UBrSEXP);
    Rcpp::traits::input_parameter< double >::type duration(durationSEXP);
    Rcpp::traits::input_parameter< bool >::type useBiSearch(useBiSearchSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type avgThreadLoad(avgThreadLoadSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type approx(approxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_Gknapsack(len, vr, maskV, profitVec, targetMat, MEr, LBr, UBr, duration, useBiSearch, maxCore, avgThreadLoad, verbose, approx));
    return rcpp_result_gen;
END_RCPP
}
// z_findBound
List z_findBound(int len, NumericMatrix V, NumericVector target, NumericVector me, IntegerVector initialLB, IntegerVector initialUB, int findBoundTimes, bool useBinarySearch, bool UBfirst);
RcppExport SEXP _FLSSS_z_findBound(SEXP lenSEXP, SEXP VSEXP, SEXP targetSEXP, SEXP meSEXP, SEXP initialLBSEXP, SEXP initialUBSEXP, SEXP findBoundTimesSEXP, SEXP useBinarySearchSEXP, SEXP UBfirstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type me(meSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initialLB(initialLBSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initialUB(initialUBSEXP);
    Rcpp::traits::input_parameter< int >::type findBoundTimes(findBoundTimesSEXP);
    Rcpp::traits::input_parameter< bool >::type useBinarySearch(useBinarySearchSEXP);
    Rcpp::traits::input_parameter< bool >::type UBfirst(UBfirstSEXP);
    rcpp_result_gen = Rcpp::wrap(z_findBound(len, V, target, me, initialLB, initialUB, findBoundTimes, useBinarySearch, UBfirst));
    return rcpp_result_gen;
END_RCPP
}
// z_findBoundIntegerized
List z_findBoundIntegerized(int len, NumericMatrix V, NumericVector mask, NumericVector target, NumericVector me, IntegerVector initialLB, IntegerVector initialUB, int findBoundTimes, bool useBinarySearch, bool UBfirst);
RcppExport SEXP _FLSSS_z_findBoundIntegerized(SEXP lenSEXP, SEXP VSEXP, SEXP maskSEXP, SEXP targetSEXP, SEXP meSEXP, SEXP initialLBSEXP, SEXP initialUBSEXP, SEXP findBoundTimesSEXP, SEXP useBinarySearchSEXP, SEXP UBfirstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type me(meSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initialLB(initialLBSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initialUB(initialUBSEXP);
    Rcpp::traits::input_parameter< int >::type findBoundTimes(findBoundTimesSEXP);
    Rcpp::traits::input_parameter< bool >::type useBinarySearch(useBinarySearchSEXP);
    Rcpp::traits::input_parameter< bool >::type UBfirst(UBfirstSEXP);
    rcpp_result_gen = Rcpp::wrap(z_findBoundIntegerized(len, V, mask, target, me, initialLB, initialUB, findBoundTimes, useBinarySearch, UBfirst));
    return rcpp_result_gen;
END_RCPP
}
// z_FLSSS
List z_FLSSS(int len, NumericVector v, double target, double ME, IntegerVector LB, IntegerVector UB, int solutionNeed, double tlimit, bool useBiSrchInFB, bool useFloat);
RcppExport SEXP _FLSSS_z_FLSSS(SEXP lenSEXP, SEXP vSEXP, SEXP targetSEXP, SEXP MESEXP, SEXP LBSEXP, SEXP UBSEXP, SEXP solutionNeedSEXP, SEXP tlimitSEXP, SEXP useBiSrchInFBSEXP, SEXP useFloatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type ME(MESEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type UB(UBSEXP);
    Rcpp::traits::input_parameter< int >::type solutionNeed(solutionNeedSEXP);
    Rcpp::traits::input_parameter< double >::type tlimit(tlimitSEXP);
    Rcpp::traits::input_parameter< bool >::type useBiSrchInFB(useBiSrchInFBSEXP);
    Rcpp::traits::input_parameter< bool >::type useFloat(useFloatSEXP);
    rcpp_result_gen = Rcpp::wrap(z_FLSSS(len, v, target, ME, LB, UB, solutionNeed, tlimit, useBiSrchInFB, useFloat));
    return rcpp_result_gen;
END_RCPP
}
// z_FLSSSvariableTree
List z_FLSSSvariableTree(int len, NumericVector v, double target, double ME, IntegerVector LB, IntegerVector UB, int solutionNeed, double tlimit, bool useBiSrchInFB, bool useFloat);
RcppExport SEXP _FLSSS_z_FLSSSvariableTree(SEXP lenSEXP, SEXP vSEXP, SEXP targetSEXP, SEXP MESEXP, SEXP LBSEXP, SEXP UBSEXP, SEXP solutionNeedSEXP, SEXP tlimitSEXP, SEXP useBiSrchInFBSEXP, SEXP useFloatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type ME(MESEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type UB(UBSEXP);
    Rcpp::traits::input_parameter< int >::type solutionNeed(solutionNeedSEXP);
    Rcpp::traits::input_parameter< double >::type tlimit(tlimitSEXP);
    Rcpp::traits::input_parameter< bool >::type useBiSrchInFB(useBiSrchInFBSEXP);
    Rcpp::traits::input_parameter< bool >::type useFloat(useFloatSEXP);
    rcpp_result_gen = Rcpp::wrap(z_FLSSSvariableTree(len, v, target, ME, LB, UB, solutionNeed, tlimit, useBiSrchInFB, useFloat));
    return rcpp_result_gen;
END_RCPP
}
// z_mFLSSS
List z_mFLSSS(int maxCore, int len, NumericMatrix vr, NumericVector maskV, int d, int dlst, int dl, int dust, int du, NumericMatrix targetMat, NumericVector MEr, IntegerVector LBr, IntegerVector UBr, int sizeNeed, double duration, bool useBiSearch);
RcppExport SEXP _FLSSS_z_mFLSSS(SEXP maxCoreSEXP, SEXP lenSEXP, SEXP vrSEXP, SEXP maskVSEXP, SEXP dSEXP, SEXP dlstSEXP, SEXP dlSEXP, SEXP dustSEXP, SEXP duSEXP, SEXP targetMatSEXP, SEXP MErSEXP, SEXP LBrSEXP, SEXP UBrSEXP, SEXP sizeNeedSEXP, SEXP durationSEXP, SEXP useBiSearchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vr(vrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maskV(maskVSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type dlst(dlstSEXP);
    Rcpp::traits::input_parameter< int >::type dl(dlSEXP);
    Rcpp::traits::input_parameter< int >::type dust(dustSEXP);
    Rcpp::traits::input_parameter< int >::type du(duSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type targetMat(targetMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MEr(MErSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type LBr(LBrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type UBr(UBrSEXP);
    Rcpp::traits::input_parameter< int >::type sizeNeed(sizeNeedSEXP);
    Rcpp::traits::input_parameter< double >::type duration(durationSEXP);
    Rcpp::traits::input_parameter< bool >::type useBiSearch(useBiSearchSEXP);
    rcpp_result_gen = Rcpp::wrap(z_mFLSSS(maxCore, len, vr, maskV, d, dlst, dl, dust, du, targetMat, MEr, LBr, UBr, sizeNeed, duration, useBiSearch));
    return rcpp_result_gen;
END_RCPP
}
// z_mFLSSScomoPar
List z_mFLSSScomoPar(int maxCore, int len, NumericMatrix vr, NumericVector maskV, int d, int dlst, int dl, int dust, int du, NumericVector targetr, NumericVector MEr, IntegerVector LBr, IntegerVector UBr, int sizeNeededForAll, double duration, bool useBiSearch, int avgThreadLoad);
RcppExport SEXP _FLSSS_z_mFLSSScomoPar(SEXP maxCoreSEXP, SEXP lenSEXP, SEXP vrSEXP, SEXP maskVSEXP, SEXP dSEXP, SEXP dlstSEXP, SEXP dlSEXP, SEXP dustSEXP, SEXP duSEXP, SEXP targetrSEXP, SEXP MErSEXP, SEXP LBrSEXP, SEXP UBrSEXP, SEXP sizeNeededForAllSEXP, SEXP durationSEXP, SEXP useBiSearchSEXP, SEXP avgThreadLoadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vr(vrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maskV(maskVSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type dlst(dlstSEXP);
    Rcpp::traits::input_parameter< int >::type dl(dlSEXP);
    Rcpp::traits::input_parameter< int >::type dust(dustSEXP);
    Rcpp::traits::input_parameter< int >::type du(duSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targetr(targetrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MEr(MErSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type LBr(LBrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type UBr(UBrSEXP);
    Rcpp::traits::input_parameter< int >::type sizeNeededForAll(sizeNeededForAllSEXP);
    Rcpp::traits::input_parameter< double >::type duration(durationSEXP);
    Rcpp::traits::input_parameter< bool >::type useBiSearch(useBiSearchSEXP);
    Rcpp::traits::input_parameter< int >::type avgThreadLoad(avgThreadLoadSEXP);
    rcpp_result_gen = Rcpp::wrap(z_mFLSSScomoPar(maxCore, len, vr, maskV, d, dlst, dl, dust, du, targetr, MEr, LBr, UBr, sizeNeededForAll, duration, useBiSearch, avgThreadLoad));
    return rcpp_result_gen;
END_RCPP
}
// z_mFLSSSimage
List z_mFLSSSimage(int len, NumericMatrix vr, NumericVector maskV, int d, int dlst, int dl, int dust, int du, NumericMatrix targetMat, NumericVector MEr, IntegerVector LBr, IntegerVector UBr, int sizeNeed, bool useBiSearch, int Ninstance);
RcppExport SEXP _FLSSS_z_mFLSSSimage(SEXP lenSEXP, SEXP vrSEXP, SEXP maskVSEXP, SEXP dSEXP, SEXP dlstSEXP, SEXP dlSEXP, SEXP dustSEXP, SEXP duSEXP, SEXP targetMatSEXP, SEXP MErSEXP, SEXP LBrSEXP, SEXP UBrSEXP, SEXP sizeNeedSEXP, SEXP useBiSearchSEXP, SEXP NinstanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vr(vrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maskV(maskVSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type dlst(dlstSEXP);
    Rcpp::traits::input_parameter< int >::type dl(dlSEXP);
    Rcpp::traits::input_parameter< int >::type dust(dustSEXP);
    Rcpp::traits::input_parameter< int >::type du(duSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type targetMat(targetMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MEr(MErSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type LBr(LBrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type UBr(UBrSEXP);
    Rcpp::traits::input_parameter< int >::type sizeNeed(sizeNeedSEXP);
    Rcpp::traits::input_parameter< bool >::type useBiSearch(useBiSearchSEXP);
    Rcpp::traits::input_parameter< int >::type Ninstance(NinstanceSEXP);
    rcpp_result_gen = Rcpp::wrap(z_mFLSSSimage(len, vr, maskV, d, dlst, dl, dust, du, targetMat, MEr, LBr, UBr, sizeNeed, useBiSearch, Ninstance));
    return rcpp_result_gen;
END_RCPP
}
// z_mFLSSSimport
List z_mFLSSSimport(List mflsssObj, int sizeNeed, double tlimit);
RcppExport SEXP _FLSSS_z_mFLSSSimport(SEXP mflsssObjSEXP, SEXP sizeNeedSEXP, SEXP tlimitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mflsssObj(mflsssObjSEXP);
    Rcpp::traits::input_parameter< int >::type sizeNeed(sizeNeedSEXP);
    Rcpp::traits::input_parameter< double >::type tlimit(tlimitSEXP);
    rcpp_result_gen = Rcpp::wrap(z_mFLSSSimport(mflsssObj, sizeNeed, tlimit));
    return rcpp_result_gen;
END_RCPP
}
// z_mFLSSSvariableTree
List z_mFLSSSvariableTree(int maxCore, int len, List vr, int d, int dlst, int dl, int dust, int du, int keyInd, NumericVector originalTarget, NumericVector keyTarget, NumericVector scaleFactor, NumericVector MEr, IntegerVector LBr, IntegerVector UBr, int sizeNeed, double duration, bool useFloat, bool useBisearchInFindBounds);
RcppExport SEXP _FLSSS_z_mFLSSSvariableTree(SEXP maxCoreSEXP, SEXP lenSEXP, SEXP vrSEXP, SEXP dSEXP, SEXP dlstSEXP, SEXP dlSEXP, SEXP dustSEXP, SEXP duSEXP, SEXP keyIndSEXP, SEXP originalTargetSEXP, SEXP keyTargetSEXP, SEXP scaleFactorSEXP, SEXP MErSEXP, SEXP LBrSEXP, SEXP UBrSEXP, SEXP sizeNeedSEXP, SEXP durationSEXP, SEXP useFloatSEXP, SEXP useBisearchInFindBoundsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< List >::type vr(vrSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type dlst(dlstSEXP);
    Rcpp::traits::input_parameter< int >::type dl(dlSEXP);
    Rcpp::traits::input_parameter< int >::type dust(dustSEXP);
    Rcpp::traits::input_parameter< int >::type du(duSEXP);
    Rcpp::traits::input_parameter< int >::type keyInd(keyIndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type originalTarget(originalTargetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type keyTarget(keyTargetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scaleFactor(scaleFactorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MEr(MErSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type LBr(LBrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type UBr(UBrSEXP);
    Rcpp::traits::input_parameter< int >::type sizeNeed(sizeNeedSEXP);
    Rcpp::traits::input_parameter< double >::type duration(durationSEXP);
    Rcpp::traits::input_parameter< bool >::type useFloat(useFloatSEXP);
    Rcpp::traits::input_parameter< bool >::type useBisearchInFindBounds(useBisearchInFindBoundsSEXP);
    rcpp_result_gen = Rcpp::wrap(z_mFLSSSvariableTree(maxCore, len, vr, d, dlst, dl, dust, du, keyInd, originalTarget, keyTarget, scaleFactor, MEr, LBr, UBr, sizeNeed, duration, useFloat, useBisearchInFindBounds));
    return rcpp_result_gen;
END_RCPP
}
// z_integerize
List z_integerize(int len, NumericMatrix V, NumericVector target, NumericVector ME, IntegerVector precisionLevel);
RcppExport SEXP _FLSSS_z_integerize(SEXP lenSEXP, SEXP VSEXP, SEXP targetSEXP, SEXP MESEXP, SEXP precisionLevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ME(MESEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type precisionLevel(precisionLevelSEXP);
    rcpp_result_gen = Rcpp::wrap(z_integerize(len, V, target, ME, precisionLevel));
    return rcpp_result_gen;
END_RCPP
}
// z_which64intAndSize
List z_which64intAndSize(IntegerVector largestSubsetSum);
RcppExport SEXP _FLSSS_z_which64intAndSize(SEXP largestSubsetSumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type largestSubsetSum(largestSubsetSumSEXP);
    rcpp_result_gen = Rcpp::wrap(z_which64intAndSize(largestSubsetSum));
    return rcpp_result_gen;
END_RCPP
}
// z_collapseTo64int
NumericMatrix z_collapseTo64int(IntegerMatrix x, IntegerVector which64int, IntegerVector bitSize);
RcppExport SEXP _FLSSS_z_collapseTo64int(SEXP xSEXP, SEXP which64intSEXP, SEXP bitSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type which64int(which64intSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bitSize(bitSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(z_collapseTo64int(x, which64int, bitSize));
    return rcpp_result_gen;
END_RCPP
}
// z_mask
NumericVector z_mask(IntegerVector which64int, IntegerVector bitSize);
RcppExport SEXP _FLSSS_z_mask(SEXP which64intSEXP, SEXP bitSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type which64int(which64intSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bitSize(bitSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(z_mask(which64int, bitSize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FLSSS_auxKnapsack01bb", (DL_FUNC) &_FLSSS_auxKnapsack01bb, 8},
    {"_FLSSS_auxGAPbbMulthreadKPs", (DL_FUNC) &_FLSSS_auxGAPbbMulthreadKPs, 8},
    {"_FLSSS_auxGAPbbMulthreadNodes", (DL_FUNC) &_FLSSS_auxGAPbbMulthreadNodes, 9},
    {"_FLSSS_auxKnapsack01dp", (DL_FUNC) &_FLSSS_auxKnapsack01dp, 6},
    {"_FLSSS_auxGAPbbDpMulthreadKPs", (DL_FUNC) &_FLSSS_auxGAPbbDpMulthreadKPs, 7},
    {"_FLSSS_auxGAPbbDpMulthreadNodes", (DL_FUNC) &_FLSSS_auxGAPbbDpMulthreadNodes, 8},
    {"_FLSSS_testFindBound003GAP", (DL_FUNC) &_FLSSS_testFindBound003GAP, 4},
    {"_FLSSS_testFindBound003GAP2", (DL_FUNC) &_FLSSS_testFindBound003GAP2, 2},
    {"_FLSSS_z_GAP", (DL_FUNC) &_FLSSS_z_GAP, 10},
    {"_FLSSS_auxGAPgaGivenRandomSeeds", (DL_FUNC) &_FLSSS_auxGAPgaGivenRandomSeeds, 8},
    {"_FLSSS_z_Gknapsack", (DL_FUNC) &_FLSSS_z_Gknapsack, 14},
    {"_FLSSS_z_findBound", (DL_FUNC) &_FLSSS_z_findBound, 9},
    {"_FLSSS_z_findBoundIntegerized", (DL_FUNC) &_FLSSS_z_findBoundIntegerized, 10},
    {"_FLSSS_z_FLSSS", (DL_FUNC) &_FLSSS_z_FLSSS, 10},
    {"_FLSSS_z_FLSSSvariableTree", (DL_FUNC) &_FLSSS_z_FLSSSvariableTree, 10},
    {"_FLSSS_z_mFLSSS", (DL_FUNC) &_FLSSS_z_mFLSSS, 16},
    {"_FLSSS_z_mFLSSScomoPar", (DL_FUNC) &_FLSSS_z_mFLSSScomoPar, 17},
    {"_FLSSS_z_mFLSSSimage", (DL_FUNC) &_FLSSS_z_mFLSSSimage, 15},
    {"_FLSSS_z_mFLSSSimport", (DL_FUNC) &_FLSSS_z_mFLSSSimport, 3},
    {"_FLSSS_z_mFLSSSvariableTree", (DL_FUNC) &_FLSSS_z_mFLSSSvariableTree, 19},
    {"_FLSSS_z_integerize", (DL_FUNC) &_FLSSS_z_integerize, 5},
    {"_FLSSS_z_which64intAndSize", (DL_FUNC) &_FLSSS_z_which64intAndSize, 1},
    {"_FLSSS_z_collapseTo64int", (DL_FUNC) &_FLSSS_z_collapseTo64int, 3},
    {"_FLSSS_z_mask", (DL_FUNC) &_FLSSS_z_mask, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_FLSSS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
