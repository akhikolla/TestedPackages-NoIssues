// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// zcurve_EM_fit_RCpp_DeepState_TestHarness_generation.cpp and zcurve_EM_fit_RCpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List zcurve_EM_fit_RCpp(NumericVector x, int type, NumericVector mu, NumericVector sigma, NumericVector theta, double a, double b, double sig_level, int max_iter, double criterion);

TEST(zcurve_deepstate_test,zcurve_EM_fit_RCpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  IntegerVector type(1);
  type[0]  = RcppDeepState_int();
  std::string type_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_type.qs";
  qs::c_qsave(type,type_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "type values: "<< type << std::endl;
  NumericVector mu  = RcppDeepState_NumericVector();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector sigma  = RcppDeepState_NumericVector();
  std::string sigma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_sigma.qs";
  qs::c_qsave(sigma,sigma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma values: "<< sigma << std::endl;
  NumericVector theta  = RcppDeepState_NumericVector();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector a(1);
  a[0]  = RcppDeepState_double();
  std::string a_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_a.qs";
  qs::c_qsave(a,a_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a values: "<< a << std::endl;
  NumericVector b(1);
  b[0]  = RcppDeepState_double();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_b.qs";
  qs::c_qsave(b,b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericVector sig_level(1);
  sig_level[0]  = RcppDeepState_double();
  std::string sig_level_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_sig_level.qs";
  qs::c_qsave(sig_level,sig_level_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sig_level values: "<< sig_level << std::endl;
  IntegerVector max_iter(1);
  max_iter[0]  = RcppDeepState_int();
  std::string max_iter_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_max_iter.qs";
  qs::c_qsave(max_iter,max_iter_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_iter values: "<< max_iter << std::endl;
  NumericVector criterion(1);
  criterion[0]  = RcppDeepState_double();
  std::string criterion_t = "/home/akhila/fuzzer_packages/fuzzedpackages/zcurve/inst/testfiles/zcurve_EM_fit_RCpp/AFL_zcurve_EM_fit_RCpp/afl_inputs/" + std::to_string(t) + "_criterion.qs";
  qs::c_qsave(criterion,criterion_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "criterion values: "<< criterion << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    zcurve_EM_fit_RCpp(x,type[0],mu,sigma,theta,a[0],b[0],sig_level[0],max_iter[0],criterion[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
