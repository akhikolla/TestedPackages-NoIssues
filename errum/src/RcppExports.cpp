// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bijectionvector
arma::vec bijectionvector(unsigned int K);
RcppExport SEXP _errum_bijectionvector(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(bijectionvector(K));
    return rcpp_result_gen;
END_RCPP
}
// inv_bijectionvector
arma::vec inv_bijectionvector(unsigned int K, double CL);
RcppExport SEXP _errum_inv_bijectionvector(SEXP KSEXP, SEXP CLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type CL(CLSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_bijectionvector(K, CL));
    return rcpp_result_gen;
END_RCPP
}
// CL_invbijection_table
arma::mat CL_invbijection_table(unsigned int K, unsigned int nClass);
RcppExport SEXP _errum_CL_invbijection_table(SEXP KSEXP, SEXP nClassSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nClass(nClassSEXP);
    rcpp_result_gen = Rcpp::wrap(CL_invbijection_table(K, nClass));
    return rcpp_result_gen;
END_RCPP
}
// rmultinomial
double rmultinomial(const arma::vec& ps);
RcppExport SEXP _errum_rmultinomial(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinomial(ps));
    return rcpp_result_gen;
END_RCPP
}
// rDirichlet
arma::vec rDirichlet(const arma::vec& deltas);
RcppExport SEXP _errum_rDirichlet(SEXP deltasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type deltas(deltasSEXP);
    rcpp_result_gen = Rcpp::wrap(rDirichlet(deltas));
    return rcpp_result_gen;
END_RCPP
}
// random_Q
arma::mat random_Q(unsigned int J, unsigned int K);
RcppExport SEXP _errum_random_Q(SEXP JSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(random_Q(J, K));
    return rcpp_result_gen;
END_RCPP
}
// simrRUM
arma::mat simrRUM(unsigned int N, unsigned int J, unsigned int K, const arma::mat& Q, const arma::mat& rstar, const arma::vec& pistar, const arma::vec& CLASS);
RcppExport SEXP _errum_simrRUM(SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP QSEXP, SEXP rstarSEXP, SEXP pistarSEXP, SEXP CLASSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rstar(rstarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pistar(pistarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CLASS(CLASSSEXP);
    rcpp_result_gen = Rcpp::wrap(simrRUM(N, J, K, Q, rstar, pistar, CLASS));
    return rcpp_result_gen;
END_RCPP
}
// DEVIANCErRUM
double DEVIANCErRUM(unsigned int N, unsigned int J, unsigned int K, unsigned int nClass, const arma::mat& Y, const arma::mat& rstar, const arma::vec& pistar, const arma::vec& pis);
RcppExport SEXP _errum_DEVIANCErRUM(SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP nClassSEXP, SEXP YSEXP, SEXP rstarSEXP, SEXP pistarSEXP, SEXP pisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nClass(nClassSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rstar(rstarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pistar(pistarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pis(pisSEXP);
    rcpp_result_gen = Rcpp::wrap(DEVIANCErRUM(N, J, K, nClass, Y, rstar, pistar, pis));
    return rcpp_result_gen;
END_RCPP
}
// simgnida
arma::mat simgnida(unsigned int N, unsigned int J, unsigned int K, const arma::mat& Q, const arma::mat& B0, const arma::mat& B1, const arma::vec& CLASS);
RcppExport SEXP _errum_simgnida(SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP QSEXP, SEXP B0SEXP, SEXP B1SEXP, SEXP CLASSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CLASS(CLASSSEXP);
    rcpp_result_gen = Rcpp::wrap(simgnida(N, J, K, Q, B0, B1, CLASS));
    return rcpp_result_gen;
END_RCPP
}
// rTruncNorm
double rTruncNorm(double mean, double sd, double w);
RcppExport SEXP _errum_rTruncNorm(SEXP meanSEXP, SEXP sdSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(rTruncNorm(mean, sd, w));
    return rcpp_result_gen;
END_RCPP
}
// parm_update_nomiss
void parm_update_nomiss(unsigned int N, unsigned int J, unsigned int K, unsigned int nClass, const arma::mat& Y, arma::mat& X_biject, arma::mat& B0, arma::mat& B1, arma::vec& CLASS, arma::vec& pis, arma::mat& Q, const arma::mat& MU, const arma::vec& vv, const arma::mat& CLtable, double v0, double v1, const arma::vec& d0, arma::vec& pistar, arma::mat& rstar, double a0, double b0, double a1, double b1, arma::mat& Qstar, double cv1, double cv0);
RcppExport SEXP _errum_parm_update_nomiss(SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP nClassSEXP, SEXP YSEXP, SEXP X_bijectSEXP, SEXP B0SEXP, SEXP B1SEXP, SEXP CLASSSEXP, SEXP pisSEXP, SEXP QSEXP, SEXP MUSEXP, SEXP vvSEXP, SEXP CLtableSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP d0SEXP, SEXP pistarSEXP, SEXP rstarSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP QstarSEXP, SEXP cv1SEXP, SEXP cv0SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nClass(nClassSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X_biject(X_bijectSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type CLASS(CLASSSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pis(pisSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vv(vvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type CLtable(CLtableSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pistar(pistarSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rstar(rstarSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Qstar(QstarSEXP);
    Rcpp::traits::input_parameter< double >::type cv1(cv1SEXP);
    Rcpp::traits::input_parameter< double >::type cv0(cv0SEXP);
    parm_update_nomiss(N, J, K, nClass, Y, X_biject, B0, B1, CLASS, pis, Q, MU, vv, CLtable, v0, v1, d0, pistar, rstar, a0, b0, a1, b1, Qstar, cv1, cv0);
    return R_NilValue;
END_RCPP
}
// update_Gamma_Delta_MVN
Rcpp::List update_Gamma_Delta_MVN(unsigned int N, unsigned int V, unsigned int K, unsigned int J, const arma::mat& Y, arma::mat& Gamma, arma::mat& deltas, const arma::mat& X, const arma::vec& diagXpX, double w2, double nu, double bnu);
RcppExport SEXP _errum_update_Gamma_Delta_MVN(SEXP NSEXP, SEXP VSEXP, SEXP KSEXP, SEXP JSEXP, SEXP YSEXP, SEXP GammaSEXP, SEXP deltasSEXP, SEXP XSEXP, SEXP diagXpXSEXP, SEXP w2SEXP, SEXP nuSEXP, SEXP bnuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type V(VSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type deltas(deltasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type diagXpX(diagXpXSEXP);
    Rcpp::traits::input_parameter< double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type bnu(bnuSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Gamma_Delta_MVN(N, V, K, J, Y, Gamma, deltas, X, diagXpX, w2, nu, bnu));
    return rcpp_result_gen;
END_RCPP
}
// OddsRatio
arma::mat OddsRatio(unsigned int N, unsigned int J, const arma::mat& Yt);
RcppExport SEXP _errum_OddsRatio(SEXP NSEXP, SEXP JSEXP, SEXP YtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Yt(YtSEXP);
    rcpp_result_gen = Rcpp::wrap(OddsRatio(N, J, Yt));
    return rcpp_result_gen;
END_RCPP
}
// uppertri_matrix_logical_gt
arma::mat uppertri_matrix_logical_gt(unsigned int J, const arma::mat& A, const arma::mat& B);
RcppExport SEXP _errum_uppertri_matrix_logical_gt(SEXP JSEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(uppertri_matrix_logical_gt(J, A, B));
    return rcpp_result_gen;
END_RCPP
}
// rRUM_mvnQ_Gibbs
Rcpp::List rRUM_mvnQ_Gibbs(const arma::mat& Y, unsigned int K, const arma::mat& X, double v0, double v1, double cv0, double cv1, double bnu, unsigned int burnin, unsigned int chain_length, bool verbose);
RcppExport SEXP _errum_rRUM_mvnQ_Gibbs(SEXP YSEXP, SEXP KSEXP, SEXP XSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP cv0SEXP, SEXP cv1SEXP, SEXP bnuSEXP, SEXP burninSEXP, SEXP chain_lengthSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< double >::type cv0(cv0SEXP);
    Rcpp::traits::input_parameter< double >::type cv1(cv1SEXP);
    Rcpp::traits::input_parameter< double >::type bnu(bnuSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rRUM_mvnQ_Gibbs(Y, K, X, v0, v1, cv0, cv1, bnu, burnin, chain_length, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_errum_bijectionvector", (DL_FUNC) &_errum_bijectionvector, 1},
    {"_errum_inv_bijectionvector", (DL_FUNC) &_errum_inv_bijectionvector, 2},
    {"_errum_CL_invbijection_table", (DL_FUNC) &_errum_CL_invbijection_table, 2},
    {"_errum_rmultinomial", (DL_FUNC) &_errum_rmultinomial, 1},
    {"_errum_rDirichlet", (DL_FUNC) &_errum_rDirichlet, 1},
    {"_errum_random_Q", (DL_FUNC) &_errum_random_Q, 2},
    {"_errum_simrRUM", (DL_FUNC) &_errum_simrRUM, 7},
    {"_errum_DEVIANCErRUM", (DL_FUNC) &_errum_DEVIANCErRUM, 8},
    {"_errum_simgnida", (DL_FUNC) &_errum_simgnida, 7},
    {"_errum_rTruncNorm", (DL_FUNC) &_errum_rTruncNorm, 3},
    {"_errum_parm_update_nomiss", (DL_FUNC) &_errum_parm_update_nomiss, 26},
    {"_errum_update_Gamma_Delta_MVN", (DL_FUNC) &_errum_update_Gamma_Delta_MVN, 12},
    {"_errum_OddsRatio", (DL_FUNC) &_errum_OddsRatio, 3},
    {"_errum_uppertri_matrix_logical_gt", (DL_FUNC) &_errum_uppertri_matrix_logical_gt, 3},
    {"_errum_rRUM_mvnQ_Gibbs", (DL_FUNC) &_errum_rRUM_mvnQ_Gibbs, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_errum(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
