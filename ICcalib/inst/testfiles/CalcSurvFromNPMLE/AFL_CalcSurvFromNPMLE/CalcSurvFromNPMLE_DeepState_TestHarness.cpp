// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// CalcSurvFromNPMLE_DeepState_TestHarness_generation.cpp and CalcSurvFromNPMLE_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector CalcSurvFromNPMLE(NumericVector probs, NumericVector points, NumericMatrix Tbull);

TEST(ICcalib_deepstate_test,CalcSurvFromNPMLE_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector probs  = RcppDeepState_NumericVector();
  std::string probs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ICcalib/inst/testfiles/CalcSurvFromNPMLE/AFL_CalcSurvFromNPMLE/afl_inputs/" + std::to_string(t) + "_probs.qs";
  qs::c_qsave(probs,probs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "probs values: "<< probs << std::endl;
  NumericVector points  = RcppDeepState_NumericVector();
  std::string points_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ICcalib/inst/testfiles/CalcSurvFromNPMLE/AFL_CalcSurvFromNPMLE/afl_inputs/" + std::to_string(t) + "_points.qs";
  qs::c_qsave(points,points_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "points values: "<< points << std::endl;
  NumericMatrix Tbull  = RcppDeepState_NumericMatrix();
  std::string Tbull_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ICcalib/inst/testfiles/CalcSurvFromNPMLE/AFL_CalcSurvFromNPMLE/afl_inputs/" + std::to_string(t) + "_Tbull.qs";
  qs::c_qsave(Tbull,Tbull_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Tbull values: "<< Tbull << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    CalcSurvFromNPMLE(probs,points,Tbull);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
