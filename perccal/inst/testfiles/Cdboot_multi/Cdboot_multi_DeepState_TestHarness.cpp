// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// Cdboot_multi_DeepState_TestHarness_generation.cpp and Cdboot_multi_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List Cdboot_multi(NumericMatrix xxyy, NumericVector lgridlo, NumericVector lgridhi, int B, int B2, int G);

TEST(perccal_deepstate_test,Cdboot_multi_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix xxyy  = RcppDeepState_NumericMatrix();
  qs::c_qsave(xxyy,"/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/inputs/xxyy.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xxyy values: "<< xxyy << std::endl;
  NumericVector lgridlo  = RcppDeepState_NumericVector();
  qs::c_qsave(lgridlo,"/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/inputs/lgridlo.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lgridlo values: "<< lgridlo << std::endl;
  NumericVector lgridhi  = RcppDeepState_NumericVector();
  qs::c_qsave(lgridhi,"/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/inputs/lgridhi.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lgridhi values: "<< lgridhi << std::endl;
  IntegerVector B(1);
  B[0]  = RcppDeepState_int();
  qs::c_qsave(B,"/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/inputs/B.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "B values: "<< B << std::endl;
  IntegerVector B2(1);
  B2[0]  = RcppDeepState_int();
  qs::c_qsave(B2,"/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/inputs/B2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "B2 values: "<< B2 << std::endl;
  IntegerVector G(1);
  G[0]  = RcppDeepState_int();
  qs::c_qsave(G,"/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/inputs/G.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "G values: "<< G << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    Cdboot_multi(xxyy,lgridlo,lgridhi,B[0],B2[0],G[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
