// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// Cdboot_multi_DeepState_TestHarness_generation.cpp and Cdboot_multi_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List Cdboot_multi(NumericMatrix xxyy, NumericVector lgridlo, NumericVector lgridhi, int B, int B2, int G);

TEST(perccal_deepstate_test,Cdboot_multi_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix xxyy  = RcppDeepState_NumericMatrix();
  std::string xxyy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/libFuzzer_Cdboot_multi/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xxyy.qs";
  qs::c_qsave(xxyy,xxyy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xxyy values: "<< xxyy << std::endl;
  NumericVector lgridlo  = RcppDeepState_NumericVector();
  std::string lgridlo_t = "/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/libFuzzer_Cdboot_multi/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lgridlo.qs";
  qs::c_qsave(lgridlo,lgridlo_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lgridlo values: "<< lgridlo << std::endl;
  NumericVector lgridhi  = RcppDeepState_NumericVector();
  std::string lgridhi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/libFuzzer_Cdboot_multi/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lgridhi.qs";
  qs::c_qsave(lgridhi,lgridhi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lgridhi values: "<< lgridhi << std::endl;
  IntegerVector B(1);
  B[0]  = RcppDeepState_int();
  std::string B_t = "/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/libFuzzer_Cdboot_multi/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_B.qs";
  qs::c_qsave(B,B_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "B values: "<< B << std::endl;
  IntegerVector B2(1);
  B2[0]  = RcppDeepState_int();
  std::string B_t = "/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/libFuzzer_Cdboot_multi/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_B.qs";
  std::string B2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/libFuzzer_Cdboot_multi/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_B2.qs";
  qs::c_qsave(B2,B2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "B2 values: "<< B2 << std::endl;
  IntegerVector G(1);
  G[0]  = RcppDeepState_int();
  std::string G_t = "/home/akhila/fuzzer_packages/fuzzedpackages/perccal/inst/testfiles/Cdboot_multi/libFuzzer_Cdboot_multi/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_G.qs";
  qs::c_qsave(G,G_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "G values: "<< G << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    Cdboot_multi(xxyy,lgridlo,lgridhi,B[0],B2[0],G[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
