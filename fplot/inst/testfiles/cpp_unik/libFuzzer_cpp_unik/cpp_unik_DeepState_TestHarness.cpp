// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cpp_unik_DeepState_TestHarness_generation.cpp and cpp_unik_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerVector cpp_unik(NumericVector x_sorted, int k_max);

TEST(fplot_deepstate_test,cpp_unik_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x_sorted  = RcppDeepState_NumericVector();
  std::string x_sorted_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fplot/inst/testfiles/cpp_unik/libFuzzer_cpp_unik/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x_sorted.qs";
  qs::c_qsave(x_sorted,x_sorted_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x_sorted values: "<< x_sorted << std::endl;
  IntegerVector k_max(1);
  k_max[0]  = RcppDeepState_int();
  std::string k_max_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fplot/inst/testfiles/cpp_unik/libFuzzer_cpp_unik/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k_max.qs";
  qs::c_qsave(k_max,k_max_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k_max values: "<< k_max << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cpp_unik(x_sorted,k_max[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
