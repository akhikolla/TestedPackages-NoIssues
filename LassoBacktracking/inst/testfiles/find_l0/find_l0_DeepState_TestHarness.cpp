// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// find_l0_DeepState_TestHarness_generation.cpp and find_l0_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

int find_l0(NumericMatrix X, int p_eff_old, int p_eff, NumericMatrix resid_cur, int l0, NumericVector lambda);

TEST(LassoBacktracking_deepstate_test,find_l0_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  qs::c_qsave(X,"/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/find_l0/inputs/X.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  IntegerVector p_eff_old(1);
  p_eff_old[0]  = RcppDeepState_int();
  qs::c_qsave(p_eff_old,"/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/find_l0/inputs/p_eff_old.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p_eff_old values: "<< p_eff_old << std::endl;
  IntegerVector p_eff(1);
  p_eff[0]  = RcppDeepState_int();
  qs::c_qsave(p_eff,"/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/find_l0/inputs/p_eff.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p_eff values: "<< p_eff << std::endl;
  NumericMatrix resid_cur  = RcppDeepState_NumericMatrix();
  qs::c_qsave(resid_cur,"/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/find_l0/inputs/resid_cur.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "resid_cur values: "<< resid_cur << std::endl;
  IntegerVector l0(1);
  l0[0]  = RcppDeepState_int();
  qs::c_qsave(l0,"/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/find_l0/inputs/l0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "l0 values: "<< l0 << std::endl;
  NumericVector lambda  = RcppDeepState_NumericVector();
  qs::c_qsave(lambda,"/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/find_l0/inputs/lambda.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    find_l0(X,p_eff_old[0],p_eff[0],resid_cur,l0[0],lambda);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
