// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// beta_active_DeepState_TestHarness_generation.cpp and beta_active_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

int beta_active(NumericMatrix x, NumericMatrix beta, NumericMatrix resid_cur, IntegerVector active_set, int l, double thresh, int maxit, double lam, double alpha_lam, double alpha, double alpha_lam_div, double null_dev);

TEST(LassoBacktracking_deepstate_test,beta_active_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix x  = RcppDeepState_NumericMatrix();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericMatrix beta  = RcppDeepState_NumericMatrix();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericMatrix resid_cur  = RcppDeepState_NumericMatrix();
  std::string resid_cur_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_resid_cur.qs";
  qs::c_qsave(resid_cur,resid_cur_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "resid_cur values: "<< resid_cur << std::endl;
  IntegerVector active_set  = RcppDeepState_IntegerVector();
  std::string active_set_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_active_set.qs";
  qs::c_qsave(active_set,active_set_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "active_set values: "<< active_set << std::endl;
  IntegerVector l(1);
  l[0]  = RcppDeepState_int();
  std::string l_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_l.qs";
  qs::c_qsave(l,l_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "l values: "<< l << std::endl;
  NumericVector thresh(1);
  thresh[0]  = RcppDeepState_double();
  std::string thresh_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_thresh.qs";
  qs::c_qsave(thresh,thresh_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "thresh values: "<< thresh << std::endl;
  IntegerVector maxit(1);
  maxit[0]  = RcppDeepState_int();
  std::string maxit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_maxit.qs";
  qs::c_qsave(maxit,maxit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxit values: "<< maxit << std::endl;
  NumericVector lam(1);
  lam[0]  = RcppDeepState_double();
  std::string l_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_l.qs";
  std::string lam_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_lam.qs";
  qs::c_qsave(lam,lam_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lam values: "<< lam << std::endl;
  NumericVector alpha_lam(1);
  alpha_lam[0]  = RcppDeepState_double();
  std::string alpha_lam_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_alpha_lam.qs";
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  qs::c_qsave(alpha_lam,alpha_lam_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha_lam values: "<< alpha_lam << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector alpha_lam_div(1);
  alpha_lam_div[0]  = RcppDeepState_double();
  std::string alpha_lam_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_alpha_lam.qs";
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  std::string alpha_lam_div_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_alpha_lam_div.qs";
  qs::c_qsave(alpha_lam_div,alpha_lam_div_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha_lam_div values: "<< alpha_lam_div << std::endl;
  NumericVector null_dev(1);
  null_dev[0]  = RcppDeepState_double();
  std::string null_dev_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LassoBacktracking/inst/testfiles/beta_active/AFL_beta_active/afl_inputs/" + std::to_string(t) + "_null_dev.qs";
  qs::c_qsave(null_dev,null_dev_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "null_dev values: "<< null_dev << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    beta_active(x,beta,resid_cur,active_set,l[0],thresh[0],maxit[0],lam[0],alpha_lam[0],alpha[0],alpha_lam_div[0],null_dev[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
