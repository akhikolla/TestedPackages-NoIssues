// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// vp01_DeepState_TestHarness_generation.cpp and vp01_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector vp01(NumericVector vw, double t, double lambda1, double lambda0);

TEST(smam_deepstate_test,vp01_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector vw  = RcppDeepState_NumericVector();
  std::string vw_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/vp01/libFuzzer_vp01/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_vw.qs";
  qs::c_qsave(vw,vw_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vw values: "<< vw << std::endl;
  NumericVector t(1);
  t[0]  = RcppDeepState_double();
  std::string t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/vp01/libFuzzer_vp01/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_t.qs";
  qs::c_qsave(t,t_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector lambda1(1);
  lambda1[0]  = RcppDeepState_double();
  std::string lambda1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/vp01/libFuzzer_vp01/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda1.qs";
  qs::c_qsave(lambda1,lambda1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda1 values: "<< lambda1 << std::endl;
  NumericVector lambda0(1);
  lambda0[0]  = RcppDeepState_double();
  std::string lambda0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/vp01/libFuzzer_vp01/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda0.qs";
  qs::c_qsave(lambda0,lambda0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda0 values: "<< lambda0 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    vp01(vw,t[0],lambda1[0],lambda0[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
