// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// norm_mrme_DeepState_TestHarness_generation.cpp and norm_mrme_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double norm_mrme(double z, double b, double d, NumericVector integrControl);

TEST(smam_deepstate_test,norm_mrme_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector z(1);
  z[0]  = RcppDeepState_double();
  std::string z_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/norm_mrme/AFL_norm_mrme/afl_inputs/" + std::to_string(t) + "_z.qs";
  qs::c_qsave(z,z_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "z values: "<< z << std::endl;
  NumericVector b(1);
  b[0]  = RcppDeepState_double();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/norm_mrme/AFL_norm_mrme/afl_inputs/" + std::to_string(t) + "_b.qs";
  qs::c_qsave(b,b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericVector d(1);
  d[0]  = RcppDeepState_double();
  std::string d_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/norm_mrme/AFL_norm_mrme/afl_inputs/" + std::to_string(t) + "_d.qs";
  qs::c_qsave(d,d_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d values: "<< d << std::endl;
  NumericVector integrControl  = RcppDeepState_NumericVector();
  std::string integrControl_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/norm_mrme/AFL_norm_mrme/afl_inputs/" + std::to_string(t) + "_integrControl.qs";
  qs::c_qsave(integrControl,integrControl_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "integrControl values: "<< integrControl << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    norm_mrme(z[0],b[0],d[0],integrControl);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
