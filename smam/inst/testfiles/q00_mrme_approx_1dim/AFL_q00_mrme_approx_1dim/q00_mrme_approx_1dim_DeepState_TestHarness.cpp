// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// q00_mrme_approx_1dim_DeepState_TestHarness_generation.cpp and q00_mrme_approx_1dim_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double q00_mrme_approx_1dim(double z, double t, NumericVector theta, NumericVector integrControl, double err_start, double err_end, double err_end_prob);

TEST(smam_deepstate_test,q00_mrme_approx_1dim_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector z(1);
  z[0]  = RcppDeepState_double();
  std::string z_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/q00_mrme_approx_1dim/AFL_q00_mrme_approx_1dim/afl_inputs/" + std::to_string(t) + "_z.qs";
  qs::c_qsave(z,z_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "z values: "<< z << std::endl;
  NumericVector t(1);
  t[0]  = RcppDeepState_double();
  std::string t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/q00_mrme_approx_1dim/AFL_q00_mrme_approx_1dim/afl_inputs/" + std::to_string(t) + "_t.qs";
  qs::c_qsave(t,t_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector theta  = RcppDeepState_NumericVector();
  std::string t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/q00_mrme_approx_1dim/AFL_q00_mrme_approx_1dim/afl_inputs/" + std::to_string(t) + "_t.qs";
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/q00_mrme_approx_1dim/AFL_q00_mrme_approx_1dim/afl_inputs/" + std::to_string(t) + "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector integrControl  = RcppDeepState_NumericVector();
  std::string integrControl_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/q00_mrme_approx_1dim/AFL_q00_mrme_approx_1dim/afl_inputs/" + std::to_string(t) + "_integrControl.qs";
  qs::c_qsave(integrControl,integrControl_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "integrControl values: "<< integrControl << std::endl;
  NumericVector err_start(1);
  err_start[0]  = RcppDeepState_double();
  std::string err_start_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/q00_mrme_approx_1dim/AFL_q00_mrme_approx_1dim/afl_inputs/" + std::to_string(t) + "_err_start.qs";
  qs::c_qsave(err_start,err_start_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "err_start values: "<< err_start << std::endl;
  NumericVector err_end(1);
  err_end[0]  = RcppDeepState_double();
  std::string err_end_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/q00_mrme_approx_1dim/AFL_q00_mrme_approx_1dim/afl_inputs/" + std::to_string(t) + "_err_end.qs";
  qs::c_qsave(err_end,err_end_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "err_end values: "<< err_end << std::endl;
  NumericVector err_end_prob(1);
  err_end_prob[0]  = RcppDeepState_double();
  std::string err_end_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/q00_mrme_approx_1dim/AFL_q00_mrme_approx_1dim/afl_inputs/" + std::to_string(t) + "_err_end.qs";
  std::string err_end_prob_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/q00_mrme_approx_1dim/AFL_q00_mrme_approx_1dim/afl_inputs/" + std::to_string(t) + "_err_end_prob.qs";
  qs::c_qsave(err_end_prob,err_end_prob_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "err_end_prob values: "<< err_end_prob << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    q00_mrme_approx_1dim(z[0],t[0],theta,integrControl,err_start[0],err_end[0],err_end_prob[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
