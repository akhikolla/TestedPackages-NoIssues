// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// ths_vp10_DeepState_TestHarness_generation.cpp and ths_vp10_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector ths_vp10(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);

TEST(smam_deepstate_test,ths_vp10_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector vs  = RcppDeepState_NumericVector();
  qs::c_qsave(vs,"/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/ths_vp10/inputs/vs.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vs values: "<< vs << std::endl;
  NumericVector t(1);
  t[0]  = RcppDeepState_double();
  qs::c_qsave(t,"/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/ths_vp10/inputs/t.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector lambda0(1);
  lambda0[0]  = RcppDeepState_double();
  qs::c_qsave(lambda0,"/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/ths_vp10/inputs/lambda0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda0 values: "<< lambda0 << std::endl;
  NumericVector lambda1(1);
  lambda1[0]  = RcppDeepState_double();
  qs::c_qsave(lambda1,"/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/ths_vp10/inputs/lambda1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda1 values: "<< lambda1 << std::endl;
  NumericVector lambda2(1);
  lambda2[0]  = RcppDeepState_double();
  qs::c_qsave(lambda2,"/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/ths_vp10/inputs/lambda2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda2 values: "<< lambda2 << std::endl;
  NumericVector p(1);
  p[0]  = RcppDeepState_double();
  qs::c_qsave(p,"/home/akhila/fuzzer_packages/fuzzedpackages/smam/inst/testfiles/ths_vp10/inputs/p.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    ths_vp10(vs,t[0],lambda0[0],lambda1[0],lambda2[0],p[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
