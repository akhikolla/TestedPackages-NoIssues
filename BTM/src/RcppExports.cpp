// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// btm
SEXP btm(Rcpp::List biterms, Rcpp::CharacterVector x, int K, int W, double alpha, double beta, int iter, int win, bool background, int trace);
RcppExport SEXP _BTM_btm(SEXP bitermsSEXP, SEXP xSEXP, SEXP KSEXP, SEXP WSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP iterSEXP, SEXP winSEXP, SEXP backgroundSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type biterms(bitermsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type win(winSEXP);
    Rcpp::traits::input_parameter< bool >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(btm(biterms, x, K, W, alpha, beta, iter, win, background, trace));
    return rcpp_result_gen;
END_RCPP
}
// btm_infer
Rcpp::NumericMatrix btm_infer(const Rcpp::List& model, Rcpp::CharacterVector x, std::string type);
RcppExport SEXP _BTM_btm_infer(SEXP modelSEXP, SEXP xSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(btm_infer(model, x, type));
    return rcpp_result_gen;
END_RCPP
}
// btm_biterms
Rcpp::List btm_biterms(SEXP btm_model);
RcppExport SEXP _BTM_btm_biterms(SEXP btm_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type btm_model(btm_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(btm_biterms(btm_model));
    return rcpp_result_gen;
END_RCPP
}
// btm_biterms_text
Rcpp::List btm_biterms_text(Rcpp::CharacterVector x, int W, int win);
RcppExport SEXP _BTM_btm_biterms_text(SEXP xSEXP, SEXP WSEXP, SEXP winSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type win(winSEXP);
    rcpp_result_gen = Rcpp::wrap(btm_biterms_text(x, W, win));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BTM_btm", (DL_FUNC) &_BTM_btm, 10},
    {"_BTM_btm_infer", (DL_FUNC) &_BTM_btm_infer, 3},
    {"_BTM_btm_biterms", (DL_FUNC) &_BTM_btm_biterms, 1},
    {"_BTM_btm_biterms_text", (DL_FUNC) &_BTM_btm_biterms_text, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_BTM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
