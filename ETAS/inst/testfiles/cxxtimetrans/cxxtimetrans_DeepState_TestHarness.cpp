// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cxxtimetrans_DeepState_TestHarness_generation.cpp and cxxtimetrans_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector cxxtimetrans(NumericVector theta, NumericMatrix revents, NumericMatrix rpoly, NumericVector tperiod, double integ0, int ndiv);

TEST(ETAS_deepstate_test,cxxtimetrans_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector theta  = RcppDeepState_NumericVector();
  qs::c_qsave(theta,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxtimetrans/inputs/theta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericMatrix revents  = RcppDeepState_NumericMatrix();
  qs::c_qsave(revents,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxtimetrans/inputs/revents.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "revents values: "<< revents << std::endl;
  NumericMatrix rpoly  = RcppDeepState_NumericMatrix();
  qs::c_qsave(rpoly,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxtimetrans/inputs/rpoly.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rpoly values: "<< rpoly << std::endl;
  NumericVector tperiod  = RcppDeepState_NumericVector();
  qs::c_qsave(tperiod,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxtimetrans/inputs/tperiod.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tperiod values: "<< tperiod << std::endl;
  NumericVector integ0(1);
  integ0[0]  = RcppDeepState_double();
  qs::c_qsave(integ0,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxtimetrans/inputs/integ0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "integ0 values: "<< integ0 << std::endl;
  IntegerVector ndiv(1);
  ndiv[0]  = RcppDeepState_int();
  qs::c_qsave(ndiv,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxtimetrans/inputs/ndiv.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndiv values: "<< ndiv << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cxxtimetrans(theta,revents,rpoly,tperiod,integ0[0],ndiv[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
