// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cxxdeclust_DeepState_TestHarness_generation.cpp and cxxdeclust_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List cxxdeclust(NumericVector param, NumericMatrix revents, NumericMatrix rpoly, NumericVector bwd, NumericVector tperiod, int ndiv);

TEST(ETAS_deepstate_test,cxxdeclust_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector param  = RcppDeepState_NumericVector();
  qs::c_qsave(param,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxdeclust/inputs/param.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "param values: "<< param << std::endl;
  NumericMatrix revents  = RcppDeepState_NumericMatrix();
  qs::c_qsave(revents,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxdeclust/inputs/revents.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "revents values: "<< revents << std::endl;
  NumericMatrix rpoly  = RcppDeepState_NumericMatrix();
  qs::c_qsave(rpoly,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxdeclust/inputs/rpoly.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rpoly values: "<< rpoly << std::endl;
  NumericVector bwd  = RcppDeepState_NumericVector();
  qs::c_qsave(bwd,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxdeclust/inputs/bwd.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bwd values: "<< bwd << std::endl;
  NumericVector tperiod  = RcppDeepState_NumericVector();
  qs::c_qsave(tperiod,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxdeclust/inputs/tperiod.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tperiod values: "<< tperiod << std::endl;
  IntegerVector ndiv(1);
  ndiv[0]  = RcppDeepState_int();
  qs::c_qsave(ndiv,"/home/akhila/fuzzer_packages/fuzzedpackages/ETAS/inst/testfiles/cxxdeclust/inputs/ndiv.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndiv values: "<< ndiv << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cxxdeclust(param,revents,rpoly,bwd,tperiod,ndiv[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
