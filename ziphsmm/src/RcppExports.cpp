// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// vectorize
arma::vec vectorize(arma::mat mat, int axis);
RcppExport SEXP _ziphsmm_vectorize(SEXP matSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(vectorize(mat, axis));
    return rcpp_result_gen;
END_RCPP
}
// vec2mat
arma::mat vec2mat(arma::vec vec, int row, int col, int axis);
RcppExport SEXP _ziphsmm_vec2mat(SEXP vecSEXP, SEXP rowSEXP, SEXP colSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    Rcpp::traits::input_parameter< int >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2mat(vec, row, col, axis));
    return rcpp_result_gen;
END_RCPP
}
// colsum
arma::vec colsum(arma::mat matrix);
RcppExport SEXP _ziphsmm_colsum(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(colsum(matrix));
    return rcpp_result_gen;
END_RCPP
}
// rowsum
arma::vec rowsum(arma::mat matrix);
RcppExport SEXP _ziphsmm_rowsum(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(rowsum(matrix));
    return rcpp_result_gen;
END_RCPP
}
// subsetmatrix
arma::mat subsetmatrix(arma::mat rawmat, arma::vec rowindex, arma::vec colindex);
RcppExport SEXP _ziphsmm_subsetmatrix(SEXP rawmatSEXP, SEXP rowindexSEXP, SEXP colindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type rawmat(rawmatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rowindex(rowindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type colindex(colindexSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetmatrix(rawmat, rowindex, colindex));
    return rcpp_result_gen;
END_RCPP
}
// matrixpower
arma::mat matrixpower(arma::mat oldmat, int power);
RcppExport SEXP _ziphsmm_matrixpower(SEXP oldmatSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type oldmat(oldmatSEXP);
    Rcpp::traits::input_parameter< int >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixpower(oldmat, power));
    return rcpp_result_gen;
END_RCPP
}
// matrixexp
arma::mat matrixexp(arma::mat oldmat, double t);
RcppExport SEXP _ziphsmm_matrixexp(SEXP oldmatSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type oldmat(oldmatSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixexp(oldmat, t));
    return rcpp_result_gen;
END_RCPP
}
// matrixsum
double matrixsum(arma::mat mat1, arma::mat mat2);
RcppExport SEXP _ziphsmm_matrixsum(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(matrixsum(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// matrixintegral
arma::mat matrixintegral(arma::mat Q, double interval, int x, int y);
RcppExport SEXP _ziphsmm_matrixintegral(SEXP QSEXP, SEXP intervalSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(matrixintegral(Q, interval, x, y));
    return rcpp_result_gen;
END_RCPP
}
// dzip
double dzip(double p, double theta, int y, bool loga);
RcppExport SEXP _ziphsmm_dzip(SEXP pSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP logaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type loga(logaSEXP);
    rcpp_result_gen = Rcpp::wrap(dzip(p, theta, y, loga));
    return rcpp_result_gen;
END_RCPP
}
// rzip
arma::vec rzip(int n, double p, double theta);
RcppExport SEXP _ziphsmm_rzip(SEXP nSEXP, SEXP pSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(rzip(n, p, theta));
    return rcpp_result_gen;
END_RCPP
}
// pmf_expbase
double pmf_expbase(double lden, double eb, int xval);
RcppExport SEXP _ziphsmm_pmf_expbase(SEXP ldenSEXP, SEXP ebSEXP, SEXP xvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lden(ldenSEXP);
    Rcpp::traits::input_parameter< double >::type eb(ebSEXP);
    Rcpp::traits::input_parameter< int >::type xval(xvalSEXP);
    rcpp_result_gen = Rcpp::wrap(pmf_expbase(lden, eb, xval));
    return rcpp_result_gen;
END_RCPP
}
// cdf_expbase
double cdf_expbase(double lden, double eb, int xval);
RcppExport SEXP _ziphsmm_cdf_expbase(SEXP ldenSEXP, SEXP ebSEXP, SEXP xvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lden(ldenSEXP);
    Rcpp::traits::input_parameter< double >::type eb(ebSEXP);
    Rcpp::traits::input_parameter< int >::type xval(xvalSEXP);
    rcpp_result_gen = Rcpp::wrap(cdf_expbase(lden, eb, xval));
    return rcpp_result_gen;
END_RCPP
}
// random_expbase
int random_expbase(double lden, double eb, int maxt);
RcppExport SEXP _ziphsmm_random_expbase(SEXP ldenSEXP, SEXP ebSEXP, SEXP maxtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lden(ldenSEXP);
    Rcpp::traits::input_parameter< double >::type eb(ebSEXP);
    Rcpp::traits::input_parameter< int >::type maxt(maxtSEXP);
    rcpp_result_gen = Rcpp::wrap(random_expbase(lden, eb, maxt));
    return rcpp_result_gen;
END_RCPP
}
// rshiftpois
arma::vec rshiftpois(int n, int theta, int shift);
RcppExport SEXP _ziphsmm_rshiftpois(SEXP nSEXP, SEXP thetaSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(rshiftpois(n, theta, shift));
    return rcpp_result_gen;
END_RCPP
}
// dshiftpois
double dshiftpois(int x, int theta, int shift, bool loga);
RcppExport SEXP _ziphsmm_dshiftpois(SEXP xSEXP, SEXP thetaSEXP, SEXP shiftSEXP, SEXP logaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< bool >::type loga(logaSEXP);
    rcpp_result_gen = Rcpp::wrap(dshiftpois(x, theta, shift, loga));
    return rcpp_result_gen;
END_RCPP
}
// dlogp
double dlogp(int x, double p, bool loga);
RcppExport SEXP _ziphsmm_dlogp(SEXP xSEXP, SEXP pSEXP, SEXP logaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type loga(logaSEXP);
    rcpp_result_gen = Rcpp::wrap(dlogp(x, p, loga));
    return rcpp_result_gen;
END_RCPP
}
// rlogp
arma::vec rlogp(int n, double p);
RcppExport SEXP _ziphsmm_rlogp(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rlogp(n, p));
    return rcpp_result_gen;
END_RCPP
}
// multinomrand
arma::vec multinomrand(int n, int k, arma::vec prob, arma::vec label);
RcppExport SEXP _ziphsmm_multinomrand(SEXP nSEXP, SEXP kSEXP, SEXP probSEXP, SEXP labelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type label(labelSEXP);
    rcpp_result_gen = Rcpp::wrap(multinomrand(n, k, prob, label));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_hmm
arma::mat hsmm_hmm(arma::mat omega, arma::mat dm, arma::vec mv);
RcppExport SEXP _ziphsmm_hsmm_hmm(SEXP omegaSEXP, SEXP dmSEXP, SEXP mvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mv(mvSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_hmm(omega, dm, mv));
    return rcpp_result_gen;
END_RCPP
}
// hmm_gen
arma::mat hmm_gen(int dim, int M, int ntimes, arma::vec pi, arma::mat a, arma::vec theta, arma::vec zeroprop);
RcppExport SEXP _ziphsmm_hmm_gen(SEXP dimSEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP piSEXP, SEXP aSEXP, SEXP thetaSEXP, SEXP zeropropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_gen(dim, M, ntimes, pi, a, theta, zeroprop));
    return rcpp_result_gen;
END_RCPP
}
// getnodeprob_nocov
arma::mat getnodeprob_nocov(arma::vec ystar, arma::mat emit);
RcppExport SEXP _ziphsmm_getnodeprob_nocov(SEXP ystarSEXP, SEXP emitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ystar(ystarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type emit(emitSEXP);
    rcpp_result_gen = Rcpp::wrap(getnodeprob_nocov(ystar, emit));
    return rcpp_result_gen;
END_RCPP
}
// hmm_cov_gen
arma::mat hmm_cov_gen(arma::vec parm, int M, long dim, int ncolcovpi, arma::mat covpi, int ncolcovtrans, arma::mat covtrans, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, arma::vec zeroindex);
RcppExport SEXP _ziphsmm_hmm_cov_gen(SEXP parmSEXP, SEXP MSEXP, SEXP dimSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovtransSEXP, SEXP covtransSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covtrans(covtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_cov_gen(parm, M, dim, ncolcovpi, covpi, ncolcovtrans, covtrans, ncolcovp1, covp1, ncolcovpois, covpois, zeroindex));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_gen
arma::mat hsmm_gen(int dim, int M, arma::vec pi, arma::vec theta, arma::vec zeroprop, arma::mat omega, arma::vec p, std::string dt_dist);
RcppExport SEXP _ziphsmm_hsmm_gen(SEXP dimSEXP, SEXP MSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP zeropropSEXP, SEXP omegaSEXP, SEXP pSEXP, SEXP dt_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_gen(dim, M, pi, theta, zeroprop, omega, p, dt_dist));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_cov_gen
arma::mat hsmm_cov_gen(arma::vec parm, int M, long dim, std::string dt_dist, arma::vec zeroindex, int ncolcovp, arma::mat covp, int ncolcovpi, arma::mat covpi, int ncolcovomega, arma::mat covomega, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois);
RcppExport SEXP _ziphsmm_hsmm_cov_gen(SEXP parmSEXP, SEXP MSEXP, SEXP dimSEXP, SEXP dt_distSEXP, SEXP zeroindexSEXP, SEXP ncolcovpSEXP, SEXP covpSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovomegaSEXP, SEXP covomegaSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp(ncolcovpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp(covpSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cov_gen(parm, M, dim, dt_dist, zeroindex, ncolcovp, covp, ncolcovpi, covpi, ncolcovomega, covomega, ncolcovp1, covp1, ncolcovpois, covpois));
    return rcpp_result_gen;
END_RCPP
}
// hmm_nllk
arma::vec hmm_nllk(arma::vec parm, int M, arma::vec y, arma::vec zeroindex);
RcppExport SEXP _ziphsmm_hmm_nllk(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_nllk(parm, M, y, zeroindex));
    return rcpp_result_gen;
END_RCPP
}
// hmm_common_nocov_negloglik
double hmm_common_nocov_negloglik(arma::vec allparm, int M, arma::vec ally, arma::vec ntimes, arma::vec zeroindex);
RcppExport SEXP _ziphsmm_hmm_common_nocov_negloglik(SEXP allparmSEXP, SEXP MSEXP, SEXP allySEXP, SEXP ntimesSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ally(allySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_common_nocov_negloglik(allparm, M, ally, ntimes, zeroindex));
    return rcpp_result_gen;
END_RCPP
}
// hmm_cov_negloglik
arma::vec hmm_cov_negloglik(arma::vec parm, int M, arma::vec y, int ncolcovpi, arma::mat covpi, int ncolcovtrans, arma::mat covtrans, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, arma::vec zeroindex);
RcppExport SEXP _ziphsmm_hmm_cov_negloglik(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovtransSEXP, SEXP covtransSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covtrans(covtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_cov_negloglik(parm, M, y, ncolcovpi, covpi, ncolcovtrans, covtrans, ncolcovp1, covp1, ncolcovpois, covpois, zeroindex));
    return rcpp_result_gen;
END_RCPP
}
// hmm_common_negloglik
double hmm_common_negloglik(arma::vec allparm, int M, arma::vec ally, arma::vec ntimes, int ncolcovpi, arma::mat allcovpi, int ncolcovtrans, arma::mat allcovtrans, int ncolcovp1, arma::mat allcovp1, int ncolcovpois, arma::mat allcovpois, arma::vec zeroindex);
RcppExport SEXP _ziphsmm_hmm_common_negloglik(SEXP allparmSEXP, SEXP MSEXP, SEXP allySEXP, SEXP ntimesSEXP, SEXP ncolcovpiSEXP, SEXP allcovpiSEXP, SEXP ncolcovtransSEXP, SEXP allcovtransSEXP, SEXP ncolcovp1SEXP, SEXP allcovp1SEXP, SEXP ncolcovpoisSEXP, SEXP allcovpoisSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ally(allySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpi(allcovpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovtrans(allcovtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovp1(allcovp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpois(allcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_common_negloglik(allparm, M, ally, ntimes, ncolcovpi, allcovpi, ncolcovtrans, allcovtrans, ncolcovp1, allcovp1, ncolcovpois, allcovpois, zeroindex));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_nllk
arma::vec hsmm_nllk(arma::vec parm, int M, arma::vec trunc, arma::vec y, std::string dt_dist, arma::vec zeroindex);
RcppExport SEXP _ziphsmm_hsmm_nllk(SEXP parmSEXP, SEXP MSEXP, SEXP truncSEXP, SEXP ySEXP, SEXP dt_distSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_nllk(parm, M, trunc, y, dt_dist, zeroindex));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_common_nocov_nllk
double hsmm_common_nocov_nllk(arma::vec allparm, int M, arma::vec ally, arma::vec trunc, arma::vec ntimes, std::string dt_dist, arma::vec zeroprop);
RcppExport SEXP _ziphsmm_hsmm_common_nocov_nllk(SEXP allparmSEXP, SEXP MSEXP, SEXP allySEXP, SEXP truncSEXP, SEXP ntimesSEXP, SEXP dt_distSEXP, SEXP zeropropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ally(allySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_common_nocov_nllk(allparm, M, ally, trunc, ntimes, dt_dist, zeroprop));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_cov_nllk
arma::mat hsmm_cov_nllk(arma::vec parm, int M, arma::vec y, arma::vec trunc, std::string dt_dist, arma::vec zeroindex, int ncolcovp, arma::mat covp, int ncolcovpi, arma::mat covpi, int ncolcovomega, arma::mat covomega, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois);
RcppExport SEXP _ziphsmm_hsmm_cov_nllk(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP truncSEXP, SEXP dt_distSEXP, SEXP zeroindexSEXP, SEXP ncolcovpSEXP, SEXP covpSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovomegaSEXP, SEXP covomegaSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp(ncolcovpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp(covpSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cov_nllk(parm, M, y, trunc, dt_dist, zeroindex, ncolcovp, covp, ncolcovpi, covpi, ncolcovomega, covomega, ncolcovp1, covp1, ncolcovpois, covpois));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_common_negloglik
double hsmm_common_negloglik(arma::vec allparm, int M, arma::vec ally, arma::vec trunc, arma::vec ntimes, std::string dt_dist, arma::vec zeroindex, int ncolcovp, arma::mat allcovp, int ncolcovpi, arma::mat allcovpi, int ncolcovomega, arma::mat allcovomega, int ncolcovp1, arma::mat allcovp1, int ncolcovpois, arma::mat allcovpois);
RcppExport SEXP _ziphsmm_hsmm_common_negloglik(SEXP allparmSEXP, SEXP MSEXP, SEXP allySEXP, SEXP truncSEXP, SEXP ntimesSEXP, SEXP dt_distSEXP, SEXP zeroindexSEXP, SEXP ncolcovpSEXP, SEXP allcovpSEXP, SEXP ncolcovpiSEXP, SEXP allcovpiSEXP, SEXP ncolcovomegaSEXP, SEXP allcovomegaSEXP, SEXP ncolcovp1SEXP, SEXP allcovp1SEXP, SEXP ncolcovpoisSEXP, SEXP allcovpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ally(allySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp(ncolcovpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovp(allcovpSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpi(allcovpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovomega(allcovomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovp1(allcovp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpois(allcovpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_common_negloglik(allparm, M, ally, trunc, ntimes, dt_dist, zeroindex, ncolcovp, allcovp, ncolcovpi, allcovpi, ncolcovomega, allcovomega, ncolcovp1, allcovp1, ncolcovpois, allcovpois));
    return rcpp_result_gen;
END_RCPP
}
// hmm_viterbi
arma::vec hmm_viterbi(arma::vec pi, arma::mat a, arma::vec theta, int M, arma::vec y, arma::vec zeroprop);
RcppExport SEXP _ziphsmm_hmm_viterbi(SEXP piSEXP, SEXP aSEXP, SEXP thetaSEXP, SEXP MSEXP, SEXP ySEXP, SEXP zeropropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_viterbi(pi, a, theta, M, y, zeroprop));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_viterbi
arma::vec hsmm_viterbi(arma::vec y, int M, arma::vec pi, arma::vec theta, arma::mat omega, arma::vec p, arma::vec trunc, std::string dt_dist, arma::vec zeroprop);
RcppExport SEXP _ziphsmm_hsmm_viterbi(SEXP ySEXP, SEXP MSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP omegaSEXP, SEXP pSEXP, SEXP truncSEXP, SEXP dt_distSEXP, SEXP zeropropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_viterbi(y, M, pi, theta, omega, p, trunc, dt_dist, zeroprop));
    return rcpp_result_gen;
END_RCPP
}
// hmm_cov_viterbi
arma::vec hmm_cov_viterbi(arma::vec parm, int M, arma::vec y, int ncolcovpi, arma::mat covpi, int ncolcovtrans, arma::mat covtrans, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, arma::vec zeroindex);
RcppExport SEXP _ziphsmm_hmm_cov_viterbi(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovtransSEXP, SEXP covtransSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covtrans(covtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_cov_viterbi(parm, M, y, ncolcovpi, covpi, ncolcovtrans, covtrans, ncolcovp1, covp1, ncolcovpois, covpois, zeroindex));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_cov_viterbi
arma::vec hsmm_cov_viterbi(arma::vec parm, int M, arma::vec y, arma::vec trunc, arma::vec zeroindex, int ncolcovp, arma::mat covp, int ncolcovpi, arma::mat covpi, int ncolcovomega, arma::mat covomega, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, std::string dt_dist);
RcppExport SEXP _ziphsmm_hsmm_cov_viterbi(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP truncSEXP, SEXP zeroindexSEXP, SEXP ncolcovpSEXP, SEXP covpSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovomegaSEXP, SEXP covomegaSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP dt_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp(ncolcovpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp(covpSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cov_viterbi(parm, M, y, trunc, zeroindex, ncolcovp, covp, ncolcovpi, covpi, ncolcovomega, covomega, ncolcovp1, covp1, ncolcovpois, covpois, dt_dist));
    return rcpp_result_gen;
END_RCPP
}
// ziploglik_nocov
double ziploglik_nocov(arma::vec delta, arma::mat gamma, double theta, arma::vec lambda, arma::vec y, arma::vec ntimes);
RcppExport SEXP _ziphsmm_ziploglik_nocov(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaSEXP, SEXP lambdaSEXP, SEXP ySEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(ziploglik_nocov(delta, gamma, theta, lambda, y, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// retrieve_nocov
Rcpp::List retrieve_nocov(arma::vec parm, int M);
RcppExport SEXP _ziphsmm_retrieve_nocov(SEXP parmSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(retrieve_nocov(parm, M));
    return rcpp_result_gen;
END_RCPP
}
// zipnegloglik_nocov
double zipnegloglik_nocov(arma::vec parm, int M, arma::vec y, arma::vec ntimes);
RcppExport SEXP _ziphsmm_zipnegloglik_nocov(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(zipnegloglik_nocov(parm, M, y, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// forwardbackward
Rcpp::List forwardbackward(arma::vec Pi, arma::mat P, arma::mat nodeprob, arma::vec y, arma::vec ntimes);
RcppExport SEXP _ziphsmm_forwardbackward(SEXP PiSEXP, SEXP PSEXP, SEXP nodeprobSEXP, SEXP ySEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nodeprob(nodeprobSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(forwardbackward(Pi, P, nodeprob, y, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// grad_ziploglik_nocov
arma::vec grad_ziploglik_nocov(arma::vec delta, arma::mat gamma, double theta, arma::vec lambda, arma::vec y, arma::vec ntimes);
RcppExport SEXP _ziphsmm_grad_ziploglik_nocov(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaSEXP, SEXP lambdaSEXP, SEXP ySEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_ziploglik_nocov(delta, gamma, theta, lambda, y, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// grad_zipnegloglik_nocov
arma::vec grad_zipnegloglik_nocov(arma::vec parm, int M, arma::vec y, arma::vec ntimes);
RcppExport SEXP _ziphsmm_grad_zipnegloglik_nocov(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_zipnegloglik_nocov(parm, M, y, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// ziploglik_cov
double ziploglik_cov(arma::vec delta, arma::mat gamma, arma::vec thetaparm, arma::mat lambdaparm, arma::vec y, arma::mat x, arma::vec ntimes);
RcppExport SEXP _ziphsmm_ziploglik_cov(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaparmSEXP, SEXP lambdaparmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaparm(thetaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdaparm(lambdaparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(ziploglik_cov(delta, gamma, thetaparm, lambdaparm, y, x, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// retrieve_cov
Rcpp::List retrieve_cov(arma::vec parm, int M, int ncolx);
RcppExport SEXP _ziphsmm_retrieve_cov(SEXP parmSEXP, SEXP MSEXP, SEXP ncolxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ncolx(ncolxSEXP);
    rcpp_result_gen = Rcpp::wrap(retrieve_cov(parm, M, ncolx));
    return rcpp_result_gen;
END_RCPP
}
// zipnegloglik_cov
double zipnegloglik_cov(arma::vec parm, arma::vec y, arma::mat covariates, int M, arma::vec ntimes);
RcppExport SEXP _ziphsmm_zipnegloglik_cov(SEXP parmSEXP, SEXP ySEXP, SEXP covariatesSEXP, SEXP MSEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(zipnegloglik_cov(parm, y, covariates, M, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// grad_ziploglik_cov
arma::vec grad_ziploglik_cov(arma::vec delta, arma::mat gamma, arma::vec thetaparm, arma::mat lambdaparm, arma::vec y, arma::mat x, arma::vec ntimes);
RcppExport SEXP _ziphsmm_grad_ziploglik_cov(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaparmSEXP, SEXP lambdaparmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaparm(thetaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdaparm(lambdaparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_ziploglik_cov(delta, gamma, thetaparm, lambdaparm, y, x, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// grad_zipnegloglik_cov
arma::vec grad_zipnegloglik_cov(arma::vec parm, arma::vec y, arma::mat covariates, int M, arma::vec ntimes);
RcppExport SEXP _ziphsmm_grad_zipnegloglik_cov(SEXP parmSEXP, SEXP ySEXP, SEXP covariatesSEXP, SEXP MSEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_zipnegloglik_cov(parm, y, covariates, M, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// nupdate_to_nbetween
arma::mat nupdate_to_nbetween(int nupdate, int nmin, long dim, arma::vec ntimes);
RcppExport SEXP _ziphsmm_nupdate_to_nbetween(SEXP nupdateSEXP, SEXP nminSEXP, SEXP dimSEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nupdate(nupdateSEXP);
    Rcpp::traits::input_parameter< int >::type nmin(nminSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(nupdate_to_nbetween(nupdate, nmin, dim, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// sgd_zip_nocov
arma::mat sgd_zip_nocov(arma::vec parm, arma::vec y, int M, arma::vec ntimes, int nmin, int nupdate, double power, arma::vec rate);
RcppExport SEXP _ziphsmm_sgd_zip_nocov(SEXP parmSEXP, SEXP ySEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP nminSEXP, SEXP nupdateSEXP, SEXP powerSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< int >::type nmin(nminSEXP);
    Rcpp::traits::input_parameter< int >::type nupdate(nupdateSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(sgd_zip_nocov(parm, y, M, ntimes, nmin, nupdate, power, rate));
    return rcpp_result_gen;
END_RCPP
}
// sgd_zip_cov
arma::mat sgd_zip_cov(arma::vec parm, arma::vec y, arma::mat x, int M, arma::vec ntimes, int nmin, int nupdate, double power, arma::vec rate);
RcppExport SEXP _ziphsmm_sgd_zip_cov(SEXP parmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP nminSEXP, SEXP nupdateSEXP, SEXP powerSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< int >::type nmin(nminSEXP);
    Rcpp::traits::input_parameter< int >::type nupdate(nupdateSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(sgd_zip_cov(parm, y, x, M, ntimes, nmin, nupdate, power, rate));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_gen_np
arma::mat hsmm_gen_np(int dim, int M, arma::vec pi, arma::vec theta, arma::vec zeroprop, arma::mat omega, arma::mat dt);
RcppExport SEXP _ziphsmm_hsmm_gen_np(SEXP dimSEXP, SEXP MSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP zeropropSEXP, SEXP omegaSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_gen_np(dim, M, pi, theta, zeroprop, omega, dt));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_cov_gen_np
arma::mat hsmm_cov_gen_np(arma::vec parm, arma::mat dt, int M, long dim, arma::vec zeroindex, int ncolcovpi, arma::mat covpi, int ncolcovomega, arma::mat covomega, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois);
RcppExport SEXP _ziphsmm_hsmm_cov_gen_np(SEXP parmSEXP, SEXP dtSEXP, SEXP MSEXP, SEXP dimSEXP, SEXP zeroindexSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovomegaSEXP, SEXP covomegaSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cov_gen_np(parm, dt, M, dim, zeroindex, ncolcovpi, covpi, ncolcovomega, covomega, ncolcovp1, covp1, ncolcovpois, covpois));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_viterbi_np
arma::vec hsmm_viterbi_np(arma::vec y, int M, arma::vec trunc, arma::vec pi, arma::vec theta, arma::mat omega, arma::mat dm, arma::vec zeroprop);
RcppExport SEXP _ziphsmm_hsmm_viterbi_np(SEXP ySEXP, SEXP MSEXP, SEXP truncSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP omegaSEXP, SEXP dmSEXP, SEXP zeropropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_viterbi_np(y, M, trunc, pi, theta, omega, dm, zeroprop));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_cov_viterbi_np
arma::vec hsmm_cov_viterbi_np(arma::vec parm, arma::mat dm, int M, arma::vec trunc, arma::vec y, arma::vec zeroindex, int ncolcovpi, arma::mat covpi, int ncolcovomega, arma::mat covomega, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois);
RcppExport SEXP _ziphsmm_hsmm_cov_viterbi_np(SEXP parmSEXP, SEXP dmSEXP, SEXP MSEXP, SEXP truncSEXP, SEXP ySEXP, SEXP zeroindexSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovomegaSEXP, SEXP covomegaSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cov_viterbi_np(parm, dm, M, trunc, y, zeroindex, ncolcovpi, covpi, ncolcovomega, covomega, ncolcovp1, covp1, ncolcovpois, covpois));
    return rcpp_result_gen;
END_RCPP
}
// hsmmloglik_nocov
double hsmmloglik_nocov(arma::mat dt, arma::vec delta, arma::mat gamma, double theta, arma::vec lambda, arma::vec y, arma::vec ntimes, arma::vec trunc);
RcppExport SEXP _ziphsmm_hsmmloglik_nocov(SEXP dtSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaSEXP, SEXP lambdaSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmmloglik_nocov(dt, delta, gamma, theta, lambda, y, ntimes, trunc));
    return rcpp_result_gen;
END_RCPP
}
// hsmmretrieve_nocov
Rcpp::List hsmmretrieve_nocov(arma::vec parm, int M, arma::vec trunc);
RcppExport SEXP _ziphsmm_hsmmretrieve_nocov(SEXP parmSEXP, SEXP MSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmmretrieve_nocov(parm, M, trunc));
    return rcpp_result_gen;
END_RCPP
}
// hsmmnegloglik_nocov
double hsmmnegloglik_nocov(arma::vec parm, int M, arma::vec y, arma::vec ntimes, arma::vec trunc);
RcppExport SEXP _ziphsmm_hsmmnegloglik_nocov(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmmnegloglik_nocov(parm, M, y, ntimes, trunc));
    return rcpp_result_gen;
END_RCPP
}
// gradhsmmloglik_nocov
arma::vec gradhsmmloglik_nocov(arma::mat dt, arma::vec delta, arma::mat gamma, double theta, arma::vec lambda, arma::vec y, arma::vec ntimes, arma::vec trunc);
RcppExport SEXP _ziphsmm_gradhsmmloglik_nocov(SEXP dtSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaSEXP, SEXP lambdaSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(gradhsmmloglik_nocov(dt, delta, gamma, theta, lambda, y, ntimes, trunc));
    return rcpp_result_gen;
END_RCPP
}
// gradhsmmnegloglik_nocov
arma::vec gradhsmmnegloglik_nocov(arma::vec parm, int M, arma::vec y, arma::vec ntimes, arma::vec trunc);
RcppExport SEXP _ziphsmm_gradhsmmnegloglik_nocov(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(gradhsmmnegloglik_nocov(parm, M, y, ntimes, trunc));
    return rcpp_result_gen;
END_RCPP
}
// hsmmloglik_cov
double hsmmloglik_cov(arma::mat dt, arma::vec delta, arma::mat gamma, arma::vec thetaparm, arma::mat lambdaparm, arma::vec y, arma::mat x, arma::vec ntimes, arma::vec trunc);
RcppExport SEXP _ziphsmm_hsmmloglik_cov(SEXP dtSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaparmSEXP, SEXP lambdaparmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP ntimesSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaparm(thetaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdaparm(lambdaparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmmloglik_cov(dt, delta, gamma, thetaparm, lambdaparm, y, x, ntimes, trunc));
    return rcpp_result_gen;
END_RCPP
}
// hsmmretrieve_cov
Rcpp::List hsmmretrieve_cov(arma::vec parm, int M, int ncolx, arma::vec trunc);
RcppExport SEXP _ziphsmm_hsmmretrieve_cov(SEXP parmSEXP, SEXP MSEXP, SEXP ncolxSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ncolx(ncolxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmmretrieve_cov(parm, M, ncolx, trunc));
    return rcpp_result_gen;
END_RCPP
}
// hsmmnegloglik_cov
double hsmmnegloglik_cov(arma::vec parm, arma::vec y, arma::mat covariates, int M, arma::vec ntimes, arma::vec trunc);
RcppExport SEXP _ziphsmm_hsmmnegloglik_cov(SEXP parmSEXP, SEXP ySEXP, SEXP covariatesSEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmmnegloglik_cov(parm, y, covariates, M, ntimes, trunc));
    return rcpp_result_gen;
END_RCPP
}
// gradhsmmloglik_cov
arma::vec gradhsmmloglik_cov(arma::mat dt, arma::vec delta, arma::mat gamma, arma::vec thetaparm, arma::mat lambdaparm, arma::vec y, arma::mat x, arma::vec ntimes, arma::vec trunc);
RcppExport SEXP _ziphsmm_gradhsmmloglik_cov(SEXP dtSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaparmSEXP, SEXP lambdaparmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP ntimesSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaparm(thetaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdaparm(lambdaparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(gradhsmmloglik_cov(dt, delta, gamma, thetaparm, lambdaparm, y, x, ntimes, trunc));
    return rcpp_result_gen;
END_RCPP
}
// gradhsmmnegloglik_cov
arma::vec gradhsmmnegloglik_cov(arma::vec parm, arma::vec y, arma::mat covariates, int M, arma::vec ntimes, arma::vec trunc);
RcppExport SEXP _ziphsmm_gradhsmmnegloglik_cov(SEXP parmSEXP, SEXP ySEXP, SEXP covariatesSEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(gradhsmmnegloglik_cov(parm, y, covariates, M, ntimes, trunc));
    return rcpp_result_gen;
END_RCPP
}
// sgd_hsmm_nocov
arma::mat sgd_hsmm_nocov(arma::vec parm, arma::vec y, int M, arma::vec ntimes, int nmin, int nupdate, double power, arma::vec rate, arma::vec trunc);
RcppExport SEXP _ziphsmm_sgd_hsmm_nocov(SEXP parmSEXP, SEXP ySEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP nminSEXP, SEXP nupdateSEXP, SEXP powerSEXP, SEXP rateSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< int >::type nmin(nminSEXP);
    Rcpp::traits::input_parameter< int >::type nupdate(nupdateSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(sgd_hsmm_nocov(parm, y, M, ntimes, nmin, nupdate, power, rate, trunc));
    return rcpp_result_gen;
END_RCPP
}
// sgd_hsmm_cov
arma::mat sgd_hsmm_cov(arma::vec parm, arma::vec y, arma::mat x, int M, arma::vec ntimes, int nmin, int nupdate, double power, arma::vec rate, arma::vec trunc);
RcppExport SEXP _ziphsmm_sgd_hsmm_cov(SEXP parmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP nminSEXP, SEXP nupdateSEXP, SEXP powerSEXP, SEXP rateSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< int >::type nmin(nminSEXP);
    Rcpp::traits::input_parameter< int >::type nupdate(nupdateSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(sgd_hsmm_cov(parm, y, x, M, ntimes, nmin, nupdate, power, rate, trunc));
    return rcpp_result_gen;
END_RCPP
}
// getallexpm
arma::cube getallexpm(arma::mat tpm, arma::vec udiff);
RcppExport SEXP _ziphsmm_getallexpm(SEXP tpmSEXP, SEXP udiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type tpm(tpmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    rcpp_result_gen = Rcpp::wrap(getallexpm(tpm, udiff));
    return rcpp_result_gen;
END_RCPP
}
// locate
int locate(double interval, arma::vec udiff);
RcppExport SEXP _ziphsmm_locate(SEXP intervalSEXP, SEXP udiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    rcpp_result_gen = Rcpp::wrap(locate(interval, udiff));
    return rcpp_result_gen;
END_RCPP
}
// get_c
arma::mat get_c(arma::mat xi, arma::vec diffvec, arma::vec udiff);
RcppExport SEXP _ziphsmm_get_c(SEXP xiSEXP, SEXP diffvecSEXP, SEXP udiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type diffvec(diffvecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    rcpp_result_gen = Rcpp::wrap(get_c(xi, diffvec, udiff));
    return rcpp_result_gen;
END_RCPP
}
// get_taun
arma::mat get_taun(arma::mat Q, arma::vec udiff, arma::mat C);
RcppExport SEXP _ziphsmm_get_taun(SEXP QSEXP, SEXP udiffSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(get_taun(Q, udiff, C));
    return rcpp_result_gen;
END_RCPP
}
// fb_cont
Rcpp::List fb_cont(arma::vec Pi, arma::mat P, arma::mat nodeprob, long dim, arma::vec ntimes, arma::vec timeindex, arma::vec udiff, arma::cube expms);
RcppExport SEXP _ziphsmm_fb_cont(SEXP PiSEXP, SEXP PSEXP, SEXP nodeprobSEXP, SEXP dimSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP, SEXP expmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nodeprob(nodeprobSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    rcpp_result_gen = Rcpp::wrap(fb_cont(Pi, P, nodeprob, dim, ntimes, timeindex, udiff, expms));
    return rcpp_result_gen;
END_RCPP
}
// hmm_gen_cont
arma::mat hmm_gen_cont(int dim, int M, arma::vec pi, arma::mat a, arma::vec theta, arma::vec zeroprop, arma::vec timeindex);
RcppExport SEXP _ziphsmm_hmm_gen_cont(SEXP dimSEXP, SEXP MSEXP, SEXP piSEXP, SEXP aSEXP, SEXP thetaSEXP, SEXP zeropropSEXP, SEXP timeindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_gen_cont(dim, M, pi, a, theta, zeroprop, timeindex));
    return rcpp_result_gen;
END_RCPP
}
// ziploglik_nocov_cont
double ziploglik_nocov_cont(arma::vec delta, arma::mat gamma, double theta, arma::vec lambda, arma::vec y, arma::vec ntimes, arma::vec timeindex, arma::vec udiff, arma::cube expms);
RcppExport SEXP _ziphsmm_ziploglik_nocov_cont(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaSEXP, SEXP lambdaSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP, SEXP expmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    rcpp_result_gen = Rcpp::wrap(ziploglik_nocov_cont(delta, gamma, theta, lambda, y, ntimes, timeindex, udiff, expms));
    return rcpp_result_gen;
END_RCPP
}
// retrieve_nocov_cont
Rcpp::List retrieve_nocov_cont(arma::vec parm, int M);
RcppExport SEXP _ziphsmm_retrieve_nocov_cont(SEXP parmSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(retrieve_nocov_cont(parm, M));
    return rcpp_result_gen;
END_RCPP
}
// zipnegloglik_nocov_cont
double zipnegloglik_nocov_cont(arma::vec parm, int M, arma::vec y, arma::vec ntimes, arma::vec timeindex, arma::vec udiff);
RcppExport SEXP _ziphsmm_zipnegloglik_nocov_cont(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    rcpp_result_gen = Rcpp::wrap(zipnegloglik_nocov_cont(parm, M, y, ntimes, timeindex, udiff));
    return rcpp_result_gen;
END_RCPP
}
// grad_ziploglik_nocov_cont
arma::vec grad_ziploglik_nocov_cont(arma::vec delta, arma::mat gamma, double theta, arma::vec lambda, arma::vec y, arma::vec ntimes, arma::vec timeindex, arma::vec udiff, arma::cube expms);
RcppExport SEXP _ziphsmm_grad_ziploglik_nocov_cont(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaSEXP, SEXP lambdaSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP, SEXP expmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_ziploglik_nocov_cont(delta, gamma, theta, lambda, y, ntimes, timeindex, udiff, expms));
    return rcpp_result_gen;
END_RCPP
}
// grad_zipnegloglik_nocov_cont
arma::vec grad_zipnegloglik_nocov_cont(arma::vec parm, int M, arma::vec y, arma::vec ntimes, arma::vec timeindex, arma::vec udiff);
RcppExport SEXP _ziphsmm_grad_zipnegloglik_nocov_cont(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_zipnegloglik_nocov_cont(parm, M, y, ntimes, timeindex, udiff));
    return rcpp_result_gen;
END_RCPP
}
// hmm_viterbi_cont
arma::vec hmm_viterbi_cont(arma::vec pi, arma::mat a, arma::vec theta, int M, arma::vec y, arma::vec zeroprop, arma::vec timeindex, arma::vec udiff, arma::cube expms);
RcppExport SEXP _ziphsmm_hmm_viterbi_cont(SEXP piSEXP, SEXP aSEXP, SEXP thetaSEXP, SEXP MSEXP, SEXP ySEXP, SEXP zeropropSEXP, SEXP timeindexSEXP, SEXP udiffSEXP, SEXP expmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_viterbi_cont(pi, a, theta, M, y, zeroprop, timeindex, udiff, expms));
    return rcpp_result_gen;
END_RCPP
}
// hmm_cov_gen_cont
arma::mat hmm_cov_gen_cont(arma::vec parm, int M, long dim, int ncolcovpi, arma::mat covpi, int ncolcovtrans, arma::mat covtrans, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, arma::vec zeroindex, arma::vec timeindex);
RcppExport SEXP _ziphsmm_hmm_cov_gen_cont(SEXP parmSEXP, SEXP MSEXP, SEXP dimSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovtransSEXP, SEXP covtransSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP zeroindexSEXP, SEXP timeindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covtrans(covtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_cov_gen_cont(parm, M, dim, ncolcovpi, covpi, ncolcovtrans, covtrans, ncolcovp1, covp1, ncolcovpois, covpois, zeroindex, timeindex));
    return rcpp_result_gen;
END_RCPP
}
// ziploglik_cov_cont
double ziploglik_cov_cont(arma::vec delta, arma::mat gamma, arma::vec thetaparm, arma::mat lambdaparm, arma::vec y, arma::mat x, arma::vec ntimes, arma::vec timeindex, arma::vec udiff, arma::cube expms);
RcppExport SEXP _ziphsmm_ziploglik_cov_cont(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaparmSEXP, SEXP lambdaparmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP, SEXP expmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaparm(thetaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdaparm(lambdaparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    rcpp_result_gen = Rcpp::wrap(ziploglik_cov_cont(delta, gamma, thetaparm, lambdaparm, y, x, ntimes, timeindex, udiff, expms));
    return rcpp_result_gen;
END_RCPP
}
// retrieve_cov_cont
Rcpp::List retrieve_cov_cont(arma::vec parm, int M, int ncolx);
RcppExport SEXP _ziphsmm_retrieve_cov_cont(SEXP parmSEXP, SEXP MSEXP, SEXP ncolxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ncolx(ncolxSEXP);
    rcpp_result_gen = Rcpp::wrap(retrieve_cov_cont(parm, M, ncolx));
    return rcpp_result_gen;
END_RCPP
}
// zipnegloglik_cov_cont
double zipnegloglik_cov_cont(arma::vec parm, arma::vec y, arma::mat covariates, int M, arma::vec ntimes, arma::vec timeindex, arma::vec udiff);
RcppExport SEXP _ziphsmm_zipnegloglik_cov_cont(SEXP parmSEXP, SEXP ySEXP, SEXP covariatesSEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    rcpp_result_gen = Rcpp::wrap(zipnegloglik_cov_cont(parm, y, covariates, M, ntimes, timeindex, udiff));
    return rcpp_result_gen;
END_RCPP
}
// grad_ziploglik_cov_cont
arma::vec grad_ziploglik_cov_cont(arma::vec delta, arma::mat gamma, arma::vec thetaparm, arma::mat lambdaparm, arma::vec y, arma::mat x, arma::vec ntimes, arma::vec timeindex, arma::vec udiff, arma::cube expms);
RcppExport SEXP _ziphsmm_grad_ziploglik_cov_cont(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaparmSEXP, SEXP lambdaparmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP, SEXP expmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaparm(thetaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdaparm(lambdaparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_ziploglik_cov_cont(delta, gamma, thetaparm, lambdaparm, y, x, ntimes, timeindex, udiff, expms));
    return rcpp_result_gen;
END_RCPP
}
// grad_zipnegloglik_cov_cont
arma::vec grad_zipnegloglik_cov_cont(arma::vec parm, arma::vec y, arma::mat covariates, int M, arma::vec ntimes, arma::vec timeindex, arma::vec udiff);
RcppExport SEXP _ziphsmm_grad_zipnegloglik_cov_cont(SEXP parmSEXP, SEXP ySEXP, SEXP covariatesSEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_zipnegloglik_cov_cont(parm, y, covariates, M, ntimes, timeindex, udiff));
    return rcpp_result_gen;
END_RCPP
}
// hmm_cov_viterbi_cont
arma::vec hmm_cov_viterbi_cont(arma::vec parm, int M, arma::vec y, int ncolcovpi, arma::mat covpi, int ncolcovtrans, arma::mat covtrans, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, arma::vec zeroindex, arma::vec timeindex, arma::vec udiff, arma::cube expms);
RcppExport SEXP _ziphsmm_hmm_cov_viterbi_cont(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovtransSEXP, SEXP covtransSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP zeroindexSEXP, SEXP timeindexSEXP, SEXP udiffSEXP, SEXP expmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covtrans(covtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_cov_viterbi_cont(parm, M, y, ncolcovpi, covpi, ncolcovtrans, covtrans, ncolcovp1, covp1, ncolcovpois, covpois, zeroindex, timeindex, udiff, expms));
    return rcpp_result_gen;
END_RCPP
}
// smooth_nocov_cont
Rcpp::List smooth_nocov_cont(arma::vec delta, arma::mat gamma, double theta, arma::vec lambda, arma::vec y, arma::vec ntimes, arma::vec timeindex, arma::vec udiff, arma::cube expms);
RcppExport SEXP _ziphsmm_smooth_nocov_cont(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaSEXP, SEXP lambdaSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP, SEXP expmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_nocov_cont(delta, gamma, theta, lambda, y, ntimes, timeindex, udiff, expms));
    return rcpp_result_gen;
END_RCPP
}
// smooth_cov_cont
Rcpp::List smooth_cov_cont(arma::vec delta, arma::mat gamma, arma::vec thetaparm, arma::mat lambdaparm, arma::vec y, arma::mat x, arma::vec ntimes, arma::vec timeindex, arma::vec udiff, arma::cube expms);
RcppExport SEXP _ziphsmm_smooth_cov_cont(SEXP deltaSEXP, SEXP gammaSEXP, SEXP thetaparmSEXP, SEXP lambdaparmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP udiffSEXP, SEXP expmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaparm(thetaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdaparm(lambdaparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type udiff(udiffSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_cov_cont(delta, gamma, thetaparm, lambdaparm, y, x, ntimes, timeindex, udiff, expms));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_cov_gen_aft
arma::mat hsmm_cov_gen_aft(arma::vec delta, arma::vec lden, arma::mat dtparm, arma::vec tpmparm, arma::vec zeroparm, arma::mat emitparm, arma::vec trunc, int M, long dim, int ncolcovomega, arma::mat covp, arma::mat covomega, arma::mat covp1, arma::mat covpois);
RcppExport SEXP _ziphsmm_hsmm_cov_gen_aft(SEXP deltaSEXP, SEXP ldenSEXP, SEXP dtparmSEXP, SEXP tpmparmSEXP, SEXP zeroparmSEXP, SEXP emitparmSEXP, SEXP truncSEXP, SEXP MSEXP, SEXP dimSEXP, SEXP ncolcovomegaSEXP, SEXP covpSEXP, SEXP covomegaSEXP, SEXP covp1SEXP, SEXP covpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lden(ldenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dtparm(dtparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tpmparm(tpmparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroparm(zeroparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type emitparm(emitparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp(covpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cov_gen_aft(delta, lden, dtparm, tpmparm, zeroparm, emitparm, trunc, M, dim, ncolcovomega, covp, covomega, covp1, covpois));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_cov_loglik_aft
arma::mat hsmm_cov_loglik_aft(arma::vec y, arma::vec delta, arma::vec lden, arma::mat dtparm, arma::vec tpmparm, arma::vec zeroparm, arma::mat emitparm, arma::vec trunc, int M, int ncolcovomega, arma::mat covp, arma::mat covomega, arma::mat covp1, arma::mat covpois);
RcppExport SEXP _ziphsmm_hsmm_cov_loglik_aft(SEXP ySEXP, SEXP deltaSEXP, SEXP ldenSEXP, SEXP dtparmSEXP, SEXP tpmparmSEXP, SEXP zeroparmSEXP, SEXP emitparmSEXP, SEXP truncSEXP, SEXP MSEXP, SEXP ncolcovomegaSEXP, SEXP covpSEXP, SEXP covomegaSEXP, SEXP covp1SEXP, SEXP covpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lden(ldenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dtparm(dtparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tpmparm(tpmparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroparm(zeroparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type emitparm(emitparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp(covpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cov_loglik_aft(y, delta, lden, dtparm, tpmparm, zeroparm, emitparm, trunc, M, ncolcovomega, covp, covomega, covp1, covpois));
    return rcpp_result_gen;
END_RCPP
}
// retrieve_hsmm_aft
Rcpp::List retrieve_hsmm_aft(arma::vec allparm, arma::vec trunc, int M, int ncolcovomega, int ncolcovp, int ncolcovp1, int ncolcovpois);
RcppExport SEXP _ziphsmm_retrieve_hsmm_aft(SEXP allparmSEXP, SEXP truncSEXP, SEXP MSEXP, SEXP ncolcovomegaSEXP, SEXP ncolcovpSEXP, SEXP ncolcovp1SEXP, SEXP ncolcovpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp(ncolcovpSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(retrieve_hsmm_aft(allparm, trunc, M, ncolcovomega, ncolcovp, ncolcovp1, ncolcovpois));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_cov_nllk_aft
double hsmm_cov_nllk_aft(arma::vec y, arma::vec allparm, arma::vec trunc, int M, int ncolcovomega, int ncolcovp, int ncolcovp1, int ncolcovpois, arma::mat covp, arma::mat covomega, arma::mat covp1, arma::mat covpois);
RcppExport SEXP _ziphsmm_hsmm_cov_nllk_aft(SEXP ySEXP, SEXP allparmSEXP, SEXP truncSEXP, SEXP MSEXP, SEXP ncolcovomegaSEXP, SEXP ncolcovpSEXP, SEXP ncolcovp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpSEXP, SEXP covomegaSEXP, SEXP covp1SEXP, SEXP covpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp(ncolcovpSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp(covpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cov_nllk_aft(y, allparm, trunc, M, ncolcovomega, ncolcovp, ncolcovp1, ncolcovpois, covp, covomega, covp1, covpois));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_cov_viterbi_exp
arma::vec hsmm_cov_viterbi_exp(arma::vec y, arma::vec trunc, int M, arma::vec delta, arma::vec lden, arma::mat dtparm, arma::vec tpmparm, arma::vec zeroparm, arma::mat emitparm, int ncolcovomega, arma::mat covp, arma::mat covomega, arma::mat covp1, arma::mat covpois);
RcppExport SEXP _ziphsmm_hsmm_cov_viterbi_exp(SEXP ySEXP, SEXP truncSEXP, SEXP MSEXP, SEXP deltaSEXP, SEXP ldenSEXP, SEXP dtparmSEXP, SEXP tpmparmSEXP, SEXP zeroparmSEXP, SEXP emitparmSEXP, SEXP ncolcovomegaSEXP, SEXP covpSEXP, SEXP covomegaSEXP, SEXP covp1SEXP, SEXP covpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lden(ldenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dtparm(dtparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tpmparm(tpmparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroparm(zeroparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type emitparm(emitparmSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp(covpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_cov_viterbi_exp(y, trunc, M, delta, lden, dtparm, tpmparm, zeroparm, emitparm, ncolcovomega, covp, covomega, covp1, covpois));
    return rcpp_result_gen;
END_RCPP
}
// hmm_cov_gen_cont3
arma::mat hmm_cov_gen_cont3(arma::vec parm, int M, long dim, int ncolcovpi, arma::mat covpi, int ncolcovtrans, arma::mat covtrans, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, arma::vec zeroindex, arma::vec timeindex);
RcppExport SEXP _ziphsmm_hmm_cov_gen_cont3(SEXP parmSEXP, SEXP MSEXP, SEXP dimSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovtransSEXP, SEXP covtransSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP zeroindexSEXP, SEXP timeindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covtrans(covtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_cov_gen_cont3(parm, M, dim, ncolcovpi, covpi, ncolcovtrans, covtrans, ncolcovp1, covp1, ncolcovpois, covpois, zeroindex, timeindex));
    return rcpp_result_gen;
END_RCPP
}
// ziploglik_cov_cont3
double ziploglik_cov_cont3(arma::vec delta, arma::mat gammaparm, arma::vec thetaparm, arma::mat lambdaparm, arma::vec y, arma::mat x, arma::vec ntimes, arma::vec timeindex);
RcppExport SEXP _ziphsmm_ziploglik_cov_cont3(SEXP deltaSEXP, SEXP gammaparmSEXP, SEXP thetaparmSEXP, SEXP lambdaparmSEXP, SEXP ySEXP, SEXP xSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gammaparm(gammaparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaparm(thetaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdaparm(lambdaparmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    rcpp_result_gen = Rcpp::wrap(ziploglik_cov_cont3(delta, gammaparm, thetaparm, lambdaparm, y, x, ntimes, timeindex));
    return rcpp_result_gen;
END_RCPP
}
// getallexpm3
arma::cube getallexpm3(int M, arma::mat gammaparm, arma::mat tpmcov, arma::vec timeindex);
RcppExport SEXP _ziphsmm_getallexpm3(SEXP MSEXP, SEXP gammaparmSEXP, SEXP tpmcovSEXP, SEXP timeindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gammaparm(gammaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tpmcov(tpmcovSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    rcpp_result_gen = Rcpp::wrap(getallexpm3(M, gammaparm, tpmcov, timeindex));
    return rcpp_result_gen;
END_RCPP
}
// getnodeprob_cov_cont
arma::mat getnodeprob_cov_cont(arma::vec y, arma::mat x, arma::vec thetaparm, arma::mat lambdaparm, int m);
RcppExport SEXP _ziphsmm_getnodeprob_cov_cont(SEXP ySEXP, SEXP xSEXP, SEXP thetaparmSEXP, SEXP lambdaparmSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaparm(thetaparmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdaparm(lambdaparmSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(getnodeprob_cov_cont(y, x, thetaparm, lambdaparm, m));
    return rcpp_result_gen;
END_RCPP
}
// fb_cont3
Rcpp::List fb_cont3(arma::vec Pi, arma::cube expms, arma::mat nodeprob, long dim, arma::vec ntimes, arma::vec timeindex);
RcppExport SEXP _ziphsmm_fb_cont3(SEXP PiSEXP, SEXP expmsSEXP, SEXP nodeprobSEXP, SEXP dimSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type expms(expmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nodeprob(nodeprobSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    rcpp_result_gen = Rcpp::wrap(fb_cont3(Pi, expms, nodeprob, dim, ntimes, timeindex));
    return rcpp_result_gen;
END_RCPP
}
// retrieve_cov_cont3
Rcpp::List retrieve_cov_cont3(arma::vec parm, int M, int ncolx);
RcppExport SEXP _ziphsmm_retrieve_cov_cont3(SEXP parmSEXP, SEXP MSEXP, SEXP ncolxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ncolx(ncolxSEXP);
    rcpp_result_gen = Rcpp::wrap(retrieve_cov_cont3(parm, M, ncolx));
    return rcpp_result_gen;
END_RCPP
}
// zipnegloglik_cov_cont3
double zipnegloglik_cov_cont3(arma::vec parm, arma::vec y, arma::mat covariates, int M, arma::vec ntimes, arma::vec timeindex);
RcppExport SEXP _ziphsmm_zipnegloglik_cov_cont3(SEXP parmSEXP, SEXP ySEXP, SEXP covariatesSEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    rcpp_result_gen = Rcpp::wrap(zipnegloglik_cov_cont3(parm, y, covariates, M, ntimes, timeindex));
    return rcpp_result_gen;
END_RCPP
}
// convolution
arma::vec convolution(arma::vec vec1, arma::vec vec2);
RcppExport SEXP _ziphsmm_convolution(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(convolution(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// smprcpp
arma::mat smprcpp(arma::mat parmmat, int M, double time, int ngrid, double lower);
RcppExport SEXP _ziphsmm_smprcpp(SEXP parmmatSEXP, SEXP MSEXP, SEXP timeSEXP, SEXP ngridSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type parmmat(parmmatSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type ngrid(ngridSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(smprcpp(parmmat, M, time, ngrid, lower));
    return rcpp_result_gen;
END_RCPP
}
