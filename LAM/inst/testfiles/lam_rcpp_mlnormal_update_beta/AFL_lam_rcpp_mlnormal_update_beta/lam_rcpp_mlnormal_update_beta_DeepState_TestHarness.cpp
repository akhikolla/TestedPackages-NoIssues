// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// lam_rcpp_mlnormal_update_beta_DeepState_TestHarness_generation.cpp and lam_rcpp_mlnormal_update_beta_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List lam_rcpp_mlnormal_update_beta(Rcpp::NumericVector dim_id, Rcpp::NumericVector startIndex, Rcpp::NumericVector endIndex, int G, Rcpp::NumericMatrix X, Rcpp::NumericVector y, Rcpp::NumericMatrix V1);

TEST(LAM_deepstate_test,lam_rcpp_mlnormal_update_beta_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector dim_id  = RcppDeepState_NumericVector();
  std::string dim_id_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LAM/inst/testfiles/lam_rcpp_mlnormal_update_beta/AFL_lam_rcpp_mlnormal_update_beta/afl_inputs/" + std::to_string(t) + "_dim_id.qs";
  qs::c_qsave(dim_id,dim_id_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dim_id values: "<< dim_id << std::endl;
  NumericVector startIndex  = RcppDeepState_NumericVector();
  std::string startIndex_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LAM/inst/testfiles/lam_rcpp_mlnormal_update_beta/AFL_lam_rcpp_mlnormal_update_beta/afl_inputs/" + std::to_string(t) + "_startIndex.qs";
  qs::c_qsave(startIndex,startIndex_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "startIndex values: "<< startIndex << std::endl;
  NumericVector endIndex  = RcppDeepState_NumericVector();
  std::string endIndex_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LAM/inst/testfiles/lam_rcpp_mlnormal_update_beta/AFL_lam_rcpp_mlnormal_update_beta/afl_inputs/" + std::to_string(t) + "_endIndex.qs";
  qs::c_qsave(endIndex,endIndex_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "endIndex values: "<< endIndex << std::endl;
  IntegerVector G(1);
  G[0]  = RcppDeepState_int();
  std::string G_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LAM/inst/testfiles/lam_rcpp_mlnormal_update_beta/AFL_lam_rcpp_mlnormal_update_beta/afl_inputs/" + std::to_string(t) + "_G.qs";
  qs::c_qsave(G,G_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "G values: "<< G << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LAM/inst/testfiles/lam_rcpp_mlnormal_update_beta/AFL_lam_rcpp_mlnormal_update_beta/afl_inputs/" + std::to_string(t) + "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LAM/inst/testfiles/lam_rcpp_mlnormal_update_beta/AFL_lam_rcpp_mlnormal_update_beta/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericMatrix V1  = RcppDeepState_NumericMatrix();
  std::string V1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/LAM/inst/testfiles/lam_rcpp_mlnormal_update_beta/AFL_lam_rcpp_mlnormal_update_beta/afl_inputs/" + std::to_string(t) + "_V1.qs";
  qs::c_qsave(V1,V1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "V1 values: "<< V1 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    lam_rcpp_mlnormal_update_beta(dim_id,startIndex,endIndex,G[0],X,y,V1);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
