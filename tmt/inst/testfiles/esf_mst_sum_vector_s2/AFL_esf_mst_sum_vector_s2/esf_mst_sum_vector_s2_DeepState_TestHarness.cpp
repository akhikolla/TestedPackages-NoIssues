// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// esf_mst_sum_vector_s2_DeepState_TestHarness_generation.cpp and esf_mst_sum_vector_s2_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector esf_mst_sum_vector_s2(Rcpp::NumericVector eps, int m, Rcpp::NumericVector rcum, Rcpp::NumericVector eps_position, Rcpp::NumericVector minSolved, Rcpp::NumericVector maxSolved, Rcpp::NumericVector minSolved_design, Rcpp::NumericVector maxSolved_design);

TEST(tmt_deepstate_test,esf_mst_sum_vector_s2_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector eps  = RcppDeepState_NumericVector();
  std::string eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_eps.qs";
  qs::c_qsave(eps,eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps values: "<< eps << std::endl;
  IntegerVector m(1);
  m[0]  = RcppDeepState_int();
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_m.qs";
  qs::c_qsave(m,m_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m values: "<< m << std::endl;
  NumericVector rcum  = RcppDeepState_NumericVector();
  std::string rcum_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_rcum.qs";
  qs::c_qsave(rcum,rcum_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rcum values: "<< rcum << std::endl;
  NumericVector eps_position  = RcppDeepState_NumericVector();
  std::string eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_eps.qs";
  std::string eps_position_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_eps_position.qs";
  qs::c_qsave(eps_position,eps_position_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps_position values: "<< eps_position << std::endl;
  NumericVector minSolved  = RcppDeepState_NumericVector();
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_m.qs";
  std::string minSolved_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_minSolved.qs";
  qs::c_qsave(minSolved,minSolved_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minSolved values: "<< minSolved << std::endl;
  NumericVector maxSolved  = RcppDeepState_NumericVector();
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_m.qs";
  std::string maxSolved_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_maxSolved.qs";
  qs::c_qsave(maxSolved,maxSolved_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxSolved values: "<< maxSolved << std::endl;
  NumericVector minSolved_design  = RcppDeepState_NumericVector();
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_m.qs";
  std::string minSolved_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_minSolved.qs";
  std::string minSolved_design_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_minSolved_design.qs";
  qs::c_qsave(minSolved_design,minSolved_design_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minSolved_design values: "<< minSolved_design << std::endl;
  NumericVector maxSolved_design  = RcppDeepState_NumericVector();
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_m.qs";
  std::string maxSolved_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_maxSolved.qs";
  std::string maxSolved_design_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tmt/inst/testfiles/esf_mst_sum_vector_s2/AFL_esf_mst_sum_vector_s2/afl_inputs/" + std::to_string(t) + "_maxSolved_design.qs";
  qs::c_qsave(maxSolved_design,maxSolved_design_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxSolved_design values: "<< maxSolved_design << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    esf_mst_sum_vector_s2(eps,m[0],rcum,eps_position,minSolved,maxSolved,minSolved_design,maxSolved_design);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
