// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// lockInterface
Rcpp::List lockInterface(const char * pathIn, bool exclusive);
RcppExport SEXP _flock_lockInterface(SEXP pathInSEXP, SEXP exclusiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type pathIn(pathInSEXP);
    Rcpp::traits::input_parameter< bool >::type exclusive(exclusiveSEXP);
    rcpp_result_gen = Rcpp::wrap(lockInterface(pathIn, exclusive));
    return rcpp_result_gen;
END_RCPP
}
// unlockInterface
void unlockInterface(int descriptorIn);
RcppExport SEXP _flock_unlockInterface(SEXP descriptorInSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type descriptorIn(descriptorInSEXP);
    unlockInterface(descriptorIn);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flock_lockInterface", (DL_FUNC) &_flock_lockInterface, 2},
    {"_flock_unlockInterface", (DL_FUNC) &_flock_unlockInterface, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_flock(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
