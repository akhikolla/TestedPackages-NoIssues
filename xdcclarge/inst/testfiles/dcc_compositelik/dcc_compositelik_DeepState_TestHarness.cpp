// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dcc_compositelik_DeepState_TestHarness_generation.cpp and dcc_compositelik_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double dcc_compositelik(double alpha, double beta, arma::mat ht, arma::mat residuals, arma::mat stdresids, arma::mat uncR, int nobs, int ndim);

TEST(xdcclarge_deepstate_test,dcc_compositelik_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  qs::c_qsave(alpha,"/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/dcc_compositelik/inputs/alpha.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_double();
  qs::c_qsave(beta,"/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/dcc_compositelik/inputs/beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  std::ofstream ht_stream;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_mat();
  ht_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/dcc_compositelik/inputs/ht");
  ht_stream << ht;
  std::cout << "ht values: "<< ht << std::endl;
  ht_stream.close();
  std::ofstream residuals_stream;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_mat();
  residuals_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/dcc_compositelik/inputs/residuals");
  residuals_stream << residuals;
  std::cout << "residuals values: "<< residuals << std::endl;
  residuals_stream.close();
  std::ofstream stdresids_stream;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_mat();
  stdresids_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/dcc_compositelik/inputs/stdresids");
  stdresids_stream << stdresids;
  std::cout << "stdresids values: "<< stdresids << std::endl;
  stdresids_stream.close();
  std::ofstream uncR_stream;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_mat();
  uncR_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/dcc_compositelik/inputs/uncR");
  uncR_stream << uncR;
  std::cout << "uncR values: "<< uncR << std::endl;
  uncR_stream.close();
  IntegerVector nobs(1);
  nobs[0]  = RcppDeepState_int();
  qs::c_qsave(nobs,"/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/dcc_compositelik/inputs/nobs.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nobs values: "<< nobs << std::endl;
  IntegerVector ndim(1);
  ndim[0]  = RcppDeepState_int();
  qs::c_qsave(ndim,"/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/dcc_compositelik/inputs/ndim.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndim values: "<< ndim << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dcc_compositelik(alpha[0],beta[0],ht,residuals,stdresids,uncR,nobs[0],ndim[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
