// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cdcc_construct_DeepState_TestHarness_generation.cpp and cdcc_construct_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::mat cdcc_construct(double alpha, double beta, arma::mat stdresids, arma::mat uncR, int nobs, int ndim, int ts);

TEST(xdcclarge_deepstate_test,cdcc_construct_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/cdcc_construct/AFL_cdcc_construct/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_double();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/cdcc_construct/AFL_cdcc_construct/afl_inputs/" + std::to_string(t) + "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  std::ofstream stdresids_stream;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_mat();
  stdresids_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/cdcc_construct/inputs/stdresids");
  stdresids_stream << stdresids;
  std::cout << "stdresids values: "<< stdresids << std::endl;
  stdresids_stream.close();
  std::ofstream uncR_stream;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_mat();
  uncR_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/cdcc_construct/inputs/uncR");
  uncR_stream << uncR;
  std::cout << "uncR values: "<< uncR << std::endl;
  uncR_stream.close();
  IntegerVector nobs(1);
  nobs[0]  = RcppDeepState_int();
  std::string nobs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/cdcc_construct/AFL_cdcc_construct/afl_inputs/" + std::to_string(t) + "_nobs.qs";
  qs::c_qsave(nobs,nobs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nobs values: "<< nobs << std::endl;
  IntegerVector ndim(1);
  ndim[0]  = RcppDeepState_int();
  std::string ndim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/cdcc_construct/AFL_cdcc_construct/afl_inputs/" + std::to_string(t) + "_ndim.qs";
  qs::c_qsave(ndim,ndim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndim values: "<< ndim << std::endl;
  IntegerVector ts(1);
  ts[0]  = RcppDeepState_int();
  std::string ts_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xdcclarge/inst/testfiles/cdcc_construct/AFL_cdcc_construct/afl_inputs/" + std::to_string(t) + "_ts.qs";
  qs::c_qsave(ts,ts_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ts values: "<< ts << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cdcc_construct(alpha[0],beta[0],stdresids,uncR,nobs[0],ndim[0],ts[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
