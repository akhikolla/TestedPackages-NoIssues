// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rat_DeepState_TestHarness_generation.cpp and rat_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerMatrix rat(NumericVector x, double eps, int maxConv);

TEST(fractional_deepstate_test,rat_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fractional/inst/testfiles/rat/libFuzzer_rat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector eps(1);
  eps[0]  = RcppDeepState_double();
  std::string eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fractional/inst/testfiles/rat/libFuzzer_rat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_eps.qs";
  qs::c_qsave(eps,eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps values: "<< eps << std::endl;
  IntegerVector maxConv(1);
  maxConv[0]  = RcppDeepState_int();
  std::string maxConv_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fractional/inst/testfiles/rat/libFuzzer_rat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxConv.qs";
  qs::c_qsave(maxConv,maxConv_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxConv values: "<< maxConv << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rat(x,eps[0],maxConv[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
