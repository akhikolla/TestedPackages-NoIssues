// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/grpCox.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// stdQ
List stdQ(Eigen::MatrixXd X);
static SEXP _grpCox_stdQ_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(stdQ(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_stdQ(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_stdQ_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// plQ
double plQ(Eigen::VectorXd& xb, Eigen::VectorXi& nevent, Eigen::VectorXi& nevent1, Eigen::VectorXi& loc1, int& n);
static SEXP _grpCox_plQ_try(SEXP xbSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(plQ(xb, nevent, nevent1, loc1, n));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_plQ(SEXP xbSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_plQ_try(xbSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dfQ
Eigen::VectorXd dfQ(Eigen::VectorXd& xb, Eigen::VectorXd& tevent, int& N, Eigen::VectorXi& nevent, Eigen::VectorXi& nevent1, Eigen::VectorXi& loc1, int& n);
static SEXP _grpCox_dfQ_try(SEXP xbSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type tevent(teventSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(dfQ(xb, tevent, N, nevent, nevent1, loc1, n));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_dfQ(SEXP xbSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_dfQ_try(xbSEXP, teventSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// d2Q
Eigen::VectorXd d2Q(Eigen::VectorXd& xb, Eigen::VectorXd& tevent, int& N, Eigen::VectorXi& nevent, Eigen::VectorXi& nevent1, Eigen::VectorXi& loc1, int& n);
static SEXP _grpCox_d2Q_try(SEXP xbSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type tevent(teventSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(d2Q(xb, tevent, N, nevent, nevent1, loc1, n));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_d2Q(SEXP xbSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_d2Q_try(xbSEXP, teventSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_lambda
double max_lambda(List& dt);
static SEXP _grpCox_max_lambda_try(SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List& >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(max_lambda(dt));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_max_lambda(SEXP dtSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_max_lambda_try(dtSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// convd2n
NumericVector convd2n(Eigen::VectorXd X);
static SEXP _grpCox_convd2n_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(convd2n(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_convd2n(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_convd2n_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// isNA
int isNA(NumericVector x);
static SEXP _grpCox_isNA_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isNA(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_isNA(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_isNA_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// isInf
int isInf(NumericVector x);
static SEXP _grpCox_isInf_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isInf(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_isInf(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_isInf_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compare
int compare(const char* cx, const char* cy);
static SEXP _grpCox_compare_try(SEXP cxSEXP, SEXP cySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const char* >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< const char* >::type cy(cySEXP);
    rcpp_result_gen = Rcpp::wrap(compare(cx, cy));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_compare(SEXP cxSEXP, SEXP cySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_compare_try(cxSEXP, cySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// grpCoxQ
List grpCoxQ(List& dt, const char* penalty, Eigen::VectorXd lambda, int nlambda, double gamma, double thresh, int maxit);
static SEXP _grpCox_grpCoxQ_try(SEXP dtSEXP, SEXP penaltySEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP gammaSEXP, SEXP threshSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const char* >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(grpCoxQ(dt, penalty, lambda, nlambda, gamma, thresh, maxit));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_grpCoxQ(SEXP dtSEXP, SEXP penaltySEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP gammaSEXP, SEXP threshSEXP, SEXP maxitSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_grpCoxQ_try(dtSEXP, penaltySEXP, lambdaSEXP, nlambdaSEXP, gammaSEXP, threshSEXP, maxitSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cvgrpCoxQ
List cvgrpCoxQ(List& dt, const char* penalty, Eigen::VectorXd lambda, int nlambda, double gamma, double thresh, int maxit, List& dF);
static SEXP _grpCox_cvgrpCoxQ_try(SEXP dtSEXP, SEXP penaltySEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP gammaSEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP dFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const char* >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< List& >::type dF(dFSEXP);
    rcpp_result_gen = Rcpp::wrap(cvgrpCoxQ(dt, penalty, lambda, nlambda, gamma, thresh, maxit, dF));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _grpCox_cvgrpCoxQ(SEXP dtSEXP, SEXP penaltySEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP gammaSEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP dFSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_grpCox_cvgrpCoxQ_try(dtSEXP, penaltySEXP, lambdaSEXP, nlambdaSEXP, gammaSEXP, threshSEXP, maxitSEXP, dFSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _grpCox_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*stdQ)(Eigen::MatrixXd)");
        signatures.insert("double(*plQ)(Eigen::VectorXd&,Eigen::VectorXi&,Eigen::VectorXi&,Eigen::VectorXi&,int&)");
        signatures.insert("Eigen::VectorXd(*dfQ)(Eigen::VectorXd&,Eigen::VectorXd&,int&,Eigen::VectorXi&,Eigen::VectorXi&,Eigen::VectorXi&,int&)");
        signatures.insert("Eigen::VectorXd(*d2Q)(Eigen::VectorXd&,Eigen::VectorXd&,int&,Eigen::VectorXi&,Eigen::VectorXi&,Eigen::VectorXi&,int&)");
        signatures.insert("double(*max_lambda)(List&)");
        signatures.insert("NumericVector(*convd2n)(Eigen::VectorXd)");
        signatures.insert("int(*isNA)(NumericVector)");
        signatures.insert("int(*isInf)(NumericVector)");
        signatures.insert("int(*compare)(const char*,const char*)");
        signatures.insert("List(*grpCoxQ)(List&,const char*,Eigen::VectorXd,int,double,double,int)");
        signatures.insert("List(*cvgrpCoxQ)(List&,const char*,Eigen::VectorXd,int,double,double,int,List&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _grpCox_RcppExport_registerCCallable() { 
    R_RegisterCCallable("grpCox", "_grpCox_stdQ", (DL_FUNC)_grpCox_stdQ_try);
    R_RegisterCCallable("grpCox", "_grpCox_plQ", (DL_FUNC)_grpCox_plQ_try);
    R_RegisterCCallable("grpCox", "_grpCox_dfQ", (DL_FUNC)_grpCox_dfQ_try);
    R_RegisterCCallable("grpCox", "_grpCox_d2Q", (DL_FUNC)_grpCox_d2Q_try);
    R_RegisterCCallable("grpCox", "_grpCox_max_lambda", (DL_FUNC)_grpCox_max_lambda_try);
    R_RegisterCCallable("grpCox", "_grpCox_convd2n", (DL_FUNC)_grpCox_convd2n_try);
    R_RegisterCCallable("grpCox", "_grpCox_isNA", (DL_FUNC)_grpCox_isNA_try);
    R_RegisterCCallable("grpCox", "_grpCox_isInf", (DL_FUNC)_grpCox_isInf_try);
    R_RegisterCCallable("grpCox", "_grpCox_compare", (DL_FUNC)_grpCox_compare_try);
    R_RegisterCCallable("grpCox", "_grpCox_grpCoxQ", (DL_FUNC)_grpCox_grpCoxQ_try);
    R_RegisterCCallable("grpCox", "_grpCox_cvgrpCoxQ", (DL_FUNC)_grpCox_cvgrpCoxQ_try);
    R_RegisterCCallable("grpCox", "_grpCox_RcppExport_validate", (DL_FUNC)_grpCox_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_grpCox_stdQ", (DL_FUNC) &_grpCox_stdQ, 1},
    {"_grpCox_plQ", (DL_FUNC) &_grpCox_plQ, 5},
    {"_grpCox_dfQ", (DL_FUNC) &_grpCox_dfQ, 7},
    {"_grpCox_d2Q", (DL_FUNC) &_grpCox_d2Q, 7},
    {"_grpCox_max_lambda", (DL_FUNC) &_grpCox_max_lambda, 1},
    {"_grpCox_convd2n", (DL_FUNC) &_grpCox_convd2n, 1},
    {"_grpCox_isNA", (DL_FUNC) &_grpCox_isNA, 1},
    {"_grpCox_isInf", (DL_FUNC) &_grpCox_isInf, 1},
    {"_grpCox_compare", (DL_FUNC) &_grpCox_compare, 2},
    {"_grpCox_grpCoxQ", (DL_FUNC) &_grpCox_grpCoxQ, 7},
    {"_grpCox_cvgrpCoxQ", (DL_FUNC) &_grpCox_cvgrpCoxQ, 8},
    {"_grpCox_RcppExport_registerCCallable", (DL_FUNC) &_grpCox_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_grpCox(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
