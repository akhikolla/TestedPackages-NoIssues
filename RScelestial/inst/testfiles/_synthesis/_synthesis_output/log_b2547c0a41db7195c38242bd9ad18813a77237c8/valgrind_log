<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: ./_synthesis_DeepState_TestHarness --input_test_file /home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis/_synthesis_output/b2547c0a41db7195c38242bd9ad18813a77237c8.fail</line>
</preamble>

<pid>592877</pid>
<ppid>592876</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--xml=yes</arg>
    <arg>--xml-file=/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis/_synthesis_output/log_b2547c0a41db7195c38242bd9ad18813a77237c8/valgrind_log</arg>
    <arg>--tool=memcheck</arg>
    <arg>--leak-check=yes</arg>
  </vargv>
  <argv>
    <exe>./_synthesis_DeepState_TestHarness</exe>
    <arg>--input_test_file</arg>
    <arg>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis/_synthesis_output/b2547c0a41db7195c38242bd9ad18813a77237c8.fail</arg>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.025 </time>
</status>

<clientmsg>
  <tid>1</tid>
  <text>new/new[] failed and should throw an exception, but Valgrind
  </text>
</clientmsg>
<clientmsg>
  <tid>1</tid>
  <text>   cannot throw exceptions and so is aborting instead.  Sorry.
  </text>
  <stack>
    <frame>
      <ip>0x483B3CC</ip>
      <obj>/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
    </frame>
    <frame>
      <ip>0x483BED5</ip>
      <obj>/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x4D31005</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src/RScelestial.so</obj>
      <fn>allocate</fn>
      <dir>/usr/include/c++/9/ext</dir>
      <file>new_allocator.h</file>
      <line>114</line>
    </frame>
    <frame>
      <ip>0x4D31005</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src/RScelestial.so</obj>
      <fn>allocate</fn>
      <dir>/usr/include/c++/9/bits</dir>
      <file>alloc_traits.h</file>
      <line>444</line>
    </frame>
    <frame>
      <ip>0x4D31005</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src/RScelestial.so</obj>
      <fn>_M_allocate</fn>
      <dir>/usr/include/c++/9/bits</dir>
      <file>stl_vector.h</file>
      <line>343</line>
    </frame>
    <frame>
      <ip>0x4D31005</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src/RScelestial.so</obj>
      <fn>_M_create_storage</fn>
      <dir>/usr/include/c++/9/bits</dir>
      <file>stl_vector.h</file>
      <line>358</line>
    </frame>
    <frame>
      <ip>0x4D31005</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src/RScelestial.so</obj>
      <fn>_Vector_base</fn>
      <dir>/usr/include/c++/9/bits</dir>
      <file>stl_vector.h</file>
      <line>302</line>
    </frame>
    <frame>
      <ip>0x4D31005</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src/RScelestial.so</obj>
      <fn>vector</fn>
      <dir>/usr/include/c++/9/bits</dir>
      <file>stl_vector.h</file>
      <line>521</line>
    </frame>
    <frame>
      <ip>0x4D31005</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src/RScelestial.so</obj>
      <fn>synth::sample(int)</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src</dir>
      <file>synthesis.h</file>
      <line>198</line>
    </frame>
    <frame>
      <ip>0x4D360AF</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src/RScelestial.so</obj>
      <fn>_synthesis(int, int, int, double, double, double, double, double, double, double, double, double, int)</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/src</dir>
      <file>scelestial.cc</file>
      <line>306</line>
    </frame>
    <frame>
      <ip>0x40B76D</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis/_synthesis_DeepState_TestHarness</obj>
      <fn>DeepState_Test_RScelestial_deepstate_test__synthesis_test()</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis</dir>
      <file>_synthesis_DeepState_TestHarness.cpp</file>
      <line>83</line>
    </frame>
    <frame>
      <ip>0x409B58</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis/_synthesis_DeepState_TestHarness</obj>
      <fn>DeepState_Run_RScelestial_deepstate_test__synthesis_test()</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis</dir>
      <file>_synthesis_DeepState_TestHarness.cpp</file>
      <line>13</line>
    </frame>
    <frame>
      <ip>0x41ECE8</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis/_synthesis_DeepState_TestHarness</obj>
      <fn>DeepState_RunTest.isra.0</fn>
    </frame>
    <frame>
      <ip>0x41EF89</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis/_synthesis_DeepState_TestHarness</obj>
      <fn>DeepState_ForkAndRunTest</fn>
    </frame>
    <frame>
      <ip>0x41F064</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis/_synthesis_DeepState_TestHarness</obj>
      <fn>DeepState_RunSavedTestCase</fn>
    </frame>
    <frame>
      <ip>0x407665</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/RScelestial/inst/testfiles/_synthesis/_synthesis_DeepState_TestHarness</obj>
      <fn>main</fn>
    </frame>
  </stack>
</clientmsg>

<status>
  <state>FINISHED</state>
  <time>00:00:05:22.717 </time>
</status>

<errorcounts>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>


<status>
  <state>FINISHED</state>
  <time>00:00:05:40.892 </time>
</status>

<errorcounts>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

