// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dirichlet_fp_DeepState_TestHarness_generation.cpp and dirichlet_fp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector dirichlet_fp(NumericVector alpha, NumericVector logx_mean, int maxit, double abstol);

TEST(MCMCprecision_deepstate_test,dirichlet_fp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector alpha  = RcppDeepState_NumericVector();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MCMCprecision/inst/testfiles/dirichlet_fp/AFL_dirichlet_fp/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector logx_mean  = RcppDeepState_NumericVector();
  std::string logx_mean_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MCMCprecision/inst/testfiles/dirichlet_fp/AFL_dirichlet_fp/afl_inputs/" + std::to_string(t) + "_logx_mean.qs";
  qs::c_qsave(logx_mean,logx_mean_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "logx_mean values: "<< logx_mean << std::endl;
  IntegerVector maxit(1);
  maxit[0]  = RcppDeepState_int();
  std::string maxit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MCMCprecision/inst/testfiles/dirichlet_fp/AFL_dirichlet_fp/afl_inputs/" + std::to_string(t) + "_maxit.qs";
  qs::c_qsave(maxit,maxit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxit values: "<< maxit << std::endl;
  NumericVector abstol(1);
  abstol[0]  = RcppDeepState_double();
  std::string abstol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MCMCprecision/inst/testfiles/dirichlet_fp/AFL_dirichlet_fp/afl_inputs/" + std::to_string(t) + "_abstol.qs";
  qs::c_qsave(abstol,abstol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "abstol values: "<< abstol << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dirichlet_fp(alpha,logx_mean,maxit[0],abstol[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
