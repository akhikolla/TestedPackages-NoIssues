// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gaussian_cpp
List gaussian_cpp();
RcppExport SEXP _mDAG_gaussian_cpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gaussian_cpp());
    return rcpp_result_gen;
END_RCPP
}
// binomial_cpp
List binomial_cpp();
RcppExport SEXP _mDAG_binomial_cpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(binomial_cpp());
    return rcpp_result_gen;
END_RCPP
}
// poisson_cpp
List poisson_cpp();
RcppExport SEXP _mDAG_poisson_cpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(poisson_cpp());
    return rcpp_result_gen;
END_RCPP
}
// glm_fit_cpp
List glm_fit_cpp(arma::mat x, arma::mat y, std::vector<double> weights, List family);
RcppExport SEXP _mDAG_glm_fit_cpp(SEXP xSEXP, SEXP ySEXP, SEXP weightsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< List >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(glm_fit_cpp(x, y, weights, family));
    return rcpp_result_gen;
END_RCPP
}
// logLik_cpp
double logLik_cpp(List fit, int samplesize);
RcppExport SEXP _mDAG_logLik_cpp(SEXP fitSEXP, SEXP samplesizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< int >::type samplesize(samplesizeSEXP);
    rcpp_result_gen = Rcpp::wrap(logLik_cpp(fit, samplesize));
    return rcpp_result_gen;
END_RCPP
}
// logistf_control_cpp
List logistf_control_cpp();
RcppExport SEXP _mDAG_logistf_control_cpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(logistf_control_cpp());
    return rcpp_result_gen;
END_RCPP
}
// logistf_fit_cpp
List logistf_fit_cpp(arma::mat x, arma::mat y, std::vector<double> weights, List control);
RcppExport SEXP _mDAG_logistf_fit_cpp(SEXP xSEXP, SEXP ySEXP, SEXP weightsSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(logistf_fit_cpp(x, y, weights, control));
    return rcpp_result_gen;
END_RCPP
}
// multinom_BIC_cpp
double multinom_BIC_cpp(arma::mat x, arma::mat y, std::vector<double> weights);
RcppExport SEXP _mDAG_multinom_BIC_cpp(SEXP xSEXP, SEXP ySEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(multinom_BIC_cpp(x, y, weights));
    return rcpp_result_gen;
END_RCPP
}
// ScoreNodeWithNoneParents
double ScoreNodeWithNoneParents(std::vector< std::string > type, std::vector<int> level, int v, arma::mat data, std::vector<double> weights);
RcppExport SEXP _mDAG_ScoreNodeWithNoneParents(SEXP typeSEXP, SEXP levelSEXP, SEXP vSEXP, SEXP dataSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ScoreNodeWithNoneParents(type, level, v, data, weights));
    return rcpp_result_gen;
END_RCPP
}
// InitScore
NumericVector InitScore(std::vector< std::string > type, std::vector<int> level, arma::mat data, std::vector<double> weights);
RcppExport SEXP _mDAG_InitScore(SEXP typeSEXP, SEXP levelSEXP, SEXP dataSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type level(levelSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(InitScore(type, level, data, weights));
    return rcpp_result_gen;
END_RCPP
}
// ReturnParents
NumericVector ReturnParents(int i, IntegerMatrix AdjMat);
RcppExport SEXP _mDAG_ReturnParents(SEXP iSEXP, SEXP AdjMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type AdjMat(AdjMatSEXP);
    rcpp_result_gen = Rcpp::wrap(ReturnParents(i, AdjMat));
    return rcpp_result_gen;
END_RCPP
}
// subcolMatrix
arma::mat subcolMatrix(arma::mat matrix, NumericVector index);
RcppExport SEXP _mDAG_subcolMatrix(SEXP matrixSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(subcolMatrix(matrix, index));
    return rcpp_result_gen;
END_RCPP
}
// ScoreGraph
NumericVector ScoreGraph(std::vector< std::string > type, std::vector<int> level, arma::mat data, std::vector<double> weights, IntegerMatrix AdjMat);
RcppExport SEXP _mDAG_ScoreGraph(SEXP typeSEXP, SEXP levelSEXP, SEXP dataSEXP, SEXP weightsSEXP, SEXP AdjMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type level(levelSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type AdjMat(AdjMatSEXP);
    rcpp_result_gen = Rcpp::wrap(ScoreGraph(type, level, data, weights, AdjMat));
    return rcpp_result_gen;
END_RCPP
}
// SettingEdges
List SettingEdges(NumericVector scores, arma::mat data, List rst, std::vector< std::string > type, std::vector<int> level, std::vector<int> SNP, std::vector<double> weights);
RcppExport SEXP _mDAG_SettingEdges(SEXP scoresSEXP, SEXP dataSEXP, SEXP rstSEXP, SEXP typeSEXP, SEXP levelSEXP, SEXP SNPSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type rst(rstSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type level(levelSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type SNP(SNPSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(SettingEdges(scores, data, rst, type, level, SNP, weights));
    return rcpp_result_gen;
END_RCPP
}
// AddReverseDelete
void AddReverseDelete(IntegerMatrix AdjMat, NumericVector scores, arma::mat data, List rst, std::vector< std::string > type, std::vector<int> level, std::vector<int> SNP, std::vector<double> weights);
RcppExport SEXP _mDAG_AddReverseDelete(SEXP AdjMatSEXP, SEXP scoresSEXP, SEXP dataSEXP, SEXP rstSEXP, SEXP typeSEXP, SEXP levelSEXP, SEXP SNPSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type AdjMat(AdjMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type rst(rstSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type level(levelSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type SNP(SNPSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    AddReverseDelete(AdjMat, scores, data, rst, type, level, SNP, weights);
    return R_NilValue;
END_RCPP
}
// GreedySearch
IntegerMatrix GreedySearch(arma::mat data, std::vector< std::string > type, std::vector<int> level, std::vector<int> SNP, List rst, std::vector<double> weights);
RcppExport SEXP _mDAG_GreedySearch(SEXP dataSEXP, SEXP typeSEXP, SEXP levelSEXP, SEXP SNPSEXP, SEXP rstSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type level(levelSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type SNP(SNPSEXP);
    Rcpp::traits::input_parameter< List >::type rst(rstSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(GreedySearch(data, type, level, SNP, rst, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mDAG_gaussian_cpp", (DL_FUNC) &_mDAG_gaussian_cpp, 0},
    {"_mDAG_binomial_cpp", (DL_FUNC) &_mDAG_binomial_cpp, 0},
    {"_mDAG_poisson_cpp", (DL_FUNC) &_mDAG_poisson_cpp, 0},
    {"_mDAG_glm_fit_cpp", (DL_FUNC) &_mDAG_glm_fit_cpp, 4},
    {"_mDAG_logLik_cpp", (DL_FUNC) &_mDAG_logLik_cpp, 2},
    {"_mDAG_logistf_control_cpp", (DL_FUNC) &_mDAG_logistf_control_cpp, 0},
    {"_mDAG_logistf_fit_cpp", (DL_FUNC) &_mDAG_logistf_fit_cpp, 4},
    {"_mDAG_multinom_BIC_cpp", (DL_FUNC) &_mDAG_multinom_BIC_cpp, 3},
    {"_mDAG_ScoreNodeWithNoneParents", (DL_FUNC) &_mDAG_ScoreNodeWithNoneParents, 5},
    {"_mDAG_InitScore", (DL_FUNC) &_mDAG_InitScore, 4},
    {"_mDAG_ReturnParents", (DL_FUNC) &_mDAG_ReturnParents, 2},
    {"_mDAG_subcolMatrix", (DL_FUNC) &_mDAG_subcolMatrix, 2},
    {"_mDAG_ScoreGraph", (DL_FUNC) &_mDAG_ScoreGraph, 5},
    {"_mDAG_SettingEdges", (DL_FUNC) &_mDAG_SettingEdges, 7},
    {"_mDAG_AddReverseDelete", (DL_FUNC) &_mDAG_AddReverseDelete, 8},
    {"_mDAG_GreedySearch", (DL_FUNC) &_mDAG_GreedySearch, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_mDAG(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
