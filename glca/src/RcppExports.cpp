// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// MeasProd
NumericMatrix MeasProd(IntegerMatrix y, List Meas, int N, int C, int M, IntegerVector R, NumericMatrix Prod);
RcppExport SEXP _glca_MeasProd(SEXP ySEXP, SEXP MeasSEXP, SEXP NSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP, SEXP ProdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type Meas(MeasSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Prod(ProdSEXP);
    rcpp_result_gen = Rcpp::wrap(MeasProd(y, Meas, N, C, M, R, Prod));
    return rcpp_result_gen;
END_RCPP
}
// MeasProd1
NumericMatrix MeasProd1(IntegerMatrix y, List Meas, int N, int C, int M, IntegerVector R);
RcppExport SEXP _glca_MeasProd1(SEXP ySEXP, SEXP MeasSEXP, SEXP NSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type Meas(MeasSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(MeasProd1(y, Meas, N, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetPost
List GetPost(List y, List gamma, List rho, IntegerVector Ng, int G, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetPost(SEXP ySEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetPost(y, gamma, rho, Ng, G, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetUDPost
List GetUDPost(List y, NumericVector delta, NumericMatrix gamma, List rho, IntegerVector Ng, int G, int W, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetUDPost(SEXP ySEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP WSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetUDPost(y, delta, gamma, rho, Ng, G, W, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetMLLike
List GetMLLike(List y, NumericVector delta, NumericMatrix gamma, List rho, IntegerVector Ng, int G, int W, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetMLLike(SEXP ySEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP WSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMLLike(y, delta, gamma, rho, Ng, G, W, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetUDPostX
List GetUDPostX(List y, List x, List z, NumericVector delta, List gamma, List rho, IntegerVector Ng, int G, int W, int C, int P, int Q, int M, IntegerVector R);
RcppExport SEXP _glca_GetUDPostX(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP WSEXP, SEXP CSEXP, SEXP PSEXP, SEXP QSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< List >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetUDPostX(y, x, z, delta, gamma, rho, Ng, G, W, C, P, Q, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetScore
List GetScore(List y, List post, List gamma, List rho, IntegerVector Ng, int G, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetScore(SEXP ySEXP, SEXP postSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type post(postSEXP);
    Rcpp::traits::input_parameter< List >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetScore(y, post, gamma, rho, Ng, G, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetScoreX
List GetScoreX(List y, List x, List post, List gamma, List rho, IntegerVector Ng, int G, int C, int M, IntegerVector R, int P, bool coeff_inv);
RcppExport SEXP _glca_GetScoreX(SEXP ySEXP, SEXP xSEXP, SEXP postSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP, SEXP PSEXP, SEXP coeff_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type post(postSEXP);
    Rcpp::traits::input_parameter< List >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< bool >::type coeff_inv(coeff_invSEXP);
    rcpp_result_gen = Rcpp::wrap(GetScoreX(y, x, post, gamma, rho, Ng, G, C, M, R, P, coeff_inv));
    return rcpp_result_gen;
END_RCPP
}
// GetUDScore
NumericMatrix GetUDScore(List y, NumericVector delta, NumericMatrix gamma, List rho, IntegerVector Ng, int G, int W, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetUDScore(SEXP ySEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP WSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetUDScore(y, delta, gamma, rho, Ng, G, W, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetUDScoreX
NumericMatrix GetUDScoreX(List y, List x, List z, NumericVector delta, List gamma, List rho, IntegerVector Ng, int G, int W, int P, int Q, int C, int M, IntegerVector R, bool coeff_inv);
RcppExport SEXP _glca_GetUDScoreX(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP WSEXP, SEXP PSEXP, SEXP QSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP, SEXP coeff_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< List >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< bool >::type coeff_inv(coeff_invSEXP);
    rcpp_result_gen = Rcpp::wrap(GetUDScoreX(y, x, z, delta, gamma, rho, Ng, G, W, P, Q, C, M, R, coeff_inv));
    return rcpp_result_gen;
END_RCPP
}
// GetLik
double GetLik(List y, List gamma, List rho, IntegerVector Ng, int G, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetLik(SEXP ySEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetLik(y, gamma, rho, Ng, G, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetFitted
NumericVector GetFitted(IntegerMatrix pattern, NumericMatrix gamma, List rho, int N, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetFitted(SEXP patternSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetFitted(pattern, gamma, rho, N, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetUDlik
double GetUDlik(List y, NumericVector delta, NumericMatrix gamma, List rho, IntegerVector Ng, int G, int W, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetUDlik(SEXP ySEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP WSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetUDlik(y, delta, gamma, rho, Ng, G, W, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetUDfit
NumericVector GetUDfit(IntegerMatrix pattern, NumericVector delta, NumericVector gamma_m, List rho, int N, int W, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetUDfit(SEXP patternSEXP, SEXP deltaSEXP, SEXP gamma_mSEXP, SEXP rhoSEXP, SEXP NSEXP, SEXP WSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma_m(gamma_mSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetUDfit(pattern, delta, gamma_m, rho, N, W, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetUDlikX
double GetUDlikX(List y, NumericVector delta, List gamma, List rho, IntegerVector Ng, int G, int W, int C, int M, IntegerVector R);
RcppExport SEXP _glca_GetUDlikX(SEXP ySEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP WSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< List >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GetUDlikX(y, delta, gamma, rho, Ng, G, W, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// GetDeriv
List GetDeriv(NumericMatrix post, NumericMatrix x, NumericMatrix gamma, int N, int C, int P);
RcppExport SEXP _glca_GetDeriv(SEXP postSEXP, SEXP xSEXP, SEXP gammaSEXP, SEXP NSEXP, SEXP CSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDeriv(post, x, gamma, N, C, P));
    return rcpp_result_gen;
END_RCPP
}
// GetDeriv2
List GetDeriv2(List post, List x, List gamma, IntegerVector Ng, int G, int C, int P);
RcppExport SEXP _glca_GetDeriv2(SEXP postSEXP, SEXP xSEXP, SEXP gammaSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP CSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type post(postSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDeriv2(post, x, gamma, Ng, G, C, P));
    return rcpp_result_gen;
END_RCPP
}
// UpDelta
NumericVector UpDelta(NumericMatrix PostW);
RcppExport SEXP _glca_UpDelta(SEXP PostWSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type PostW(PostWSEXP);
    rcpp_result_gen = Rcpp::wrap(UpDelta(PostW));
    return rcpp_result_gen;
END_RCPP
}
// UpGammaML
NumericMatrix UpGammaML(NumericMatrix PostW, int W, int C);
RcppExport SEXP _glca_UpGammaML(SEXP PostWSEXP, SEXP WSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type PostW(PostWSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(UpGammaML(PostW, W, C));
    return rcpp_result_gen;
END_RCPP
}
// UpGamma
List UpGamma(List Post, IntegerVector Ng, int G, int C);
RcppExport SEXP _glca_UpGamma(SEXP PostSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Post(PostSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(UpGamma(Post, Ng, G, C));
    return rcpp_result_gen;
END_RCPP
}
// UpRhoU
List UpRhoU(List y, List Post, List rho, IntegerVector Ng, int G, int C, int M, IntegerVector R);
RcppExport SEXP _glca_UpRhoU(SEXP ySEXP, SEXP PostSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type Post(PostSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(UpRhoU(y, Post, rho, Ng, G, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// UpRhoR
List UpRhoR(List y, List Post, List rho, IntegerVector Ng, int G, int C, int M, IntegerVector R);
RcppExport SEXP _glca_UpRhoR(SEXP ySEXP, SEXP PostSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type Post(PostSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(UpRhoR(y, Post, rho, Ng, G, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// UpRhoML
List UpRhoML(List y, List PostC, List rho, IntegerVector Ng, int G, int C, int M, IntegerVector R);
RcppExport SEXP _glca_UpRhoML(SEXP ySEXP, SEXP PostCSEXP, SEXP rhoSEXP, SEXP NgSEXP, SEXP GSEXP, SEXP CSEXP, SEXP MSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type PostC(PostCSEXP);
    Rcpp::traits::input_parameter< List >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ng(NgSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(UpRhoML(y, PostC, rho, Ng, G, C, M, R));
    return rcpp_result_gen;
END_RCPP
}
// ObsCell
NumericVector ObsCell(IntegerMatrix y, int N, int M, IntegerVector R, int maxiter, double eps);
RcppExport SEXP _glca_ObsCell(SEXP ySEXP, SEXP NSEXP, SEXP MSEXP, SEXP RSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(ObsCell(y, N, M, R, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// ObsLik
double ObsLik(IntegerMatrix y, int N, int M, IntegerVector R, int maxiter, double eps);
RcppExport SEXP _glca_ObsLik(SEXP ySEXP, SEXP NSEXP, SEXP MSEXP, SEXP RSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(ObsLik(y, N, M, R, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// ObsCell2
IntegerVector ObsCell2(IntegerMatrix sy, IntegerMatrix u, int N, int U);
RcppExport SEXP _glca_ObsCell2(SEXP sySEXP, SEXP uSEXP, SEXP NSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type sy(sySEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(ObsCell2(sy, u, N, U));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glca_MeasProd", (DL_FUNC) &_glca_MeasProd, 7},
    {"_glca_MeasProd1", (DL_FUNC) &_glca_MeasProd1, 6},
    {"_glca_GetPost", (DL_FUNC) &_glca_GetPost, 8},
    {"_glca_GetUDPost", (DL_FUNC) &_glca_GetUDPost, 10},
    {"_glca_GetMLLike", (DL_FUNC) &_glca_GetMLLike, 10},
    {"_glca_GetUDPostX", (DL_FUNC) &_glca_GetUDPostX, 14},
    {"_glca_GetScore", (DL_FUNC) &_glca_GetScore, 9},
    {"_glca_GetScoreX", (DL_FUNC) &_glca_GetScoreX, 12},
    {"_glca_GetUDScore", (DL_FUNC) &_glca_GetUDScore, 10},
    {"_glca_GetUDScoreX", (DL_FUNC) &_glca_GetUDScoreX, 15},
    {"_glca_GetLik", (DL_FUNC) &_glca_GetLik, 8},
    {"_glca_GetFitted", (DL_FUNC) &_glca_GetFitted, 7},
    {"_glca_GetUDlik", (DL_FUNC) &_glca_GetUDlik, 10},
    {"_glca_GetUDfit", (DL_FUNC) &_glca_GetUDfit, 9},
    {"_glca_GetUDlikX", (DL_FUNC) &_glca_GetUDlikX, 10},
    {"_glca_GetDeriv", (DL_FUNC) &_glca_GetDeriv, 6},
    {"_glca_GetDeriv2", (DL_FUNC) &_glca_GetDeriv2, 7},
    {"_glca_UpDelta", (DL_FUNC) &_glca_UpDelta, 1},
    {"_glca_UpGammaML", (DL_FUNC) &_glca_UpGammaML, 3},
    {"_glca_UpGamma", (DL_FUNC) &_glca_UpGamma, 4},
    {"_glca_UpRhoU", (DL_FUNC) &_glca_UpRhoU, 8},
    {"_glca_UpRhoR", (DL_FUNC) &_glca_UpRhoR, 8},
    {"_glca_UpRhoML", (DL_FUNC) &_glca_UpRhoML, 8},
    {"_glca_ObsCell", (DL_FUNC) &_glca_ObsCell, 6},
    {"_glca_ObsLik", (DL_FUNC) &_glca_ObsLik, 6},
    {"_glca_ObsCell2", (DL_FUNC) &_glca_ObsCell2, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_glca(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
