// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// GetDeriv_DeepState_TestHarness_generation.cpp and GetDeriv_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List GetDeriv(NumericMatrix post, NumericMatrix x, NumericMatrix gamma, int N, int C, int P);

TEST(glca_deepstate_test,GetDeriv_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix post  = RcppDeepState_NumericMatrix();
  std::string post_t = "/home/akhila/fuzzer_packages/fuzzedpackages/glca/inst/testfiles/GetDeriv/libFuzzer_GetDeriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_post.qs";
  qs::c_qsave(post,post_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "post values: "<< post << std::endl;
  NumericMatrix x  = RcppDeepState_NumericMatrix();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/glca/inst/testfiles/GetDeriv/libFuzzer_GetDeriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericMatrix gamma  = RcppDeepState_NumericMatrix();
  std::string gamma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/glca/inst/testfiles/GetDeriv/libFuzzer_GetDeriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_gamma.qs";
  qs::c_qsave(gamma,gamma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma values: "<< gamma << std::endl;
  IntegerVector N(1);
  N[0]  = RcppDeepState_int();
  std::string N_t = "/home/akhila/fuzzer_packages/fuzzedpackages/glca/inst/testfiles/GetDeriv/libFuzzer_GetDeriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_N.qs";
  qs::c_qsave(N,N_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N values: "<< N << std::endl;
  IntegerVector C(1);
  C[0]  = RcppDeepState_int();
  std::string C_t = "/home/akhila/fuzzer_packages/fuzzedpackages/glca/inst/testfiles/GetDeriv/libFuzzer_GetDeriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_C.qs";
  qs::c_qsave(C,C_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "C values: "<< C << std::endl;
  IntegerVector P(1);
  P[0]  = RcppDeepState_int();
  std::string P_t = "/home/akhila/fuzzer_packages/fuzzedpackages/glca/inst/testfiles/GetDeriv/libFuzzer_GetDeriv/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_P.qs";
  qs::c_qsave(P,P_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "P values: "<< P << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    GetDeriv(post,x,gamma,N[0],C[0],P[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
