// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// psd_arma_DeepState_TestHarness_generation.cpp and psd_arma_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector psd_arma(NumericVector freq, NumericVector ar, NumericVector ma, double sigma2);

TEST(beyondWhittle_deepstate_test,psd_arma_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector freq  = RcppDeepState_NumericVector();
  std::string freq_t = "/home/akhila/fuzzer_packages/fuzzedpackages/beyondWhittle/inst/testfiles/psd_arma/libFuzzer_psd_arma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_freq.qs";
  qs::c_qsave(freq,freq_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "freq values: "<< freq << std::endl;
  NumericVector ar  = RcppDeepState_NumericVector();
  std::string ar_t = "/home/akhila/fuzzer_packages/fuzzedpackages/beyondWhittle/inst/testfiles/psd_arma/libFuzzer_psd_arma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ar.qs";
  qs::c_qsave(ar,ar_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ar values: "<< ar << std::endl;
  NumericVector ma  = RcppDeepState_NumericVector();
  std::string ma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/beyondWhittle/inst/testfiles/psd_arma/libFuzzer_psd_arma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ma.qs";
  qs::c_qsave(ma,ma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ma values: "<< ma << std::endl;
  NumericVector sigma2(1);
  sigma2[0]  = RcppDeepState_double();
  std::string sigma2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/beyondWhittle/inst/testfiles/psd_arma/libFuzzer_psd_arma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sigma2.qs";
  qs::c_qsave(sigma2,sigma2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma2 values: "<< sigma2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    psd_arma(freq,ar,ma,sigma2[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
