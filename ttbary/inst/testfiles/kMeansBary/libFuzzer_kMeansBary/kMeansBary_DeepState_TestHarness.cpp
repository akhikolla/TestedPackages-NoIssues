// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// kMeansBary_DeepState_TestHarness_generation.cpp and kMeansBary_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List kMeansBary(NumericVector zetax, NumericVector zetay, NumericMatrix ppmatx, NumericMatrix ppmaty, double penalty, int add_del, int N, double eps, int verbose);

TEST(ttbary_deepstate_test,kMeansBary_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector zetax  = RcppDeepState_NumericVector();
  std::string zetax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/kMeansBary/libFuzzer_kMeansBary/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_zetax.qs";
  qs::c_qsave(zetax,zetax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "zetax values: "<< zetax << std::endl;
  NumericVector zetay  = RcppDeepState_NumericVector();
  std::string zetay_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/kMeansBary/libFuzzer_kMeansBary/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_zetay.qs";
  qs::c_qsave(zetay,zetay_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "zetay values: "<< zetay << std::endl;
  NumericMatrix ppmatx  = RcppDeepState_NumericMatrix();
  std::string ppmatx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/kMeansBary/libFuzzer_kMeansBary/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ppmatx.qs";
  qs::c_qsave(ppmatx,ppmatx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ppmatx values: "<< ppmatx << std::endl;
  NumericMatrix ppmaty  = RcppDeepState_NumericMatrix();
  std::string ppmaty_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/kMeansBary/libFuzzer_kMeansBary/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ppmaty.qs";
  qs::c_qsave(ppmaty,ppmaty_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ppmaty values: "<< ppmaty << std::endl;
  NumericVector penalty(1);
  penalty[0]  = RcppDeepState_double();
  std::string penalty_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/kMeansBary/libFuzzer_kMeansBary/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_penalty.qs";
  qs::c_qsave(penalty,penalty_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "penalty values: "<< penalty << std::endl;
  IntegerVector add_del(1);
  add_del[0]  = RcppDeepState_int();
  std::string add_del_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/kMeansBary/libFuzzer_kMeansBary/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_add_del.qs";
  qs::c_qsave(add_del,add_del_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "add_del values: "<< add_del << std::endl;
  IntegerVector N(1);
  N[0]  = RcppDeepState_int();
  std::string N_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/kMeansBary/libFuzzer_kMeansBary/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_N.qs";
  qs::c_qsave(N,N_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N values: "<< N << std::endl;
  NumericVector eps(1);
  eps[0]  = RcppDeepState_double();
  std::string eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/kMeansBary/libFuzzer_kMeansBary/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_eps.qs";
  qs::c_qsave(eps,eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps values: "<< eps << std::endl;
  IntegerVector verbose(1);
  verbose[0]  = RcppDeepState_int();
  std::string verbose_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/kMeansBary/libFuzzer_kMeansBary/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_verbose.qs";
  qs::c_qsave(verbose,verbose_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "verbose values: "<< verbose << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    kMeansBary(zetax,zetay,ppmatx,ppmaty,penalty[0],add_del[0],N[0],eps[0],verbose[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
