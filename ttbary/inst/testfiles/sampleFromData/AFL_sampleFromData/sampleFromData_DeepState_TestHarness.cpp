// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sampleFromData_DeepState_TestHarness_generation.cpp and sampleFromData_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List sampleFromData(int n, NumericVector ppvecx, NumericVector ppvecy);

TEST(ttbary_deepstate_test,sampleFromData_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/sampleFromData/AFL_sampleFromData/afl_inputs/" + std::to_string(t) + "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector ppvecx  = RcppDeepState_NumericVector();
  std::string ppvecx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/sampleFromData/AFL_sampleFromData/afl_inputs/" + std::to_string(t) + "_ppvecx.qs";
  qs::c_qsave(ppvecx,ppvecx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ppvecx values: "<< ppvecx << std::endl;
  NumericVector ppvecy  = RcppDeepState_NumericVector();
  std::string ppvecy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ttbary/inst/testfiles/sampleFromData/AFL_sampleFromData/afl_inputs/" + std::to_string(t) + "_ppvecy.qs";
  qs::c_qsave(ppvecy,ppvecy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ppvecy values: "<< ppvecy << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sampleFromData(n[0],ppvecx,ppvecy);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
