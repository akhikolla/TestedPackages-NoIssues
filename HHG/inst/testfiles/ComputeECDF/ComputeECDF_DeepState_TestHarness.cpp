// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// ComputeECDF_DeepState_TestHarness_generation.cpp and ComputeECDF_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix ComputeECDF(NumericVector rank_x, NumericVector rank_y, IntegerVector NR_Atoms);

TEST(HHG_deepstate_test,ComputeECDF_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector rank_x  = RcppDeepState_NumericVector();
  qs::c_qsave(rank_x,"/home/akhila/fuzzer_packages/fuzzedpackages/HHG/inst/testfiles/ComputeECDF/inputs/rank_x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rank_x values: "<< rank_x << std::endl;
  NumericVector rank_y  = RcppDeepState_NumericVector();
  qs::c_qsave(rank_y,"/home/akhila/fuzzer_packages/fuzzedpackages/HHG/inst/testfiles/ComputeECDF/inputs/rank_y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rank_y values: "<< rank_y << std::endl;
  IntegerVector NR_Atoms  = RcppDeepState_IntegerVector();
  qs::c_qsave(NR_Atoms,"/home/akhila/fuzzer_packages/fuzzedpackages/HHG/inst/testfiles/ComputeECDF/inputs/NR_Atoms.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NR_Atoms values: "<< NR_Atoms << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    ComputeECDF(rank_x,rank_y,NR_Atoms);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
