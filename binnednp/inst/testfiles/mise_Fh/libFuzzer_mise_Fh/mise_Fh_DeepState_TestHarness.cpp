// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// mise_Fh_DeepState_TestHarness_generation.cpp and mise_Fh_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double mise_Fh(double h, int n, NumericVector t, NumericVector w, NumericVector p, double g, int lgrid, double lim1, double lim2);

TEST(binnednp_deepstate_test,mise_Fh_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector h(1);
  h[0]  = RcppDeepState_double();
  std::string h_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/mise_Fh/libFuzzer_mise_Fh/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_h.qs";
  qs::c_qsave(h,h_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h values: "<< h << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/mise_Fh/libFuzzer_mise_Fh/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector t  = RcppDeepState_NumericVector();
  std::string t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/mise_Fh/libFuzzer_mise_Fh/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_t.qs";
  qs::c_qsave(t,t_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector w  = RcppDeepState_NumericVector();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/mise_Fh/libFuzzer_mise_Fh/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_w.qs";
  qs::c_qsave(w,w_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  NumericVector p  = RcppDeepState_NumericVector();
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/mise_Fh/libFuzzer_mise_Fh/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  qs::c_qsave(p,p_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  NumericVector g(1);
  g[0]  = RcppDeepState_double();
  std::string g_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/mise_Fh/libFuzzer_mise_Fh/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_g.qs";
  qs::c_qsave(g,g_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "g values: "<< g << std::endl;
  IntegerVector lgrid(1);
  lgrid[0]  = RcppDeepState_int();
  std::string lgrid_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/mise_Fh/libFuzzer_mise_Fh/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lgrid.qs";
  qs::c_qsave(lgrid,lgrid_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lgrid values: "<< lgrid << std::endl;
  NumericVector lim1(1);
  lim1[0]  = RcppDeepState_double();
  std::string lim1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/mise_Fh/libFuzzer_mise_Fh/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lim1.qs";
  qs::c_qsave(lim1,lim1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lim1 values: "<< lim1 << std::endl;
  NumericVector lim2(1);
  lim2[0]  = RcppDeepState_double();
  std::string lim2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/mise_Fh/libFuzzer_mise_Fh/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lim2.qs";
  qs::c_qsave(lim2,lim2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lim2 values: "<< lim2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    mise_Fh(h[0],n[0],t,w,p,g[0],lgrid[0],lim1[0],lim2[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
