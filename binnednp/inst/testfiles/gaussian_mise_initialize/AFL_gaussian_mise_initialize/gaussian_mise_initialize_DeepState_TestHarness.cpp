// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// gaussian_mise_initialize_DeepState_TestHarness_generation.cpp and gaussian_mise_initialize_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

void gaussian_mise_initialize(int n, int k, NumericVector wg, NumericVector w, NumericVector t, double gboot, double AK);

TEST(binnednp_deepstate_test,gaussian_mise_initialize_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/gaussian_mise_initialize/AFL_gaussian_mise_initialize/afl_inputs/" + std::to_string(t) + "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  IntegerVector k(1);
  k[0]  = RcppDeepState_int();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/gaussian_mise_initialize/AFL_gaussian_mise_initialize/afl_inputs/" + std::to_string(t) + "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  NumericVector wg  = RcppDeepState_NumericVector();
  std::string wg_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/gaussian_mise_initialize/AFL_gaussian_mise_initialize/afl_inputs/" + std::to_string(t) + "_wg.qs";
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/gaussian_mise_initialize/AFL_gaussian_mise_initialize/afl_inputs/" + std::to_string(t) + "_w.qs";
  qs::c_qsave(wg,wg_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wg values: "<< wg << std::endl;
  NumericVector w  = RcppDeepState_NumericVector();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/gaussian_mise_initialize/AFL_gaussian_mise_initialize/afl_inputs/" + std::to_string(t) + "_w.qs";
  qs::c_qsave(w,w_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  NumericVector t  = RcppDeepState_NumericVector();
  std::string t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/gaussian_mise_initialize/AFL_gaussian_mise_initialize/afl_inputs/" + std::to_string(t) + "_t.qs";
  qs::c_qsave(t,t_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector gboot(1);
  gboot[0]  = RcppDeepState_double();
  std::string gboot_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/gaussian_mise_initialize/AFL_gaussian_mise_initialize/afl_inputs/" + std::to_string(t) + "_gboot.qs";
  qs::c_qsave(gboot,gboot_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gboot values: "<< gboot << std::endl;
  NumericVector AK(1);
  AK[0]  = RcppDeepState_double();
  std::string AK_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/gaussian_mise_initialize/AFL_gaussian_mise_initialize/afl_inputs/" + std::to_string(t) + "_AK.qs";
  qs::c_qsave(AK,AK_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AK values: "<< AK << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    gaussian_mise_initialize(n[0],k[0],wg,w,t,gboot[0],AK[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
