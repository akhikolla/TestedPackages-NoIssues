// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// curv_cpp_DeepState_TestHarness_generation.cpp and curv_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double curv_cpp(NumericVector t, NumericVector w, double h, double lim1, double lim2, int lgrid);

TEST(binnednp_deepstate_test,curv_cpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector t  = RcppDeepState_NumericVector();
  std::string t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/curv_cpp/AFL_curv_cpp/afl_inputs/" + std::to_string(t) + "_t.qs";
  qs::c_qsave(t,t_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector w  = RcppDeepState_NumericVector();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/curv_cpp/AFL_curv_cpp/afl_inputs/" + std::to_string(t) + "_w.qs";
  qs::c_qsave(w,w_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  NumericVector h(1);
  h[0]  = RcppDeepState_double();
  std::string h_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/curv_cpp/AFL_curv_cpp/afl_inputs/" + std::to_string(t) + "_h.qs";
  qs::c_qsave(h,h_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h values: "<< h << std::endl;
  NumericVector lim1(1);
  lim1[0]  = RcppDeepState_double();
  std::string lim1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/curv_cpp/AFL_curv_cpp/afl_inputs/" + std::to_string(t) + "_lim1.qs";
  qs::c_qsave(lim1,lim1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lim1 values: "<< lim1 << std::endl;
  NumericVector lim2(1);
  lim2[0]  = RcppDeepState_double();
  std::string lim2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/curv_cpp/AFL_curv_cpp/afl_inputs/" + std::to_string(t) + "_lim2.qs";
  qs::c_qsave(lim2,lim2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lim2 values: "<< lim2 << std::endl;
  IntegerVector lgrid(1);
  lgrid[0]  = RcppDeepState_int();
  std::string lgrid_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/curv_cpp/AFL_curv_cpp/afl_inputs/" + std::to_string(t) + "_lgrid.qs";
  qs::c_qsave(lgrid,lgrid_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lgrid values: "<< lgrid << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    curv_cpp(t,w,h[0],lim1[0],lim2[0],lgrid[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
