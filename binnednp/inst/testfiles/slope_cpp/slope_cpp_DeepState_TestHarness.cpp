// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// slope_cpp_DeepState_TestHarness_generation.cpp and slope_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double slope_cpp(NumericVector t, NumericVector w, double h, double lim1, double lim2, int lgrid);

TEST(binnednp_deepstate_test,slope_cpp_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector t  = RcppDeepState_NumericVector();
  qs::c_qsave(t,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/slope_cpp/inputs/t.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector w  = RcppDeepState_NumericVector();
  qs::c_qsave(w,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/slope_cpp/inputs/w.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  NumericVector h(1);
  h[0]  = RcppDeepState_double();
  qs::c_qsave(h,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/slope_cpp/inputs/h.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h values: "<< h << std::endl;
  NumericVector lim1(1);
  lim1[0]  = RcppDeepState_double();
  qs::c_qsave(lim1,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/slope_cpp/inputs/lim1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lim1 values: "<< lim1 << std::endl;
  NumericVector lim2(1);
  lim2[0]  = RcppDeepState_double();
  qs::c_qsave(lim2,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/slope_cpp/inputs/lim2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lim2 values: "<< lim2 << std::endl;
  IntegerVector lgrid(1);
  lgrid[0]  = RcppDeepState_int();
  qs::c_qsave(lgrid,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/slope_cpp/inputs/lgrid.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lgrid values: "<< lgrid << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    slope_cpp(t,w,h[0],lim1[0],lim2[0],lgrid[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
