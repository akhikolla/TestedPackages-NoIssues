// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dicoto_lambda_dist_DeepState_TestHarness_generation.cpp and dicoto_lambda_dist_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector dicoto_lambda_dist(double lambda, int nith, double h0, double h1, double rho, NumericVector emp, NumericVector comby, NumericVector combt, NumericVector combw, double lim1, double lim2);

TEST(binnednp_deepstate_test,dicoto_lambda_dist_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  std::string lambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_lambda.qs";
  qs::c_qsave(lambda,lambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  IntegerVector nith(1);
  nith[0]  = RcppDeepState_int();
  std::string nith_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_nith.qs";
  qs::c_qsave(nith,nith_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nith values: "<< nith << std::endl;
  NumericVector h0(1);
  h0[0]  = RcppDeepState_double();
  std::string h0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_h0.qs";
  qs::c_qsave(h0,h0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h0 values: "<< h0 << std::endl;
  NumericVector h1(1);
  h1[0]  = RcppDeepState_double();
  std::string h1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_h1.qs";
  qs::c_qsave(h1,h1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h1 values: "<< h1 << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  std::string rho_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_rho.qs";
  qs::c_qsave(rho,rho_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericVector emp  = RcppDeepState_NumericVector();
  std::string emp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_emp.qs";
  qs::c_qsave(emp,emp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "emp values: "<< emp << std::endl;
  NumericVector comby  = RcppDeepState_NumericVector();
  std::string comby_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_comby.qs";
  qs::c_qsave(comby,comby_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "comby values: "<< comby << std::endl;
  NumericVector combt  = RcppDeepState_NumericVector();
  std::string combt_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_combt.qs";
  qs::c_qsave(combt,combt_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "combt values: "<< combt << std::endl;
  NumericVector combw  = RcppDeepState_NumericVector();
  std::string combw_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_combw.qs";
  qs::c_qsave(combw,combw_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "combw values: "<< combw << std::endl;
  NumericVector lim1(1);
  lim1[0]  = RcppDeepState_double();
  std::string lim1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_lim1.qs";
  qs::c_qsave(lim1,lim1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lim1 values: "<< lim1 << std::endl;
  NumericVector lim2(1);
  lim2[0]  = RcppDeepState_double();
  std::string lim2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/dicoto_lambda_dist/AFL_dicoto_lambda_dist/afl_inputs/" + std::to_string(t) + "_lim2.qs";
  qs::c_qsave(lim2,lim2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lim2 values: "<< lim2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dicoto_lambda_dist(lambda[0],nith[0],h0[0],h1[0],rho[0],emp,comby,combt,combw,lim1[0],lim2[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
