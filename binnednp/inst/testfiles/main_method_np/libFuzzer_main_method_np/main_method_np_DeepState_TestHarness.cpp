// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// main_method_np_DeepState_TestHarness_generation.cpp and main_method_np_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

void main_method_np(int hn, int B, NumericVector hseq, NumericMatrix xbm, NumericVector y, NumericVector t, NumericVector MSE_J1, NumericVector MSE_J2, double J1_np, double J2_np, NumericVector J1b, NumericVector J2b);

TEST(binnednp_deepstate_test,main_method_np_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector hn(1);
  hn[0]  = RcppDeepState_int();
  std::string hn_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_hn.qs";
  qs::c_qsave(hn,hn_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "hn values: "<< hn << std::endl;
  IntegerVector B(1);
  B[0]  = RcppDeepState_int();
  std::string B_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_B.qs";
  qs::c_qsave(B,B_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "B values: "<< B << std::endl;
  NumericVector hseq  = RcppDeepState_NumericVector();
  std::string hseq_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_hseq.qs";
  qs::c_qsave(hseq,hseq_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "hseq values: "<< hseq << std::endl;
  NumericMatrix xbm  = RcppDeepState_NumericMatrix();
  std::string xbm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xbm.qs";
  qs::c_qsave(xbm,xbm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xbm values: "<< xbm << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector t  = RcppDeepState_NumericVector();
  std::string t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_t.qs";
  qs::c_qsave(t,t_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector MSE_J1  = RcppDeepState_NumericVector();
  std::string MSE_J1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_MSE_J1.qs";
  qs::c_qsave(MSE_J1,MSE_J1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "MSE_J1 values: "<< MSE_J1 << std::endl;
  NumericVector MSE_J2  = RcppDeepState_NumericVector();
  std::string MSE_J2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_MSE_J2.qs";
  qs::c_qsave(MSE_J2,MSE_J2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "MSE_J2 values: "<< MSE_J2 << std::endl;
  NumericVector J1_np(1);
  J1_np[0]  = RcppDeepState_double();
  std::string J1_np_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_J1_np.qs";
  qs::c_qsave(J1_np,J1_np_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J1_np values: "<< J1_np << std::endl;
  NumericVector J2_np(1);
  J2_np[0]  = RcppDeepState_double();
  std::string J2_np_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_J2_np.qs";
  qs::c_qsave(J2_np,J2_np_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J2_np values: "<< J2_np << std::endl;
  NumericVector J1b  = RcppDeepState_NumericVector();
  std::string J1b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_J1b.qs";
  qs::c_qsave(J1b,J1b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J1b values: "<< J1b << std::endl;
  NumericVector J2b  = RcppDeepState_NumericVector();
  std::string J2b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/libFuzzer_main_method_np/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_J2b.qs";
  qs::c_qsave(J2b,J2b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J2b values: "<< J2b << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    main_method_np(hn[0],B[0],hseq,xbm,y,t,MSE_J1,MSE_J2,J1_np[0],J2_np[0],J1b,J2b);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
