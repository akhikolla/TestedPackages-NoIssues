// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// main_method_np_DeepState_TestHarness_generation.cpp and main_method_np_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

void main_method_np(int hn, int B, NumericVector hseq, NumericMatrix xbm, NumericVector y, NumericVector t, NumericVector MSE_J1, NumericVector MSE_J2, double J1_np, double J2_np, NumericVector J1b, NumericVector J2b);

TEST(binnednp_deepstate_test,main_method_np_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector hn(1);
  hn[0]  = RcppDeepState_int();
  qs::c_qsave(hn,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/hn.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "hn values: "<< hn << std::endl;
  IntegerVector B(1);
  B[0]  = RcppDeepState_int();
  qs::c_qsave(B,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/B.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "B values: "<< B << std::endl;
  NumericVector hseq  = RcppDeepState_NumericVector();
  qs::c_qsave(hseq,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/hseq.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "hseq values: "<< hseq << std::endl;
  NumericMatrix xbm  = RcppDeepState_NumericMatrix();
  qs::c_qsave(xbm,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/xbm.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xbm values: "<< xbm << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  qs::c_qsave(y,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector t  = RcppDeepState_NumericVector();
  qs::c_qsave(t,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/t.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector MSE_J1  = RcppDeepState_NumericVector();
  qs::c_qsave(MSE_J1,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/MSE_J1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "MSE_J1 values: "<< MSE_J1 << std::endl;
  NumericVector MSE_J2  = RcppDeepState_NumericVector();
  qs::c_qsave(MSE_J2,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/MSE_J2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "MSE_J2 values: "<< MSE_J2 << std::endl;
  NumericVector J1_np(1);
  J1_np[0]  = RcppDeepState_double();
  qs::c_qsave(J1_np,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/J1_np.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J1_np values: "<< J1_np << std::endl;
  NumericVector J2_np(1);
  J2_np[0]  = RcppDeepState_double();
  qs::c_qsave(J2_np,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/J2_np.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J2_np values: "<< J2_np << std::endl;
  NumericVector J1b  = RcppDeepState_NumericVector();
  qs::c_qsave(J1b,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/J1b.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J1b values: "<< J1b << std::endl;
  NumericVector J2b  = RcppDeepState_NumericVector();
  qs::c_qsave(J2b,"/home/akhila/fuzzer_packages/fuzzedpackages/binnednp/inst/testfiles/main_method_np/inputs/J2b.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J2b values: "<< J2b << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    main_method_np(hn[0],B[0],hseq,xbm,y,t,MSE_J1,MSE_J2,J1_np[0],J2_np[0],J1b,J2b);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
