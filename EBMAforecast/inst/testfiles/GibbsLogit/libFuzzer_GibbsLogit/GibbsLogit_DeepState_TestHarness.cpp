// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// GibbsLogit_DeepState_TestHarness_generation.cpp and GibbsLogit_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List GibbsLogit(Rcpp::NumericVector outcome, Rcpp::NumericMatrix prediction, Rcpp::NumericVector W, int iterations, int burnin, int thin);

TEST(EBMAforecast_deepstate_test,GibbsLogit_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector outcome  = RcppDeepState_NumericVector();
  std::string outcome_t = "/home/akhila/fuzzer_packages/fuzzedpackages/EBMAforecast/inst/testfiles/GibbsLogit/libFuzzer_GibbsLogit/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_outcome.qs";
  qs::c_qsave(outcome,outcome_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "outcome values: "<< outcome << std::endl;
  NumericMatrix prediction  = RcppDeepState_NumericMatrix();
  std::string prediction_t = "/home/akhila/fuzzer_packages/fuzzedpackages/EBMAforecast/inst/testfiles/GibbsLogit/libFuzzer_GibbsLogit/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_prediction.qs";
  qs::c_qsave(prediction,prediction_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prediction values: "<< prediction << std::endl;
  NumericVector W  = RcppDeepState_NumericVector();
  std::string W_t = "/home/akhila/fuzzer_packages/fuzzedpackages/EBMAforecast/inst/testfiles/GibbsLogit/libFuzzer_GibbsLogit/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_W.qs";
  qs::c_qsave(W,W_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "W values: "<< W << std::endl;
  IntegerVector iterations(1);
  iterations[0]  = RcppDeepState_int();
  std::string iterations_t = "/home/akhila/fuzzer_packages/fuzzedpackages/EBMAforecast/inst/testfiles/GibbsLogit/libFuzzer_GibbsLogit/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_iterations.qs";
  qs::c_qsave(iterations,iterations_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "iterations values: "<< iterations << std::endl;
  IntegerVector burnin(1);
  burnin[0]  = RcppDeepState_int();
  std::string burnin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/EBMAforecast/inst/testfiles/GibbsLogit/libFuzzer_GibbsLogit/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_burnin.qs";
  qs::c_qsave(burnin,burnin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "burnin values: "<< burnin << std::endl;
  IntegerVector thin(1);
  thin[0]  = RcppDeepState_int();
  std::string thin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/EBMAforecast/inst/testfiles/GibbsLogit/libFuzzer_GibbsLogit/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_thin.qs";
  qs::c_qsave(thin,thin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "thin values: "<< thin << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    GibbsLogit(outcome,prediction,W,iterations[0],burnin[0],thin[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
