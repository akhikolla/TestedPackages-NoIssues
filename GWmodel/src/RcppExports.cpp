// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// coordinate_rotate
mat coordinate_rotate(mat coords, double theta);
RcppExport SEXP _GWmodel_coordinate_rotate(SEXP coordsSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(coordinate_rotate(coords, theta));
    return rcpp_result_gen;
END_RCPP
}
// eu_dist_mat
mat eu_dist_mat(mat in_locs, mat out_locs);
RcppExport SEXP _GWmodel_eu_dist_mat(SEXP in_locsSEXP, SEXP out_locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    Rcpp::traits::input_parameter< mat >::type out_locs(out_locsSEXP);
    rcpp_result_gen = Rcpp::wrap(eu_dist_mat(in_locs, out_locs));
    return rcpp_result_gen;
END_RCPP
}
// eu_dist_smat
mat eu_dist_smat(mat in_locs);
RcppExport SEXP _GWmodel_eu_dist_smat(SEXP in_locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    rcpp_result_gen = Rcpp::wrap(eu_dist_smat(in_locs));
    return rcpp_result_gen;
END_RCPP
}
// eu_dist_vec
vec eu_dist_vec(mat in_locs, vec out_loc);
RcppExport SEXP _GWmodel_eu_dist_vec(SEXP in_locsSEXP, SEXP out_locSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    Rcpp::traits::input_parameter< vec >::type out_loc(out_locSEXP);
    rcpp_result_gen = Rcpp::wrap(eu_dist_vec(in_locs, out_loc));
    return rcpp_result_gen;
END_RCPP
}
// md_dist_mat
mat md_dist_mat(mat in_locs, mat out_locs);
RcppExport SEXP _GWmodel_md_dist_mat(SEXP in_locsSEXP, SEXP out_locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    Rcpp::traits::input_parameter< mat >::type out_locs(out_locsSEXP);
    rcpp_result_gen = Rcpp::wrap(md_dist_mat(in_locs, out_locs));
    return rcpp_result_gen;
END_RCPP
}
// md_dist_smat
mat md_dist_smat(mat in_locs);
RcppExport SEXP _GWmodel_md_dist_smat(SEXP in_locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    rcpp_result_gen = Rcpp::wrap(md_dist_smat(in_locs));
    return rcpp_result_gen;
END_RCPP
}
// md_dist_vec
vec md_dist_vec(mat in_locs, vec out_loc);
RcppExport SEXP _GWmodel_md_dist_vec(SEXP in_locsSEXP, SEXP out_locSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    Rcpp::traits::input_parameter< vec >::type out_loc(out_locSEXP);
    rcpp_result_gen = Rcpp::wrap(md_dist_vec(in_locs, out_loc));
    return rcpp_result_gen;
END_RCPP
}
// cd_dist_mat
mat cd_dist_mat(mat in_locs, mat out_locs);
RcppExport SEXP _GWmodel_cd_dist_mat(SEXP in_locsSEXP, SEXP out_locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    Rcpp::traits::input_parameter< mat >::type out_locs(out_locsSEXP);
    rcpp_result_gen = Rcpp::wrap(cd_dist_mat(in_locs, out_locs));
    return rcpp_result_gen;
END_RCPP
}
// cd_dist_smat
mat cd_dist_smat(mat in_locs);
RcppExport SEXP _GWmodel_cd_dist_smat(SEXP in_locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    rcpp_result_gen = Rcpp::wrap(cd_dist_smat(in_locs));
    return rcpp_result_gen;
END_RCPP
}
// cd_dist_vec
vec cd_dist_vec(mat in_locs, vec out_loc);
RcppExport SEXP _GWmodel_cd_dist_vec(SEXP in_locsSEXP, SEXP out_locSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    Rcpp::traits::input_parameter< vec >::type out_loc(out_locSEXP);
    rcpp_result_gen = Rcpp::wrap(cd_dist_vec(in_locs, out_loc));
    return rcpp_result_gen;
END_RCPP
}
// mk_dist_mat
mat mk_dist_mat(mat in_locs, mat out_locs, double p);
RcppExport SEXP _GWmodel_mk_dist_mat(SEXP in_locsSEXP, SEXP out_locsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    Rcpp::traits::input_parameter< mat >::type out_locs(out_locsSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_dist_mat(in_locs, out_locs, p));
    return rcpp_result_gen;
END_RCPP
}
// mk_dist_smat
mat mk_dist_smat(mat in_locs, double p);
RcppExport SEXP _GWmodel_mk_dist_smat(SEXP in_locsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_dist_smat(in_locs, p));
    return rcpp_result_gen;
END_RCPP
}
// mk_dist_vec
vec mk_dist_vec(mat in_locs, vec out_loc, double p);
RcppExport SEXP _GWmodel_mk_dist_vec(SEXP in_locsSEXP, SEXP out_locSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type in_locs(in_locsSEXP);
    Rcpp::traits::input_parameter< vec >::type out_loc(out_locSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_dist_vec(in_locs, out_loc, p));
    return rcpp_result_gen;
END_RCPP
}
// bisq_wt_vec
vec bisq_wt_vec(vec distv, double bw);
RcppExport SEXP _GWmodel_bisq_wt_vec(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(bisq_wt_vec(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// bisq_wt_mat
mat bisq_wt_mat(mat distm, vec bw);
RcppExport SEXP _GWmodel_bisq_wt_mat(SEXP distmSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type distm(distmSEXP);
    Rcpp::traits::input_parameter< vec >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(bisq_wt_mat(distm, bw));
    return rcpp_result_gen;
END_RCPP
}
// gauss_wt_vec
vec gauss_wt_vec(vec distv, double bw);
RcppExport SEXP _GWmodel_gauss_wt_vec(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_wt_vec(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// gauss_wt_mat
mat gauss_wt_mat(mat distm, vec bw);
RcppExport SEXP _GWmodel_gauss_wt_mat(SEXP distmSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type distm(distmSEXP);
    Rcpp::traits::input_parameter< vec >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_wt_mat(distm, bw));
    return rcpp_result_gen;
END_RCPP
}
// tri_wt_vec
vec tri_wt_vec(vec distv, double bw);
RcppExport SEXP _GWmodel_tri_wt_vec(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(tri_wt_vec(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// tri_wt_mat
mat tri_wt_mat(mat distm, vec bw);
RcppExport SEXP _GWmodel_tri_wt_mat(SEXP distmSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type distm(distmSEXP);
    Rcpp::traits::input_parameter< vec >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(tri_wt_mat(distm, bw));
    return rcpp_result_gen;
END_RCPP
}
// exp_wt_vec
vec exp_wt_vec(vec distv, double bw);
RcppExport SEXP _GWmodel_exp_wt_vec(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_wt_vec(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// exp_wt_mat
mat exp_wt_mat(mat distm, vec bw);
RcppExport SEXP _GWmodel_exp_wt_mat(SEXP distmSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type distm(distmSEXP);
    Rcpp::traits::input_parameter< vec >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_wt_mat(distm, bw));
    return rcpp_result_gen;
END_RCPP
}
// gw_reg
List gw_reg(mat x, vec y, vec w, bool hatmatrix, int focus);
RcppExport SEXP _GWmodel_gw_reg(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP hatmatrixSEXP, SEXP focusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type hatmatrix(hatmatrixSEXP);
    Rcpp::traits::input_parameter< int >::type focus(focusSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_reg(x, y, w, hatmatrix, focus));
    return rcpp_result_gen;
END_RCPP
}
// trhat2
vec trhat2(mat S);
RcppExport SEXP _GWmodel_trhat2(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(trhat2(S));
    return rcpp_result_gen;
END_RCPP
}
// fitted
vec fitted(mat X, mat beta);
RcppExport SEXP _GWmodel_fitted(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(fitted(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// ehat
vec ehat(vec y, mat X, mat beta);
RcppExport SEXP _GWmodel_ehat(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(ehat(y, X, beta));
    return rcpp_result_gen;
END_RCPP
}
// rss
double rss(vec y, mat X, mat beta);
RcppExport SEXP _GWmodel_rss(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(rss(y, X, beta));
    return rcpp_result_gen;
END_RCPP
}
// gwr_diag
vec gwr_diag(vec y, mat x, mat beta, mat S);
RcppExport SEXP _GWmodel_gwr_diag(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(gwr_diag(y, x, beta, S));
    return rcpp_result_gen;
END_RCPP
}
// gwr_diag1
vec gwr_diag1(vec y, mat x, mat beta, vec s_hat);
RcppExport SEXP _GWmodel_gwr_diag1(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP s_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< vec >::type s_hat(s_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(gwr_diag1(y, x, beta, s_hat));
    return rcpp_result_gen;
END_RCPP
}
// AICc
double AICc(vec y, mat x, mat beta, mat S);
RcppExport SEXP _GWmodel_AICc(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(AICc(y, x, beta, S));
    return rcpp_result_gen;
END_RCPP
}
// AICc1
double AICc1(vec y, mat x, mat beta, vec s_hat);
RcppExport SEXP _GWmodel_AICc1(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP s_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< vec >::type s_hat(s_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(AICc1(y, x, beta, s_hat));
    return rcpp_result_gen;
END_RCPP
}
// AICc_rss
vec AICc_rss(vec y, mat x, mat beta, mat S);
RcppExport SEXP _GWmodel_AICc_rss(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(AICc_rss(y, x, beta, S));
    return rcpp_result_gen;
END_RCPP
}
// AICc_rss1
vec AICc_rss1(vec y, mat x, mat beta, vec s_hat);
RcppExport SEXP _GWmodel_AICc_rss1(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP s_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< vec >::type s_hat(s_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(AICc_rss1(y, x, beta, s_hat));
    return rcpp_result_gen;
END_RCPP
}
// Ci_mat
mat Ci_mat(mat x, vec w);
RcppExport SEXP _GWmodel_Ci_mat(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(Ci_mat(x, w));
    return rcpp_result_gen;
END_RCPP
}
// scgwr_pre
List scgwr_pre(mat x, vec y, int bw, int poly, double b0, mat g0, mat neighbour);
RcppExport SEXP _GWmodel_scgwr_pre(SEXP xSEXP, SEXP ySEXP, SEXP bwSEXP, SEXP polySEXP, SEXP b0SEXP, SEXP g0SEXP, SEXP neighbourSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type poly(polySEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< mat >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< mat >::type neighbour(neighbourSEXP);
    rcpp_result_gen = Rcpp::wrap(scgwr_pre(x, y, bw, poly, b0, g0, neighbour));
    return rcpp_result_gen;
END_RCPP
}
// scgwr_loocv
double scgwr_loocv(vec target, mat x, vec y, int bw, int poly, mat Mx0, mat My0, mat XtX, mat XtY);
RcppExport SEXP _GWmodel_scgwr_loocv(SEXP targetSEXP, SEXP xSEXP, SEXP ySEXP, SEXP bwSEXP, SEXP polySEXP, SEXP Mx0SEXP, SEXP My0SEXP, SEXP XtXSEXP, SEXP XtYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type target(targetSEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type poly(polySEXP);
    Rcpp::traits::input_parameter< mat >::type Mx0(Mx0SEXP);
    Rcpp::traits::input_parameter< mat >::type My0(My0SEXP);
    Rcpp::traits::input_parameter< mat >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< mat >::type XtY(XtYSEXP);
    rcpp_result_gen = Rcpp::wrap(scgwr_loocv(target, x, y, bw, poly, Mx0, My0, XtX, XtY));
    return rcpp_result_gen;
END_RCPP
}
// scgwr_reg
List scgwr_reg(mat x, vec y, int bw, int poly, mat G0, mat Mx0, mat My0, mat XtX, mat XtY, mat neighbour, vec parameters);
RcppExport SEXP _GWmodel_scgwr_reg(SEXP xSEXP, SEXP ySEXP, SEXP bwSEXP, SEXP polySEXP, SEXP G0SEXP, SEXP Mx0SEXP, SEXP My0SEXP, SEXP XtXSEXP, SEXP XtYSEXP, SEXP neighbourSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type poly(polySEXP);
    Rcpp::traits::input_parameter< mat >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< mat >::type Mx0(Mx0SEXP);
    Rcpp::traits::input_parameter< mat >::type My0(My0SEXP);
    Rcpp::traits::input_parameter< mat >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< mat >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< mat >::type neighbour(neighbourSEXP);
    Rcpp::traits::input_parameter< vec >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(scgwr_reg(x, y, bw, poly, G0, Mx0, My0, XtX, XtY, neighbour, parameters));
    return rcpp_result_gen;
END_RCPP
}
// gw_dist
mat gw_dist(mat dp, mat rp, int focus, double p, double theta, bool longlat, bool rp_given);
RcppExport SEXP _GWmodel_gw_dist(SEXP dpSEXP, SEXP rpSEXP, SEXP focusSEXP, SEXP pSEXP, SEXP thetaSEXP, SEXP longlatSEXP, SEXP rp_givenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type dp(dpSEXP);
    Rcpp::traits::input_parameter< mat >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< int >::type focus(focusSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type longlat(longlatSEXP);
    Rcpp::traits::input_parameter< bool >::type rp_given(rp_givenSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_dist(dp, rp, focus, p, theta, longlat, rp_given));
    return rcpp_result_gen;
END_RCPP
}
// gw_weight
mat gw_weight(mat dist, double bw, int kernel, bool adaptive);
RcppExport SEXP _GWmodel_gw_weight(SEXP distSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_weight(dist, bw, kernel, adaptive));
    return rcpp_result_gen;
END_RCPP
}
// gw_reg_all
List gw_reg_all(mat x, vec y, mat dp, bool rp_given, mat rp, bool dm_given, mat dmat, bool hatmatrix, double p, double theta, bool longlat, double bw, int kernel, bool adaptive, int ngroup, int igroup);
RcppExport SEXP _GWmodel_gw_reg_all(SEXP xSEXP, SEXP ySEXP, SEXP dpSEXP, SEXP rp_givenSEXP, SEXP rpSEXP, SEXP dm_givenSEXP, SEXP dmatSEXP, SEXP hatmatrixSEXP, SEXP pSEXP, SEXP thetaSEXP, SEXP longlatSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP, SEXP ngroupSEXP, SEXP igroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type dp(dpSEXP);
    Rcpp::traits::input_parameter< bool >::type rp_given(rp_givenSEXP);
    Rcpp::traits::input_parameter< mat >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< bool >::type dm_given(dm_givenSEXP);
    Rcpp::traits::input_parameter< mat >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< bool >::type hatmatrix(hatmatrixSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type longlat(longlatSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< int >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< int >::type igroup(igroupSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_reg_all(x, y, dp, rp_given, rp, dm_given, dmat, hatmatrix, p, theta, longlat, bw, kernel, adaptive, ngroup, igroup));
    return rcpp_result_gen;
END_RCPP
}
// gw_reg_all_omp
#ifdef _OPENMP List gw_reg_all_omp(mat x, vec y, mat dp, bool rp_given, mat rp, bool dm_given, mat dmat, bool hatmatrix, double p, double theta, bool longlat, double bw, int kernel, bool adaptive, int threads, int ngroup, int igroup);
RcppExport SEXP _GWmodel_gw_reg_all_omp(SEXP xSEXP, SEXP ySEXP, SEXP dpSEXP, SEXP rp_givenSEXP, SEXP rpSEXP, SEXP dm_givenSEXP, SEXP dmatSEXP, SEXP hatmatrixSEXP, SEXP pSEXP, SEXP thetaSEXP, SEXP longlatSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP, SEXP threadsSEXP, SEXP ngroupSEXP, SEXP igroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type dp(dpSEXP);
    Rcpp::traits::input_parameter< bool >::type rp_given(rp_givenSEXP);
    Rcpp::traits::input_parameter< mat >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< bool >::type dm_given(dm_givenSEXP);
    Rcpp::traits::input_parameter< mat >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< bool >::type hatmatrix(hatmatrixSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type longlat(longlatSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< int >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< int >::type igroup(igroupSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_reg_all_omp(x, y, dp, rp_given, rp, dm_given, dmat, hatmatrix, p, theta, longlat, bw, kernel, adaptive, threads, ngroup, igroup));
    return rcpp_result_gen;
END_RCPP
}
// gw_cv_all
double gw_cv_all(mat x, vec y, mat dp, bool dm_given, mat dmat, double p, double theta, bool longlat, double bw, int kernel, bool adaptive, int ngroup, int igroup);
RcppExport SEXP _GWmodel_gw_cv_all(SEXP xSEXP, SEXP ySEXP, SEXP dpSEXP, SEXP dm_givenSEXP, SEXP dmatSEXP, SEXP pSEXP, SEXP thetaSEXP, SEXP longlatSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP, SEXP ngroupSEXP, SEXP igroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type dp(dpSEXP);
    Rcpp::traits::input_parameter< bool >::type dm_given(dm_givenSEXP);
    Rcpp::traits::input_parameter< mat >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type longlat(longlatSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< int >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< int >::type igroup(igroupSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_cv_all(x, y, dp, dm_given, dmat, p, theta, longlat, bw, kernel, adaptive, ngroup, igroup));
    return rcpp_result_gen;
END_RCPP
}
// gw_cv_all_omp
#ifdef _OPENMP double gw_cv_all_omp(mat x, vec y, mat dp, bool dm_given, mat dmat, double p, double theta, bool longlat, double bw, int kernel, bool adaptive, int threads, int ngroup, int igroup);
RcppExport SEXP _GWmodel_gw_cv_all_omp(SEXP xSEXP, SEXP ySEXP, SEXP dpSEXP, SEXP dm_givenSEXP, SEXP dmatSEXP, SEXP pSEXP, SEXP thetaSEXP, SEXP longlatSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP, SEXP threadsSEXP, SEXP ngroupSEXP, SEXP igroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type dp(dpSEXP);
    Rcpp::traits::input_parameter< bool >::type dm_given(dm_givenSEXP);
    Rcpp::traits::input_parameter< mat >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type longlat(longlatSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< int >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< int >::type igroup(igroupSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_cv_all_omp(x, y, dp, dm_given, dmat, p, theta, longlat, bw, kernel, adaptive, threads, ngroup, igroup));
    return rcpp_result_gen;
END_RCPP
}
// gw_local_r2
vec gw_local_r2(mat dp, vec dybar2, vec dyhat2, bool dm_given, mat dmat, double p, double theta, bool longlat, double bw, int kernel, bool adaptive);
RcppExport SEXP _GWmodel_gw_local_r2(SEXP dpSEXP, SEXP dybar2SEXP, SEXP dyhat2SEXP, SEXP dm_givenSEXP, SEXP dmatSEXP, SEXP pSEXP, SEXP thetaSEXP, SEXP longlatSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type dp(dpSEXP);
    Rcpp::traits::input_parameter< vec >::type dybar2(dybar2SEXP);
    Rcpp::traits::input_parameter< vec >::type dyhat2(dyhat2SEXP);
    Rcpp::traits::input_parameter< bool >::type dm_given(dm_givenSEXP);
    Rcpp::traits::input_parameter< mat >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type longlat(longlatSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_local_r2(dp, dybar2, dyhat2, dm_given, dmat, p, theta, longlat, bw, kernel, adaptive));
    return rcpp_result_gen;
END_RCPP
}
// BIC
double BIC(vec y, mat x, mat beta, vec s_hat);
RcppExport SEXP _GWmodel_BIC(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP s_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< vec >::type s_hat(s_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(BIC(y, x, beta, s_hat));
    return rcpp_result_gen;
END_RCPP
}
// box_wt_vec
vec box_wt_vec(vec distv, double bw);
RcppExport SEXP _GWmodel_box_wt_vec(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(box_wt_vec(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// box_wt_vec_ad
vec box_wt_vec_ad(vec distv, double bw);
RcppExport SEXP _GWmodel_box_wt_vec_ad(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(box_wt_vec_ad(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// gau_wt_vec_ad
vec gau_wt_vec_ad(vec distv, double bw);
RcppExport SEXP _GWmodel_gau_wt_vec_ad(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(gau_wt_vec_ad(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// bis_wt_vec_ad
vec bis_wt_vec_ad(vec distv, double bw);
RcppExport SEXP _GWmodel_bis_wt_vec_ad(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(bis_wt_vec_ad(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// tri_wt_vec_ad
vec tri_wt_vec_ad(vec distv, double bw);
RcppExport SEXP _GWmodel_tri_wt_vec_ad(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(tri_wt_vec_ad(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// exp_wt_vec_ad
vec exp_wt_vec_ad(vec distv, double bw);
RcppExport SEXP _GWmodel_exp_wt_vec_ad(SEXP distvSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type distv(distvSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_wt_vec_ad(distv, bw));
    return rcpp_result_gen;
END_RCPP
}
// gw_weight
vec gw_weight(vec vdist, double bw, std::string kernel, bool adaptive);
RcppExport SEXP _GWmodel_gw_weight(SEXP vdistSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type vdist(vdistSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_weight(vdist, bw, kernel, adaptive));
    return rcpp_result_gen;
END_RCPP
}
// gw_reg_2
vec gw_reg_2(mat x, vec y, vec w);
RcppExport SEXP _GWmodel_gw_reg_2(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_reg_2(x, y, w));
    return rcpp_result_gen;
END_RCPP
}
// gwr_q
mat gwr_q(mat x, vec y, mat dMat, double bw, std::string kernel, bool adaptive);
RcppExport SEXP _GWmodel_gwr_q(SEXP xSEXP, SEXP ySEXP, SEXP dMatSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type dMat(dMatSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    rcpp_result_gen = Rcpp::wrap(gwr_q(x, y, dMat, bw, kernel, adaptive));
    return rcpp_result_gen;
END_RCPP
}
// e_vec
vec e_vec(int m, int n);
RcppExport SEXP _GWmodel_e_vec(SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(e_vec(m, n));
    return rcpp_result_gen;
END_RCPP
}
// gwr_mixed_trace
double gwr_mixed_trace(mat x1, mat x2, vec y, mat dMat, double bw, std::string kernel, bool adaptive);
RcppExport SEXP _GWmodel_gwr_mixed_trace(SEXP x1SEXP, SEXP x2SEXP, SEXP ySEXP, SEXP dMatSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type dMat(dMatSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    rcpp_result_gen = Rcpp::wrap(gwr_mixed_trace(x1, x2, y, dMat, bw, kernel, adaptive));
    return rcpp_result_gen;
END_RCPP
}
// gwr_mixed_2
List gwr_mixed_2(mat x1, mat x2, vec y, mat dMat, mat dMat_rp, double bw, std::string kernel, bool adaptive);
RcppExport SEXP _GWmodel_gwr_mixed_2(SEXP x1SEXP, SEXP x2SEXP, SEXP ySEXP, SEXP dMatSEXP, SEXP dMat_rpSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP adaptiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type dMat(dMatSEXP);
    Rcpp::traits::input_parameter< mat >::type dMat_rp(dMat_rpSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    rcpp_result_gen = Rcpp::wrap(gwr_mixed_2(x1, x2, y, dMat, dMat_rp, bw, kernel, adaptive));
    return rcpp_result_gen;
END_RCPP
}
