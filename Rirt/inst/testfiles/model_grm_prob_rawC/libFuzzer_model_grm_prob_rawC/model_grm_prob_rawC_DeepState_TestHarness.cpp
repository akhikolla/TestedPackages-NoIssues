// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// model_grm_prob_rawC_DeepState_TestHarness_generation.cpp and model_grm_prob_rawC_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List model_grm_prob_rawC(NumericVector t, NumericVector a, NumericMatrix b, double D);

TEST(Rirt_deepstate_test,model_grm_prob_rawC_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector t  = RcppDeepState_NumericVector();
  std::string t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Rirt/inst/testfiles/model_grm_prob_rawC/libFuzzer_model_grm_prob_rawC/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_t.qs";
  qs::c_qsave(t,t_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector a  = RcppDeepState_NumericVector();
  std::string a_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Rirt/inst/testfiles/model_grm_prob_rawC/libFuzzer_model_grm_prob_rawC/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_a.qs";
  qs::c_qsave(a,a_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a values: "<< a << std::endl;
  NumericMatrix b  = RcppDeepState_NumericMatrix();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Rirt/inst/testfiles/model_grm_prob_rawC/libFuzzer_model_grm_prob_rawC/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_b.qs";
  qs::c_qsave(b,b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericVector D(1);
  D[0]  = RcppDeepState_double();
  std::string D_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Rirt/inst/testfiles/model_grm_prob_rawC/libFuzzer_model_grm_prob_rawC/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_D.qs";
  qs::c_qsave(D,D_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "D values: "<< D << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    model_grm_prob_rawC(t,a,b,D[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
