// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pointDistance3_DeepState_TestHarness_generation.cpp and pointDistance3_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix pointDistance3(NumericVector fromX, NumericVector toX, NumericVector fromY, NumericVector toY, double maxDistance);

TEST(SpaDES.tools_deepstate_test,pointDistance3_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector fromX  = RcppDeepState_NumericVector();
  std::string fromX_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SpaDES.tools/inst/testfiles/pointDistance3/libFuzzer_pointDistance3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_fromX.qs";
  qs::c_qsave(fromX,fromX_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fromX values: "<< fromX << std::endl;
  NumericVector toX  = RcppDeepState_NumericVector();
  std::string toX_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SpaDES.tools/inst/testfiles/pointDistance3/libFuzzer_pointDistance3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_toX.qs";
  qs::c_qsave(toX,toX_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "toX values: "<< toX << std::endl;
  NumericVector fromY  = RcppDeepState_NumericVector();
  std::string fromY_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SpaDES.tools/inst/testfiles/pointDistance3/libFuzzer_pointDistance3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_fromY.qs";
  qs::c_qsave(fromY,fromY_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fromY values: "<< fromY << std::endl;
  NumericVector toY  = RcppDeepState_NumericVector();
  std::string toY_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SpaDES.tools/inst/testfiles/pointDistance3/libFuzzer_pointDistance3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_toY.qs";
  qs::c_qsave(toY,toY_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "toY values: "<< toY << std::endl;
  NumericVector maxDistance(1);
  maxDistance[0]  = RcppDeepState_double();
  std::string maxDistance_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SpaDES.tools/inst/testfiles/pointDistance3/libFuzzer_pointDistance3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxDistance.qs";
  qs::c_qsave(maxDistance,maxDistance_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxDistance values: "<< maxDistance << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pointDistance3(fromX,toX,fromY,toY,maxDistance[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
