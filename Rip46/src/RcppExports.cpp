// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mySqlToIp4
IntegerVector mySqlToIp4(NumericVector x);
RcppExport SEXP _Rip46_mySqlToIp4(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mySqlToIp4(x));
    return rcpp_result_gen;
END_RCPP
}
// hostToIp4
IntegerVector hostToIp4(CharacterVector x);
RcppExport SEXP _Rip46_hostToIp4(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hostToIp4(x));
    return rcpp_result_gen;
END_RCPP
}
// ip4ToHost
CharacterVector ip4ToHost(IntegerVector x);
RcppExport SEXP _Rip46_ip4ToHost(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ip4ToHost(x));
    return rcpp_result_gen;
END_RCPP
}
// mask
IntegerVector mask(IntegerVector x, int m);
RcppExport SEXP _Rip46_mask(SEXP xSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(mask(x, m));
    return rcpp_result_gen;
END_RCPP
}
// classA
IntegerVector classA(IntegerVector x);
RcppExport SEXP _Rip46_classA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(classA(x));
    return rcpp_result_gen;
END_RCPP
}
// classB
IntegerVector classB(IntegerVector x);
RcppExport SEXP _Rip46_classB(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(classB(x));
    return rcpp_result_gen;
END_RCPP
}
// classC
IntegerVector classC(IntegerVector x);
RcppExport SEXP _Rip46_classC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(classC(x));
    return rcpp_result_gen;
END_RCPP
}
// hostToIp6
ComplexVector hostToIp6(CharacterVector x);
RcppExport SEXP _Rip46_hostToIp6(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hostToIp6(x));
    return rcpp_result_gen;
END_RCPP
}
// ip6ToHost
CharacterVector ip6ToHost(ComplexVector x);
RcppExport SEXP _Rip46_ip6ToHost(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ip6ToHost(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rip46_mySqlToIp4", (DL_FUNC) &_Rip46_mySqlToIp4, 1},
    {"_Rip46_hostToIp4", (DL_FUNC) &_Rip46_hostToIp4, 1},
    {"_Rip46_ip4ToHost", (DL_FUNC) &_Rip46_ip4ToHost, 1},
    {"_Rip46_mask", (DL_FUNC) &_Rip46_mask, 2},
    {"_Rip46_classA", (DL_FUNC) &_Rip46_classA, 1},
    {"_Rip46_classB", (DL_FUNC) &_Rip46_classB, 1},
    {"_Rip46_classC", (DL_FUNC) &_Rip46_classC, 1},
    {"_Rip46_hostToIp6", (DL_FUNC) &_Rip46_hostToIp6, 1},
    {"_Rip46_ip6ToHost", (DL_FUNC) &_Rip46_ip6ToHost, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rip46(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
